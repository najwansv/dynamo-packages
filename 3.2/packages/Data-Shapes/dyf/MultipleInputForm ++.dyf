{
  "Uuid": "9fbd05c0-ec1f-4bd3-bf37-969a1552eab8",
  "IsCustomNode": true,
  "Category": "Data-Shapes.UI",
  "Description": "Create a form with multiple inputs. \r\nsee www.data-shapes.net for tutorials and infos!",
  "Name": "MultipleInputForm ++",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,  2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n    \r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport unicodedata\r\nimport System\r\n\r\nimport clr\r\nclr.AddReference('System.Xml')\r\nclr.AddReference('System.IO')\r\nfrom System.Xml import XmlDocument\r\nfrom System.IO import Directory, Path\r\nclr.AddReference('System.Windows.Forms')\r\nclr.AddReference('System.Drawing')\r\nfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\r\ntry:\r\n\r\n    clr.AddReference(\"PresentationCore\")\r\n    clr.AddReference(\"WindowsBase\")\r\n    from System.Windows.Input import  Key, Keyboard  \r\n    from System.Windows.Forms import Application, DockStyle,MouseButtons , Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding, NativeWindow\r\n    from System.Collections.Generic import *\r\n    from System.Collections.Generic import List as iList\r\n    from System.Windows.Forms import View as vi\r\n    clr.AddReference('System')\r\n    from System import IntPtr , Char\r\n    from System import Type as SType, IO\r\n    from System import Array\r\n    from System.ComponentModel import Container\r\n    clr.AddReference('System.Data')\r\n    from System.Data import DataTable , DataView\r\n\r\n    try: #try to import All Revit dependencies\r\n        clr.AddReference('RevitAPIUI')\r\n        from  Autodesk.Revit.UI import Selection , TaskDialog \r\n        from  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n        clr.AddReference('RevitNodes')\r\n        import Revit\r\n        clr.ImportExtensions(Revit.Elements)\r\n        clr.ImportExtensions(Revit.GeometryConversion)\r\n        \r\n        clr.AddReference('RevitServices')\r\n        from RevitServices.Persistence import DocumentManager\r\n        doc = DocumentManager.Instance.CurrentDBDocument\r\n        uidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n    \r\n        clr.AddReference('RevitAPI')\r\n        try:\r\n            from Autodesk.Revit.DB import ImageImportOptions    \r\n        except:\r\n            from Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n        from Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n        \r\n        try:\r\n            from Autodesk.Revit.DB import  UnitType\r\n        except:\r\n            from Autodesk.Revit.DB import SpecTypeId\r\n\r\n        dbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n        viewindex = 0\r\n        try:\r\n            UIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n        except:\r\n            UIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n            \r\n        class selectionfilter(ISelectionFilter):\r\n            def __init__(self,category):\r\n                self.category = category\r\n            def AllowElement(self,element):\r\n                if element.Category.Name in [c.Name for c in self.category]:\r\n                    return True\r\n                else:\r\n                    return False\r\n            def AllowReference(reference,point):\r\n                return False\r\n\r\n\r\n            \r\n    except: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n        pass\r\n    \r\n    importcolorselection = 0\r\n    \r\n    try:\r\n        from  Autodesk.Revit.UI import ColorSelectionDialog\r\n    except:\r\n        importcolorselection = 1\r\n\r\n    try:\r\n        from  Autodesk.Revit.DB import ImageTypeSource \r\n    except:\r\n        pass\r\n    \r\n\r\n    \r\n    clr.AddReference('ProtoGeometry')\r\n    from Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n    from System.Reflection import Assembly\r\n\r\n\r\n    \r\n    import re   \r\n    def regexEndNum(input):\r\n        try:\r\n            return  re.search('(\\d+)$', input).group(0)\r\n        except:\r\n            return \"\"\r\n\r\n    def iterateThroughNodes(collection,li):\r\n        if hasattr(collection,'Nodes'):\r\n            ntest = collection.Nodes\r\n            if len(ntest) > 0:\r\n                for i in ntest:\r\n                    iterateThroughNodes(i,li)\r\n            else:\r\n                if collection.Checked:\r\n                    li.append(collection.Tag)\r\n        return li\r\n\r\n    class CustomMessageLoop(NativeWindow):\r\n        def __init__(self, form):\r\n            self.form = form\r\n            self.AssignHandle(form.Handle)\r\n            self.run_loop()\r\n    \r\n        def run_loop(self):\r\n            while self.form.Visible:\r\n                Application.DoEvents()\r\n\r\n    \r\n    class MultiTextBoxForm(Form):\r\n        \r\n        def __init__(self):\r\n            self.Text = 'Data-Shapes | Multi Input UI ++'\r\n            self.output = []\r\n            self.values = []\r\n            self.cancelled = True\r\n            self.lastMouseLocation = 0\r\n            self.startNode = None\r\n    \r\n        def setclose(self, sender, event):\r\n            cbindexread = 0\r\n            if sender.Name != \"Cancel\":\r\n                self.cancelled = False\r\n                for f in self.output:                   \r\n                    if f.GetType() == myTextBox:\r\n                        if f._isNum :\r\n                            val = float(f.Text)\r\n                        else:\r\n                            val = f.Text\r\n                        self.values.append(val)\r\n                    if f.GetType() == CheckBox:\r\n                        self.values.append(f.Checked)\r\n                    if f.GetType() == Button:\r\n                        if isinstance(f.Tag ,list):\r\n                            try:\r\n                                self.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])                            \r\n                            except:\r\n                                self.values.append(f.Tag)                           \r\n                        else:\r\n                            try:                        \r\n                                if f.Tag.__class__.__name__ != \"Category\":\r\n                                    self.values.append(f.Tag)\r\n                                else:\r\n                                    self.values.append([])\r\n                            except:\r\n                                self.values.append(f.Tag)   \r\n                    if f.GetType() == ComboBox:\r\n                        try:\r\n                            key = f.Text\r\n                            self.values.append(f.Tag[key])\r\n                        except:\r\n                            self.values.append(None)\r\n                    if f.GetType() == mylistview:\r\n                        self.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n                    if f.GetType() == mytrackbar:\r\n                        self.values.append(f.startval+f.Value*f.step)\r\n                    if f.GetType() == mygroupbox:\r\n                        try:\r\n                            key = [j.Text for j in f.Controls if j.Checked == True][0]\r\n                            self.values.append(f.Tag[key])\r\n                        except:\r\n                            self.values.append(None)\r\n                    if f.GetType() == myDataGridView:\r\n                        f.EndEdit()\r\n                        dsrc = f.DataSource\r\n                        out = []\r\n                        colcount = f.ColumnCount\r\n                        rowcount = f.RowCount - 1\r\n                        if f.Tag:\r\n                            l = []\r\n                            for i in range(colcount):                               \r\n                                l.append(dsrc.Columns[i].ColumnName)\r\n                            out.append(l)                               \r\n                            for r in range(rowcount):\r\n                                l = []\r\n                                for i in range(colcount):\r\n                                    l.append(dsrc.DefaultView[r].Row[i])\r\n                                out.append(l)\r\n                        else: \r\n                            for r in range(rowcount):\r\n                                l = []\r\n                                for i in range(colcount):\r\n                                    l.append(dsrc.DefaultView[r].Row[i])\r\n                                out.append(l)\r\n                        self.values.append(out)\r\n                    if f.GetType() == TreeView:\r\n                        ls = []\r\n                        nds = f.Nodes[0]\r\n                        iterateThroughNodes(nds,ls)\r\n                        self.values.append(ls)\r\n                    if f.GetType() == GroupBox:\r\n                        rb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n                        self.values.append(rb.Text)\r\n                        f.Controls.Remove(rb)\r\n            else:\r\n                self.values = None\r\n                self.cancelled = True\r\n            try:\r\n                self.Close()\r\n            except:\r\n                Console.WriteLine(\"error\")\r\n    \r\n        def reset(self, sender, event):\r\n            pass\r\n    \r\n        def openfile(self, sender, event):\r\n            ofd = OpenFileDialog()\r\n            dr = ofd.ShowDialog()\r\n            if dr == DialogResult.OK:\r\n                sender.Text = ofd.FileName\r\n                sender.Tag = ofd.FileName\r\n\r\n        def exportToExcel(self, sender, event):\r\n            #importing Excel IronPython libraries\r\n            clr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n            from Microsoft.Office.Interop import Excel\r\n            ex = Excel.ApplicationClass()\r\n            ex.Visible = sender.Tag[1]\r\n            ex.DisplayAlerts = False\r\n            fbd = FolderBrowserDialog()\r\n            fbd.SelectedPath = sender.Text\r\n            parent = sender.Parent\r\n            fptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n            dataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n            dataTable = dataGrid.DataSource\r\n            fptext = fptextbox.Text\r\n            titletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n            dr = fbd.ShowDialog()\r\n            frstRwTtle = sender.Tag[0]\r\n            if frstRwTtle:\r\n                _header = Excel.XlYesNoGuess.xlYes\r\n            else:\r\n                _header = Excel.XlYesNoGuess.xlNo\r\n            if dr == DialogResult.OK:\r\n                workbk = ex.Workbooks.Add()\r\n                worksheet = workbk.Worksheets.Add()\r\n                #Writing title and doc info\r\n                if sender.Tag[2]:\r\n                    titleCell = worksheet.Cells[1,1]\r\n                    worksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n                    titleCell.Value2 = titletext\r\n                    titleCell.Font.Size = 18\r\n                    titleCell.Font.Bold = True\r\n                    startR = 3\r\n                    endR = 3\r\n                else:\r\n                    startR = 1\r\n                    endR = 0    \r\n                if frstRwTtle:\r\n                    for j in range(0,dataTable.Columns.Count):\r\n                        worksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName               \r\n                    for i in range(0,dataTable.Rows.Count):\r\n                        for j in range(0,dataTable.Columns.Count):\r\n                            worksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n                    xlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])                          \r\n                else :\r\n                    for i in range(0,dataTable.Rows.Count):\r\n                        for j in range(0,dataTable.Columns.Count):\r\n                            worksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()              \r\n                    xlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n                xlrange.Columns.AutoFit()\r\n                worksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n                worksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n                workbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n                if not sender.Tag[1]:\r\n                    workbk.Close()\r\n                    ex.Quit()\r\n\r\n        def startCell(self, sender, event ):\r\n            sender.startcell[\"X\"] = event.ColumnIndex\r\n            sender.startcell[\"Y\"] = event.RowIndex  \r\n\r\n        def endCell(self, sender, event ):\r\n            try:\r\n                sender.endcell[\"X\"] = event.ColumnIndex\r\n                sender.endcell[\"Y\"] = event.RowIndex \r\n                startval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n                endNum = regexEndNum(startval)\r\n                if endNum != \"\":\r\n                    if sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n                        for e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n                            sender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n                    elif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n                        for e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n                            sender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n                else:               \r\n                    if sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n                        for i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n                            sender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n                    elif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n                        for i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n                            sender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n            except:\r\n                pass\r\n                        \r\n        def startRowDrag(self, sender, event ):\r\n            shmak\r\n            \r\n        def opendirectory(self, sender, event):\r\n            fbd = FolderBrowserDialog()\r\n            fbd.SelectedPath = sender.Text\r\n            dr = fbd.ShowDialog()\r\n            if dr == DialogResult.OK:\r\n                sender.Text = fbd.SelectedPath\r\n                sender.Tag = fbd.SelectedPath\r\n    \r\n        def pickobjects(self, sender, event):   \r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                sel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n                selelem = [doc.GetElement(s.ElementId) for s in sel]\r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n        #THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n        def pickautocadobjects(self, sender, event):   \r\n            selelem = []    \r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                acadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n                acadDoc.Activate()\r\n                acadUser = acadDoc.GetVariable(\"users5\")    \r\n                acadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n                selection_ = acadDoc.ActiveSelectionSet\r\n                acadDoc.SendCommand(\"(setq ss nil) \")\r\n                if acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n                    for sel in selection_:              \r\n                        selelem.append(sel)     \r\n                    acadDoc.SetVariable(\"users5\", acadUser)\r\n                sender.Tag = list(selelem)      \r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True    \r\n\r\n        def pickautocadobject(self, sender, event):   \r\n            selelem = None  \r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                acadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n                acadUser = acadDoc.GetVariable(\"users5\")\r\n                acadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n                acadDoc.SetVariable(\"pickbox\", 5)\r\n                acadDoc.Activate()\r\n                acadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n                acadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")     \r\n                selection_ = acadDoc.GetVariable(\"users5\")\r\n                acadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n                acadDoc.SetVariable(\"users5\", acadUser)\r\n                selelem = acadDoc.HandleToObject(selection_)\r\n                sender.Tag = selelem        \r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True    \r\n\r\n        def pickobjectsordered(self, sender, event):\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            output = []\r\n            test = True\r\n            TaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n            while test:\r\n                try:\r\n                    sel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n                    output.append(sel.ToDSType(True))\r\n                except : \r\n                    test = False\r\n                sender.Tag = output\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n        \r\n        def pickobjectsofcatordered(self, sender, event):\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            output = []\r\n            test = True\r\n            if isinstance(sender.Tag,list):         \r\n                category = UnwrapElement(sender.Tag)\r\n            else:\r\n                category = [UnwrapElement(sender.Tag)]\r\n            TaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n            while test:\r\n                try:\r\n                    selfilt = selectionfilter(category)\r\n                    sel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)              \r\n                    output.append(sel.ToDSType(True))\r\n                except : \r\n                    test = False\r\n                sender.Tag = (output)\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n            \r\n        def picklinkedobjects(self, sender, event):\r\n            #This part was made easier by Dimitar Venkov's work\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                linkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n                link = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n                td = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n                sel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n                selelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True        \r\n\r\n        def pickobject(self, sender, event):\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                sel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n                selelem = doc.GetElement(sel.ElementId) \r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n            \r\n        def picklinkedobject(self, sender, event):\r\n            #This part was made easier by Dimitar Venkov's work\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                linkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n                link = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n                td = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n                sel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n                selelem = link.GetElement(sel.LinkedElementId)\r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass                \r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n            \r\n        def pickobjectsofcat(self, sender, event):\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            if isinstance(sender.Tag,list):     \r\n                category = UnwrapElement(sender.Tag)\r\n            else:\r\n                category = [UnwrapElement(sender.Tag)]\r\n            try:\r\n                selfilt = selectionfilter(category)\r\n                sel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n                selelem = [doc.GetElement(s.ElementId) for s in sel]\r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n\r\n        def pickobjectofcat(self, sender, event):\r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            if isinstance(sender.Tag,list):     \r\n                category = UnwrapElement(sender.Tag)\r\n            else:\r\n                category = [UnwrapElement(sender.Tag)]\r\n            try:\r\n                selfilt = selectionfilter(category)\r\n                sel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n                selelem = doc.GetElement(sel.ElementId) \r\n                sender.Tag = (selelem)\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n\r\n        def treeNodeMouseDown(self, sender, event):\r\n            if Keyboard.IsKeyDown(Key.LeftShift) and event.Button == MouseButtons.Left:\r\n                tv = sender\r\n                endNode = tv.GetNodeAt(0, event.Y)\r\n                #If both nodes exist and are in the same parent node\r\n                if self.startNode != None and endNode != None and self.startNode.Parent == endNode.Parent:\r\n                    startIndex = self.startNode.Index\r\n                    endIndex = endNode.Index\r\n                    #Swap the indexes if the starting index is greater than the ending index\r\n                    if startIndex > endIndex:\r\n                        temp = startIndex\r\n                        startIndex = endIndex\r\n                        endIndex = temp\r\n                    for i in range(startIndex,endIndex+1):                    \r\n                        self.startNode.Parent.Nodes[i].Checked = not self.startNode.Parent.Nodes[i].Checked\r\n                    self.lastMouseLocation = event.Y\r\n            else:\r\n                tv = sender\r\n                self.startNode = tv.GetNodeAt(0, event.Y)\r\n                \r\n                \r\n            \r\n        def pickfaces(self, sender, event):\r\n            faces = []          \r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            try:\r\n                selface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n                for s in selface:\r\n                    elemid = s.ElementId\r\n                    elem = doc.GetElement(elemid)\r\n                    if isinstance(elem,FamilyInstance):\r\n                        transf = elem.GetTransform().ToCoordinateSystem()\r\n                        geom = elem.GetGeometryObjectFromReference(s)\r\n                        convertedGeom = geom.Convert(s, transf)                 \r\n                        faces.append(convertedGeom)\r\n                    else:\r\n                        f = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n                        [i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n                        faces.append(f)\r\n                sender.Tag = [i for j in faces for i in j]\r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n                \r\n        def pickpointsonface(self, sender, event):\r\n            faces = []          \r\n            for c in self.Controls:\r\n                c.Enabled = False\r\n            selpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n            points = []\r\n            for s in selpoints:\r\n                pt = s.GlobalPoint\r\n                points.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n            sender.Tag = points\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n                \r\n        def pickedges(self, sender, event):\r\n            edges = []\r\n            for c in self.Controls:\r\n                c.Enabled = False   \r\n            try:                \r\n                seledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n                for s in seledge:\r\n                    elemid = s.ElementId\r\n                    elem = doc.GetElement(elemid)\r\n                    if isinstance(elem,FamilyInstance):\r\n                        transf = elem.GetTransform().ToCoordinateSystem()\r\n                        geom = elem.GetGeometryObjectFromReference(s)\r\n                        convertedGeom = geom.Convert(s, transf)\r\n                        convertedGeom.Tags.AddTag(\"RevitFaceReference\", s)\r\n                        edges.append(convertedGeom)                 \r\n                    else:\r\n                        e = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n                        e.Tags.AddTag(\"RevitFaceReference\", s)\r\n                        edges.append(e)\r\n                sender.Tag = edges\r\n                \r\n                \r\n            except:\r\n                pass\r\n            for c in self.Controls:\r\n                c.Enabled = True\r\n\r\n        def colorpicker(self, sender, event):\r\n            dialog = ColorSelectionDialog()\r\n            selection = ColorSelectionDialog.Show(dialog)\r\n            selected = dialog.SelectedColor\r\n            sender.Tag = selected\r\n            sender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n            sender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n    \r\n        def topmost(self):\r\n            self.TopMost = True\r\n    \r\n        def lvadd(self, sender, event):\r\n            sender.Tag = [i for i in sender.CheckedItems]\r\n            \r\n        def scroll(self, sender, event):\r\n            parent = sender.Parent\r\n            child = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n            child.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n        def openurl(self, sender, event):\r\n            webbrowser.open(sender.Tag)\r\n    \r\n        def selectall(self, sender, event):\r\n            if sender.Checked:\r\n                parent = sender.Parent\r\n                listview = parent.GetChildAtPoint(Point(0,0))\r\n                for i in listview.Items:\r\n                    i.Checked = True\r\n            else:\r\n                pass\r\n                \r\n        def selectnone(self, sender, event):\r\n            if sender.Checked:\r\n                parent = sender.Parent\r\n                listview = parent.GetChildAtPoint(Point(0,0))\r\n                for i in listview.Items:\r\n                    i.Checked = False\r\n            else:\r\n                pass        \r\n\r\n        def updateallnone(self, sender, event):\r\n            try:\r\n                parent = sender.Parent\r\n                rball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n                rbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n                if sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n                    rbnone.Checked = False\r\n                    rball.Checked = False\r\n                elif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n                    rball.Checked = False\r\n                    rbnone.Checked = False\r\n                elif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n                    rball.Checked = True\r\n                    rbnone.Checked = False\r\n                elif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n                    rball.Checked = False\r\n                    rbnone.Checked = True           \r\n                else :\r\n                    rball.Checked = False\r\n                    rbnone.Checked = False\r\n            except:\r\n                pass\r\n\r\n        def zoomcenter(self, sender, event ):\r\n            if event.X > 15:        \r\n                try:\r\n                    element = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n                    uidoc.ShowElements(element)\r\n                except:\r\n                    pass\r\n            else:\r\n                pass\r\n                \r\n            \r\n        def setviewforelement(self, sender, event ):    \r\n            if event.X > 15*xRatio:             \r\n                try:\r\n                    item = sender.GetItemAt(event.X,event.Y).Text\r\n                    element = UnwrapElement(sender.Values[item])\r\n                    try:\r\n                        viewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n                    except:\r\n                        viewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n                    global viewindex\r\n                    dbView = viewsforelement[viewindex]\r\n                    id = [element.Id]\r\n                    icollection = iList[ElementId](id)\r\n                    uidoc.Selection.SetElementIds(icollection)\r\n                except:\r\n                    pass\r\n            else:       \r\n                pass\r\n\r\n\r\n        def CheckChildren(self, sender, event ):\r\n            evNode = event.Node     \r\n            checkState = evNode.Checked \r\n            for n in event.Node.Nodes:      \r\n                n.Checked = checkState          \r\n                \r\n        def ActivateOption(self, sender, event ):\r\n            parent = sender.Parent\r\n            associatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n            restofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n            if sender.Checked:\r\n                associatedControls.Enabled = True\r\n                for c in restofcontrols:\r\n                    c.Enabled = False\r\n                parent.Tag = sender.Text\r\n                \r\n        def showtooltip(self, sender, event ):\r\n            ttp = ToolTip()\r\n            ttp.AutoPopDelay = 10000\r\n            ttp.SetToolTip(sender , sender.Tag) \r\n\r\n        def numsOnly(self, sender, event ):\r\n            if Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n                event.Handled = True\r\n        \r\n        def chart_showLabels(self, sender, event):\r\n            cb = sender\r\n            panelcht = sender.Parent\r\n            chart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n            for s in chart1.Series:\r\n                if s.ChartType == SeriesChartType.Pie:\r\n                    if cb.Checked:\r\n                        s[\"PieLabelStyle\"] = \"Inside\"\r\n                    else:\r\n                        s[\"PieLabelStyle\"] = \"Disabled\"\r\n                else:\r\n                    if cb.Checked:\r\n                        s.IsValueShownAsLabel = True\r\n                    else:\r\n                        s.IsValueShownAsLabel = False\r\n                \r\n        def imageexport(self, sender, event):\r\n            import datetime\r\n            from datetime import datetime\r\n            from RevitServices.Transactions import TransactionManager\r\n            #Modify resolution before the render\r\n            fontFam = FontFamily(\"Segoe UI Symbol\")\r\n            originalFont = Font(fontFam,8)\r\n            panelcht = sender.Parent\r\n            chart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n            originalTitleFont = chart1.Titles[0].Font\r\n            originalWidth = chart1.Width\r\n            originalHeight = chart1.Height\r\n            chart1.Visible = False\r\n            chart1.Dock = DockStyle.None\r\n            chart1.Width = 2100 * 0.8\r\n            chart1.Height = 1500 * 0.8\r\n            chart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n            chart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n            chart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n            chart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n            chart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n            chart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n            chart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n            chart1.BackColor = Color.White\r\n            chart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n            chart1.ChartAreas[0].BackColor = Color.White\r\n            for serie in chart1.Series:\r\n                serie.Font = Font(fontFam, 30)\r\n                for p in serie.Points:\r\n                    p.Font = Font(fontFam, 30)\r\n                    p.MarkerSize = 15\r\n            for legend in chart1.Legends:\r\n                legend.Font = Font(fontFam, 30)\r\n                legend.BackColor = Color.White\r\n            chart1.Invalidate()\r\n            chart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n            #Get back to original settings\r\n            chart1.Width = originalWidth\r\n            chart1.Height = originalHeight\r\n            chart1.BackColor = Color.Transparent\r\n            chart1.ChartAreas[0].BackColor = Color.Transparent\r\n            chart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n            chart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n            chart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n            chart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n            chart1.Titles[0].Font = originalTitleFont\r\n            for serie in chart1.Series:\r\n                serie.Font = originalFont\r\n                for p in serie.Points:\r\n                    p.Font = originalFont\r\n                    p.MarkerSize = 8\r\n            for legend in chart1.Legends:\r\n                legend.Font = originalFont\r\n                legend.BackColor = Color.Transparent\r\n            chart1.Invalidate()\r\n            chart1.Visible = True\r\n            #Import the picture in a Drafting View\r\n            #Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021                   \r\n            collector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n            viewFamilyTypes = []\r\n            for c in collector:\r\n                if c.ViewFamily == ViewFamily.Drafting:\r\n                    viewFamilyTypes.append(c)\r\n            viewFamilyType = viewFamilyTypes[0]\r\n            TransactionManager.Instance.EnsureInTransaction(doc)\r\n            draftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n            draftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n            imagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n            newElement = clr.StrongBox[Element]()\r\n            try:\r\n                importOptions = ImageImportOptions()    \r\n                importOptions.Resolution = 72\r\n                importOptions.Placement = BoxPlacement.TopLeft              \r\n                doc.Import(imagePath,importOptions,draftView,newElement)            \r\n            except:\r\n                try:\r\n                    imageTypeOption = ImageTypeOptions()   \r\n                    imageTypeOption.SetPath(imagePath)                              \r\n                except:\r\n                    imageTypeOption = ImageTypeOptions(imagePath,False,ImageTypeSource.Import)\r\n                imageTypeOption.Resolution = 72                \r\n                imageType = ImageType.Create(doc,imageTypeOption)\r\n                placementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n                ImageInstance.Create(doc,draftView,imageType.Id,placementOptions)               \r\n            TransactionManager.Instance.TransactionTaskDone()                    \r\n        def chart_showLegend(self, sender, event ):\r\n            cb = sender\r\n            panelcht = sender.Parent\r\n            chart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n            if len(chart1.Legends) <= 1:\r\n                for legend in chart1.Legends:\r\n                    if cb.Checked:\r\n                        legend.Enabled = True\r\n                    else:\r\n                        legend.Enabled = False\r\n            else:\r\n                if cb.Checked:\r\n                    chart1.Legends[1].Enabled = True\r\n                else:\r\n                    chart1.Legends[1].Enabled = False\r\n                    \r\n\r\n    class mylistview(ListView):\r\n    \r\n        def __init__(self):\r\n            self.Values = []\r\n\r\n    class mytrackbar(TrackBar):\r\n    \r\n        def __init__(self,startval,step):\r\n            self.startval = startval\r\n            self.step = step\r\n\r\n    class myDataGridView(DataGridView):\r\n    \r\n        def __init__(self):\r\n            self.startcell = {}\r\n            self.endcell = {}\r\n            \r\n    class mygroupbox(GroupBox):\r\n    \r\n        def __init__(self):\r\n            self.Values = []\r\n            \r\n    class myTextBox(TextBox):\r\n    \r\n        def __init__(self):\r\n            self._isNum = False\r\n    \r\n            \r\n    #Form initialization\r\n    \r\n    form = MultiTextBoxForm()\r\n    xRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n    if xRatio == 0:\r\n        xRatio = 1\r\n    yRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n    if yRatio == 0:\r\n        yRatio = 1\r\n    form.topmost()  \r\n    form.ControlBox = True\r\n    xlabel = 25 * xRatio\r\n    xinput = 150 * xRatio\r\n    formy = 10 * yRatio\r\n    if IN[8] * xRatio > (350 * xRatio): formwidth = IN[8] * xRatio\r\n    else: formwidth = 350 * xRatio\r\n    fields = []\r\n    error = 0\r\n    \r\n    #Description \r\n    \r\n    if IN[3] != \"\":\r\n        des = Label()\r\n        des.Location = Point(xlabel,formy)\r\n        des.Font = Font(\"Arial\", 15,FontStyle.Bold)     \r\n        des.AutoSize = True\r\n        des.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n        des.Text = IN[3]\r\n        form.Controls.Add(des)\r\n        formy = des.Bottom + (15*xRatio)\r\n    formheaderheight = formy\r\n    \r\n    #Input form\r\n    \r\n    # Create a container panel for all inputs\r\n    body = Panel()\r\n    body.Location = Point(0,formy)\r\n    body.Width = formwidth - 15*xRatio\r\n    \r\n    \r\n    # Process form inputs\r\n    if isinstance(IN[0],list):\r\n        inputtypes = IN[0]\r\n    else:\r\n        inputtypes = [IN[0]]\r\n    # This definition is to handle the sorting of special characters\r\n    def remove_accents(input_str):\r\n        nfkd_form = unicodedata.normalize('NFKD', input_str)\r\n        only_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n        return only_ascii   \r\n\r\n    #Adding Logo \r\n    #default logo in case no input  \r\n    def getImageByName(ImName):\r\n        dynamo = Assembly.Load('DynamoCore')\r\n        version = str(dynamo.GetName().Version)[:3]     \r\n        dynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n        xdoc = XmlDocument()\r\n        xdoc.Load(dynPath + \"\\DynamoSettings.xml\")\r\n        root = xdoc.DocumentElement\r\n        logopaths = []\r\n        for child in root:\r\n            if child.tag == \"CustomPackageFolders\":\r\n                for path in child:\r\n                    logopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n                    logopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n        deflogopath = \"\"\r\n        for path in logopaths:\r\n            if deflogopath == \"\":\r\n                if os.path.isfile(path):\r\n                    deflogopath = path\r\n                    try:\r\n                        ima = Image.FromFile(deflogopath)\r\n                        bmp = Bitmap.FromFile(deflogopath)\r\n                        return ima,bmp\r\n                    except: \r\n                        pass\r\n                        \r\n    try:\r\n        if IN[4] != '':\r\n            try:\r\n                ima = Image.FromFile(IN[4])\r\n                bmp = Bitmap.FromFile(IN[4])\r\n            except:\r\n                ima = IN[4]\r\n                bmp = IN[4]\r\n\r\n        else :\r\n            _ims = getImageByName(\"a.png\")\r\n            ima = _ims[0]\r\n            bmp = _ims[1]\r\n            \r\n        logo = Panel()\r\n        if IN[6] == None:\r\n            xlogo = 20 * xRatio\r\n            ylogo = formy+ 10*yRatio\r\n        else:\r\n            xlogo = 30 * xRatio\r\n            ylogo = formy\r\n        size = 110 * xRatio\r\n        logo = PictureBox()\r\n        ratio = (ima.Height)/(ima.Width)\r\n        h = float(ima.Height)\r\n        w = float(ima.Width)\r\n        ratio = h/w\r\n        logo.Size = Size(size,size*ratio)\r\n        logo.Image = ima  \r\n        logo.SizeMode = PictureBoxSizeMode.Zoom  \r\n        form.Controls.Add(logo) \r\n        logo.Location = Point(xlogo, ylogo)\r\n        \r\n        \r\n        #Setting icon \r\n        thumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n        thumb.MakeTransparent();\r\n        icon = Icon.FromHandle(thumb.GetHicon())\r\n        form.Icon = icon\r\n\r\n    except :\r\n        logo = Panel()\r\n        logo.Width = 110 * xRatio\r\n        logo.Height = 110 * yRatio\r\n    \r\n    def addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n        y = starty\r\n        for j in inputs:\r\n            label = Label()\r\n            label.Location = Point(xlabel,y+4*yRatio)\r\n            label.AutoSize = True\r\n            label.MaximumSize = Size(labelsize,0)\r\n            if j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n                label.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n            else:\r\n                try:\r\n                    label.Text = j.inputname\r\n                except:\r\n                    pass\r\n            formbody.Controls.Add(label)\r\n    \r\n            if j.__class__.__name__ == 'dropdown':\r\n                cb = ComboBox()\r\n                if j.inputname != \"\":\r\n                    cb.Width = formbody.Width - 25*xRatio  - xinput\r\n                    cb.Location = Point(xinput,y)\r\n                else:\r\n                    cb.Width = formbody.Width - 25*xRatio  - xlabel\r\n                    cb.Location = Point(xlabel,y)\r\n                cb.Sorted = j._sorted\r\n                [cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n                cb.Tag = j\r\n                if j.defaultvalue != None:\r\n                    defindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n                    cb.SelectedIndex = defindex\r\n                formbody.Controls.Add(cb)\r\n                form.output.append(cb)\r\n                y = label.Bottom + 25 * yRatio\r\n            #CHARTS \r\n            if j.__class__.__name__ == 'uipiechart':                    \r\n                labels = j.xseries\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                xseries = [j.xseries]\r\n                yseries = [j.yseries]\r\n                nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)\r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                label = SmartLabelStyle()\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs[\"PieLabelStyle\"] = \"Inside\"\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Pie\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,len(xseries)):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Legend text of the points\r\n                for s in series:\r\n                    for p in s.Points: \r\n                        p.Font = originalFont\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chart1.ChartAreas.Add(chartArea1)               \r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                legend1.IsTextAutoFit = True\r\n                legend1.LegendStyle = LegendStyle.Column\r\n                chart1.Legends.Add(legend1)\r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Size = Size(panelChart.Width,panelChart.Width)\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio             \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Font = originalFont\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.Font = originalFont\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Labels\"\r\n                panelChart.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n                \r\n            elif j.__class__.__name__ == 'uibarchart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                horizont = j.ishorizontal\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values,_horizont):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    if _horizont:\r\n                        srs.ChartType = SeriesChartType.Bar\r\n                    else:\r\n                        srs.ChartType = SeriesChartType.Column\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    srs.Font = originalFont\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                legend1.Docking = Docking.Right\r\n                chart1.Legends.Add(legend1) \r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Size = Size(panelChart.Width,panelChart.Width)\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio         \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.Font = originalFont\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Labels\"\r\n                panelChart.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n                \r\n            elif j.__class__.__name__ == 'uiradarchart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Create a panel for buttons\r\n                panelCtrls = Panel()\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                panelCtrls.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio- xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                autoheight = 250 * yRatio           \r\n                panelChart.Height = autoheight + 73 * yRatio\r\n                ratio = (panelChart.Height)/(panelChart.Width)\r\n                h = float(panelChart.Height)\r\n                w = float(panelChart.Width)\r\n                ratio = h/w\r\n                chart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n                panelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)               \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Radar\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    srs.Font = originalFont\r\n                    srs.BorderWidth = 4\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                chart1.Legends.Add(legend1) \r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Dock = DockStyle.Fill\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio             \r\n                panelCtrls.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Show/Hide legend\"\r\n                panelCtrls.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                \r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Show/Hide labels\"\r\n                panelCtrls.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n                \r\n            elif j.__class__.__name__ == 'uipointchart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Point\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    srs.Font = originalFont\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Change marker size\r\n                originalMarkerSize = 8\r\n                for s in series:\r\n                    for p in s.Points:\r\n                        p.MarkerSize = originalMarkerSize\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                chartArea1 = chart1.ChartAreas[0]\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend2 = Legend()\r\n                #Add legends to charts\r\n                chart1.Legends.Add(legend1)\r\n                chart1.Legends.Add(legend2)\r\n                #Create Custom legend\r\n                customevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n                for s in series:\r\n                    legend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))                   \r\n                def chart_CustomizeLegend(sender, customevent ):\r\n                    chart1 = sender\r\n                    #legend1.Enabled = False\r\n                    legend2.Name = \"Legend2\"\r\n                    for s,it in zip(series,legend2.CustomItems):\r\n                        it.ImageStyle = LegendImageStyle.Marker\r\n                        it.MarkerStyle = s.MarkerStyle\r\n                        it.MarkerColor = s.Color\r\n                        it.BorderColor = Color.Transparent\r\n                        it.MarkerSize *= 1.3\r\n                legend1.Enabled = False\r\n                legend2.Font = originalFont\r\n                legend2.IsTextAutoFit = True\r\n                legend2.BackColor = formbody.BackColor          \r\n                chart1.CustomizeLegend += chart_CustomizeLegend\r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Size = Size(panelChart.Width,panelChart.Width)\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio             \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                \r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Labels\"\r\n                panelChart.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n                                \r\n            elif j.__class__.__name__ == 'uilinechart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Line\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    srs.Font = originalFont\r\n                    srs.BorderWidth = 4\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                chart1.Legends.Add(legend1) \r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Size = Size(panelChart.Width,panelChart.Width)\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio             \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                \r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Labels\"\r\n                panelChart.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n            \r\n            elif j.__class__.__name__ == 'uisplinechart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                panelChart.Name = \"panelChart\"\r\n                #Panels colors\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Spline\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.IsValueShownAsLabel = True\r\n                    srs.Font = originalFont\r\n                    srs.BorderWidth = 4\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                chart1.Legends.Add(legend1) \r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Size = Size(panelChart.Width,panelChart.Width)\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio         \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.AutoSize = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                \r\n                #Add a checkBox to show/hide labels\r\n                checkBox2 = CheckBox()\r\n                checkBox2.AutoCheck = True\r\n                checkBox2.Name = \"checkBox2\"\r\n                checkBox2.Text = \"Labels\"\r\n                panelChart.Controls.Add(checkBox2)\r\n                checkBox2.BringToFront()\r\n                checkBox2.Checked = True\r\n                checkBox2.Font = originalFont\r\n                checkBox2.AutoSize = True\r\n                checkBox2.Click += form.chart_showLabels\r\n                \r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n                \r\n            elif j.__class__.__name__ == 'uibubblechart':\r\n                if isinstance(j.labels,list):\r\n                    labels = j.labels\r\n                else:\r\n                    labels = [j.labels]\r\n                inputcolors = j.inputcolors\r\n                pyList = []\r\n                if isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    xseries = j.xseries\r\n                    yseries = j.yseries\r\n                elif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n                    nbOfSeries = len(j.yseries)\r\n                    xseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        xseries.append(j.xseries)\r\n                        i = i + 1\r\n                    yseries = j.yseries\r\n                elif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n                    nbOfSeries = len(j.xseries)\r\n                    yseries = []\r\n                    i = 1\r\n                    while i <= nbOfSeries:\r\n                        yseries.append(j.yseries)\r\n                        i = i + 1\r\n                    xseries = j.xseries\r\n                else:\r\n                    xseries = [j.xseries]\r\n                    yseries = [j.yseries]\r\n                    nbOfSeries = 1\r\n                if inputcolors is not None:\r\n                    colorBool = True\r\n                    for color in inputcolors:\r\n                        pyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n                    wfColor = Array[Color](pyList)\r\n                else:\r\n                    colorBool = False\r\n                #Set a global Font code\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                originalFont = Font(fontFam,8)\r\n                #Chart created and Panel to host the chart\r\n                chart1 = Chart()\r\n                panelChart = Panel()\r\n                #panelChart.Padding = Padding(1) To create a black border\r\n                chart1.BackColor = formbody.BackColor\r\n                panelChart.BackColor = Color.Transparent\r\n                #PanelChart location\r\n                panelChart.Width = formbody.Width - 25*xRatio - xlabel\r\n                panelChart.Location = Point(xlabel,y + 30)              \r\n                autoheight = 250 * yRatio           \r\n                panelChart.Height = autoheight + 73 * yRatio\r\n                ratio = (panelChart.Height)/(panelChart.Width)\r\n                h = float(panelChart.Height)\r\n                w = float(panelChart.Width)\r\n                ratio = h/w\r\n                chart_maxsize = formbody.Width - 25*xRatio - xlabel - rightmargin\r\n                panelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)               \r\n                #Chart colors palette\r\n                chart1.Palette =  ChartColorPalette.None\r\n                if colorBool:\r\n                    chart1.PaletteCustomColors = wfColor\r\n                else:\r\n                    chart1.Palette =  ChartColorPalette.None\r\n                chart1.Series.Clear()\r\n                #Series created\r\n                def createSeries(seriesName,_keys,_values):\r\n                    srs = Series()\r\n                    srs.Name = seriesName\r\n                    srs.ChartType = SeriesChartType.Bubble\r\n                    srs.ToolTip = \"Percent: #PERCENT\"\r\n                    srs.Font = originalFont\r\n                    for i,j in zip(_keys,_values):\r\n                        srs.Points.AddXY(i,j)\r\n                    return srs\r\n                #Create series\r\n                series = []\r\n                for i in range(0,nbOfSeries):\r\n                    series.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n                #Add series to chart\r\n                for s in series:\r\n                    chart1.Series.Add(s)\r\n                #Refresh the Chart\r\n                chart1.Invalidate()\r\n                #Create a ChartArea and add it to the chart\r\n                chartArea1 = ChartArea()\r\n                chartArea1.BackColor = formbody.BackColor\r\n                chartArea1.Name = \"ChartArea1\"\r\n                chartArea1.AxisX.Title = j.xaxislabel\r\n                chartArea1.AxisY.Title = j.yaxislabel\r\n                chart1.ChartAreas.Add(chartArea1)\r\n                #Create a Legend and add it to the chart\r\n                legend1 = Legend()\r\n                legend1.BackColor = formbody.BackColor\r\n                legend1.Font = originalFont\r\n                legend1.Name = \"Legend1\"\r\n                chart1.Legends.Add(legend1) \r\n                #Initialize the chart and its properties\r\n                chart1.BeginInit()\r\n                chart1.Dock = DockStyle.Fill\r\n                chart1.AntiAliasing = AntiAliasingStyles.All\r\n                fontFam = FontFamily(\"Segoe UI Symbol\")\r\n                titleFont = Font(fontFam,10,FontStyle.Bold)\r\n                title = Title()\r\n                title.Text = j.chartname\r\n                title.Alignment = ContentAlignment.TopLeft\r\n                title.Font = titleFont\r\n                chart1.Titles.Add(title)\r\n                #Add a button to push on view\r\n                bt = Button()\r\n                bt.Tag = \"Push the chart on a view in Revit\"\r\n                bt.Text = \"Push on a draft view\"\r\n                bt.Height = 20 * yRatio\r\n                bt.Width = 140 * yRatio         \r\n                panelChart.Controls.Add(bt)\r\n                bt.BringToFront()\r\n                bt.Click += form.imageexport\r\n                #Add a checkBox to show/hide legend\r\n                checkBox1 = CheckBox()\r\n                checkBox1.AutoCheck = True\r\n                checkBox1.Name = \"checkBox1\"\r\n                checkBox1.Text = \"Show/Hide legend\"\r\n                panelChart.Controls.Add(checkBox1)\r\n                checkBox1.BringToFront()\r\n                checkBox1.Checked = True\r\n                checkBox1.Click += form.chart_showLegend\r\n                #Add chart to panel\r\n                panelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n                #Add chart to panel\r\n                panelChart.Controls.Add(chart1)\r\n                chart1.Location = Point(0,0)\r\n                bt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n                checkBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n                checkBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n                formbody.Controls.Add(panelChart)\r\n                \r\n                y = panelChart.Bottom + 25 * yRatio\r\n\r\n            elif j.__class__.__name__ == 'uitreeview':\r\n                tv = TreeView()\r\n                tv.MouseDown += form.treeNodeMouseDown\r\n                tv.CheckBoxes = True\r\n                titles = j._hastitles\r\n                if j.inputname != \"\":\r\n                    tv.Width =formbody.Width - 25*xRatio - xinput\r\n                    tv.Location = Point(xinput,y)\r\n                else:\r\n                    tv.Width = formbody.Width - 25*xRatio- xlabel\r\n                    tv.Location = Point(xlabel,y)\r\n                tv.Height = j._height\r\n                def treeIterationTitle(control, input):\r\n                    if isinstance(input,list):\r\n                        try:\r\n                            currentNode = TreeNode(remove_accents(input[0].ToString()))\r\n                            currentNode.Tag = \"\"\r\n                            input.pop(0)\r\n                        except:\r\n                            currentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n                            currentNode.Tag = \"\"\r\n                        control.Nodes.Add(currentNode)\r\n                        for i in input:\r\n                            treeIterationTitle(currentNode, i)\r\n                    else:\r\n                        item = TreeNode(remove_accents(input.ToString()))\r\n                        item.Tag = input\r\n                        control.Nodes.Add(item) \r\n                def treeIteration(control, input):\r\n                    if isinstance(input,list):\r\n                        currentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n                        currentNode.Tag = input\r\n                        control.Nodes.Add(currentNode)\r\n                        for i in input:\r\n                            treeIteration(currentNode, i)\r\n                    else:\r\n                        item = TreeNode(remove_accents(input.ToString()))\r\n                        item.Tag = input\r\n                        control.Nodes.Add(item)\r\n                currentNode = TreeNode(\"List1\")\r\n                currentNode.Expand()                \r\n                if titles:\r\n                    tv.Nodes.Add(currentNode)                               \r\n                    for dl in j.datalist:\r\n                        treeIterationTitle(currentNode,dl)  \r\n                else:\r\n                    tv.Nodes.Add(currentNode)                               \r\n                    for dl in j.datalist:\r\n                        treeIteration(currentNode,dl)\r\n                tv.AfterCheck += form.CheckChildren                     \r\n                formbody.Controls.Add(tv)\r\n                form.output.append(tv)\r\n                y = tv.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'listview':\r\n                lvp = Panel()\r\n                if j.inputname != \"\":\r\n                    lvp.Location = Point(xinput,y)\r\n                    lvp.Width = formbody.Width - 25*xRatio- xinput              \r\n                elif j.inputname == \"\" and j.element_count != 0:\r\n                    lvp.Location = Point(xlabel,y+35*yRatio)\r\n                    lvp.Width = formbody.Width - 25*xRatio- xlabel\r\n                else : \r\n                    lvp.Location = Point(xlabel,y)\r\n                    lvp.Width = formbody.Width - 25*xRatio - xlabel             \r\n                lvp.Height = j.height * yRatio + 25 * yRatio\r\n                #Creating the listview box\r\n                lv = mylistview()\r\n                lv.Scrollable = True\r\n                dummyheader = ColumnHeader()\r\n                dummyheader.Text = \"\"\r\n                dummyheader.Name = \"\"\r\n                dummyheader.Width = -2 * xRatio\r\n                lv.HeaderStyle = ColumnHeaderStyle.None\r\n                lv.Columns.Add(dummyheader)\r\n                lv.Values = j\r\n                if not j.display_mode:\r\n                    lv.CheckBoxes = True\r\n                lv.View = vi.Details\r\n                lvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n                if j.sorted :\r\n                    lvItems = sorted(lvItems,key = remove_accents)\r\n                else:\r\n                    pass\r\n                [lv.Items.Add(i) for i in lvItems]\r\n                lv.Location = Point(0,0)\r\n                if j.inputname != \"\" and j.element_count != 0:\r\n                    lv.Width = formbody.Width - 25*xRatio- xinput\r\n                elif j.inputname != \"\" and j.element_count == 0:\r\n                    lv.Width = formbody.Width - 25*xRatio - xinput\r\n                else:\r\n                    lv.Width =formbody.Width - 25*xRatio- xlabel\r\n                lv.Height = j.height * yRatio\r\n                lv.Scrollable = True\r\n                lv.ItemCheck += form.updateallnone\r\n                for i in j.default_values:\r\n                    defInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n                    lv.Items[defInd].Checked = True\r\n                #Click listview items to hilight and center in appropriate view\r\n                if j.highlight :\r\n                    lv.MouseDown += form.setviewforelement\r\n                    lv.MouseUp += form.zoomcenter\r\n                    items = list(lv.Items)\r\n                    lv.FullRowSelect = True\r\n                    del items[::2]\r\n                    for item in items:\r\n                        item.BackColor = Color.FromArgb(230,243,255)\r\n                #Creating select all and select none radiobuttons\r\n                if not j.display_mode:\r\n                    rball = RadioButton()\r\n                    rball.Location = Point(0,(j.height+5)*yRatio)\r\n                    rball.Width = 100 * xRatio\r\n                    rball.Height = 20 * yRatio\r\n                    rball.Font = SystemFonts.DefaultFont\r\n                    rball.Text = \"Select all\"\r\n                    rball.Click += form.selectall\r\n                    rbnone = RadioButton()\r\n                    rbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n                    rbnone.Width = 100 * xRatio\r\n                    rbnone.Height = 20 * yRatio\r\n                    rbnone.Font = SystemFonts.DefaultFont\r\n                    rbnone.Text = \"Select none\"         \r\n                    rbnone.Click += form.selectnone         \r\n                #Adding controls to panel\r\n                lvp.Controls.Add(lv)\r\n                if not j.display_mode:\r\n                    lvp.Controls.Add(rball)\r\n                    lvp.Controls.Add(rbnone)\r\n                formbody.Controls.Add(lvp)\r\n                if not j.display_mode:\r\n                    form.output.append(lv)\r\n                y = lvp.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uitext':\r\n                tb = myTextBox()\r\n                tb.Text = j.defaultvalue\r\n                if j.inputname != \"\":\r\n                    tb.Width = formbody.Width - 25*xRatio - xinput\r\n                    tb.Location = Point(xinput,y)\r\n                else:\r\n                    tb.Width = formbody.Width - 25*xRatio - xlabel\r\n                    tb.Location = Point(xlabel,y)\r\n                if j._isnum:\r\n                    tb._isNum = True\r\n                    tb.KeyPress += form.numsOnly\r\n                formbody.Controls.Add(tb)\r\n                formbody.Controls.Add(label)\r\n                form.output.append(tb)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uimultilinetext':\r\n                tb = myTextBox()\r\n                tb.Text = j.defaultvalue\r\n                tb.Multiline  = True\r\n                tb.Height = j._height * yRatio\r\n                if j.inputname != \"\":\r\n                    tb.Width = formbody.Width - 25*xRatio - xinput\r\n                    tb.Location = Point(xinput,y)\r\n                else:\r\n                    tb.Width = formbody.Width - 25*xRatio- xlabel\r\n                    tb.Location = Point(xlabel,y)\r\n                if j._isnum:\r\n                    tb._isNum = True\r\n                    tb.KeyPress += form.numsOnly\r\n                formbody.Controls.Add(tb)\r\n                formbody.Controls.Add(label)\r\n                form.output.append(tb)\r\n                y = tb.Bottom + 25 * yRatio                             \r\n            elif j.__class__.__name__ == 'tableview':\r\n                #Creating grouping panel\r\n                tvp = Panel()\r\n                tvp.Location = Point(xlabel,y)\r\n                tvp.Width = formbody.Width - 25*xRatio - xlabel\r\n                if (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n                    autoheight = 800 * yRatio\r\n                else:\r\n                    autoheight = (50 + len(j.dataList) * 15 ) * yRatio          \r\n                tvp.Height = autoheight + 73 * yRatio\r\n                #Creating title\r\n                titlep = Label()\r\n                titlep.Text = j._tabletitle\r\n                titlep.Width = formbody.Width - 25*xRatio - xlabel\r\n                titlep.BackColor = Color.FromArgb(153,180,209)\r\n                titlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n                titlep.TextAlign = ContentAlignment.MiddleLeft\r\n                titlep.BorderStyle = BorderStyle.FixedSingle\r\n                titlep.Location = Point(0,0)\r\n                tvp.Controls.Add(titlep)\r\n                #Creating data structure\r\n                dg = myDataGridView()\r\n                #dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n                dg.EnableHeadersVisualStyles = False                \r\n                dt = DataTable()\r\n                dl = j.dataList\r\n                for i in range(len(dl[0])):\r\n                    if j._hasTitle:\r\n                        dt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n                        rngstart = 1\r\n                    else:\r\n                        dt.Columns.Add(\"Column \" + str(i))\r\n                        rngstart = 0                        \r\n                for rindex in range(rngstart,len(dl)):\r\n                    row = dt.NewRow()\r\n                    for i in range(len(dl[rindex])):\r\n                        row[i] = dl[rindex][i]\r\n                    dt.Rows.Add(row)                        \r\n                dg.Tag = j._hasTitle                \r\n                dg.DataSource = dt\r\n                dg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n                dg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n                dg.Width = formbody.Width - 25*xRatio- xlabel\r\n                dg.Location = Point(0,23 * yRatio)\r\n                dg.Height = autoheight\r\n                #Creatin Excel like drag copy functionalities\r\n                dg.CellMouseDown += form.startCell\r\n                dg.CellMouseUp += form.endCell\r\n                #dg.MouseDown += form.startRowDrag\r\n                #dg.MouseUp =           \r\n                tvp.Controls.Add(dg)            \r\n                y = tvp.Bottom + 15 * yRatio\r\n                #Adding export to excel button\r\n                ex = Button()\r\n                ex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n                try:\r\n                    expImage = getImageByName(\"exp.png\")[0]\r\n                    ex.BackgroundImage = expImage\r\n                except:\r\n                    ex.Text = \"Export\"                  \r\n                ex.Width = 60 * xRatio\r\n                ex.Height = 30 * yRatio\r\n                ex.Location = Point(formbody.Width - 25*xRatio - 125 * xRatio ,dg.Bottom + 15 * yRatio)                 \r\n                tvp.Controls.Add(ex)\r\n                ex.Click += form.exportToExcel\r\n                #Adding filepath export textbox\r\n                filepathtb = TextBox()\r\n                filepathtb.Text = \"ExportFileName\"\r\n                filepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n                filepathtb.Width = formbody.Width - 25*xRatio - xlabel - 125 * xRatio\r\n                tvp.Controls.Add(filepathtb)\r\n                #Adding copy to clipboard button\r\n                cb = Button()\r\n                #Adding panel to form\r\n                formbody.Controls.Add(tvp)\r\n                form.output.append(dg)\r\n                y = tvp.Bottom + 25 * yRatio\r\n                form.topmost()\r\n            elif j.__class__.__name__ == 'uitextnote':\r\n                gb = GroupBox()\r\n                gb.Text = j.title\r\n                gb.Parent = form\r\n                gb.SendToBack()\r\n                gb.BackColor = Color.Transparent\r\n                gb.Location = Point(xlabel, y)\r\n                tn = Label()\r\n                tn.Location = Point(xlabel,18 * yRatio)\r\n                tn.AutoSize = True\r\n                tn.MaximumSize = Size(formbody.Width - 25*xRatio - 50 * xRatio,0)\r\n                tn.Text = j.textnote\r\n                tn.BringToFront()\r\n                gb.Controls.Add(tn)\r\n                gb.Size = Size(formbody.Width - 25*xRatio - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n                y = gb.Bottom + 25 * xRatio\r\n                formbody.Controls.Add(gb)\r\n            elif j.__class__.__name__ == 'uibool':\r\n                yn = CheckBox()\r\n                yn.Width = formbody.Width - 25*xRatio - xinput  + 10 * xRatio\r\n                yn.Location = Point(xinput,y)\r\n                yn.Text = j.booltext\r\n                g = yn.CreateGraphics()\r\n                sizetext = g.MeasureString(yn.Text,yn.Font, formbody.Width - 25*xRatio - xinput  -20 * xRatio)\r\n                heighttext = sizetext.Height\r\n                yn.Height = heighttext + 15 * yRatio\r\n                yn.Checked = j.defaultvalue\r\n                formbody.Controls.Add(yn)\r\n                form.output.append(yn)\r\n                y = yn.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiradio':\r\n                yrb = 20 * yRatio\r\n                rbs = []\r\n                rbgroup = mygroupbox()\r\n                if j.inputname != \"\":\r\n                    rbgroup.Width = formbody.Width - 25*xRatio - xinput \r\n                    rbgroup.Location = Point(xinput,y)\r\n                else:\r\n                    rbgroup.Width = formbody.Width - 25*xRatio - xlabel \r\n                    rbgroup.Location = Point(xlabel,y)                  \r\n                rbgroup.Tag = j\r\n                rbcounter = 0\r\n                for key in j.keys():\r\n                    if key != 'inputname' and key != 'defaultvalue':\r\n                        rb = RadioButton()\r\n                        rb.Text = key \r\n                        if j.inputname != \"\":\r\n                            rb.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n                        else:\r\n                            rb.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n                        rb.Location = Point(20 * xRatio,yrb)\r\n                        if rbcounter == j.defaultvalue:\r\n                            rb.Checked = True\r\n                        rbgroup.Controls.Add(rb)\r\n                        g = rb.CreateGraphics()\r\n                        sizetext = g.MeasureString(key,rb.Font, formbody.Width - 25*xRatio - xinput - 90*xRatio)\r\n                        heighttext = sizetext.Height\r\n                        rb.Height = heighttext + 15 * yRatio\r\n                        ybot = rb.Bottom\r\n                        yrb += heighttext + 12 * yRatio\r\n                        rbcounter += 1\r\n                    else:\r\n                        pass\r\n                rbgroup.Height = ybot + 20 * yRatio\r\n                [rbgroup.Controls.Add(rb) for rb in rbs]\r\n                formbody.Controls.Add(rbgroup)\r\n                form.output.append(rbgroup)\r\n                y = rbgroup.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__  == 'uifilepath':\r\n                fp = Button()\r\n                if j.inputname != \"\":\r\n                    fp.Width = formbody.Width - 25*xRatio - xinput \r\n                    fp.Location = Point(xinput,y)\r\n                else:\r\n                    fp.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    fp.Location = Point(xlabel,y)                   \r\n                fp.Tag = j.defaultvalue\r\n                if not j.defaultvalue == \"FilePath\":\r\n                    fp.Tag = j.defaultvalue\r\n                    fp.MouseHover += form.showtooltip   \r\n                fp.Text = j.buttontext\r\n                fp.Height = 20 * yRatio             \r\n                formbody.Controls.Add(fp)\r\n                fp.Click += form.openfile\r\n                form.output.append(fp)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uidirectorypath':\r\n                dp = Button()\r\n                if j.inputname != \"\":\r\n                    dp.Width = formbody.Width - 25*xRatio - xinput \r\n                    dp.Location = Point(xinput,y)\r\n                else:\r\n                    dp.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    dp.Location = Point(xlabel,y)               \r\n                dp.Tag = j.defaultvalue\r\n                dp.Text = j.buttontext\r\n                if not j.defaultvalue == \"DirectoryPath\":\r\n                    dp.Tag = j.defaultvalue\r\n                    dp.MouseHover += form.showtooltip\r\n                dp.Text = j.buttontext  \r\n                dp.Height = 20 * yRatio             \r\n                formbody.Controls.Add(dp)\r\n                dp.Click += form.opendirectory\r\n                form.output.append(dp)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectelements':\r\n                se = Button()\r\n                if j.inputname != \"\":\r\n                    se.Width = formbody.Width - 25*xRatio - xinput \r\n                    se.Location = Point(xinput,y)\r\n                else:\r\n                    se.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    se.Location = Point(xlabel,y)\r\n                se.Text = j.buttontext\r\n                se.Height = 20 * yRatio\r\n                formbody.Controls.Add(se)\r\n                if j.multi == False:\r\n                    se.Click += form.pickobjects\r\n                else:\r\n                    se.Click  += form.pickobject\r\n                form.output.append(se)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectautocadelements':\r\n                se = Button()\r\n                if j.inputname != \"\":\r\n                    se.Width = formbody.Width - 25*xRatio - xinput \r\n                    se.Location = Point(xinput,y)\r\n                else:\r\n                    se.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    se.Location = Point(xlabel,y)\r\n                se.Text = j.buttontext\r\n                se.Height = 20 * yRatio\r\n                formbody.Controls.Add(se)\r\n                if j.multi == False:\r\n                    se.Click += form.pickautocadobjects\r\n                else:\r\n                    se.Click += form.pickautocadobject                              \r\n                form.output.append(se)\r\n                y = label.Bottom + 25 * yRatio              \r\n            elif j.__class__.__name__ == 'uiselectOrderedelements':\r\n                se = Button()\r\n                if j.inputname != \"\":\r\n                    se.Width = formbody.Width - 25*xRatio - xinput \r\n                    se.Location = Point(xinput,y)\r\n                else:\r\n                    se.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    se.Location = Point(xlabel,y)\r\n                se.Text = j.buttontext\r\n                se.Height = 20 * yRatio             \r\n                formbody.Controls.Add(se)\r\n                se.Click  += form.pickobjectsordered\r\n                form.output.append(se)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectlinkedelements':\r\n                se = Button()\r\n                if j.inputname != \"\":\r\n                    se.Width = formbody.Width - 25*xRatio - xinput \r\n                    se.Location = Point(xinput,y)\r\n                else:\r\n                    se.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    se.Location = Point(xlabel,y)\r\n                se.Text = j.buttontext\r\n                se.Height = 20 * yRatio             \r\n                formbody.Controls.Add(se)\r\n                if j.multi == False:\r\n                    se.Click += form.picklinkedobjects\r\n                else:\r\n                    se.Click  += form.picklinkedobject\r\n                form.output.append(se)\r\n\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n                sec = Button()\r\n                if j.inputname != \"\":\r\n                    sec.Width = formbody.Width - 25*xRatio - xinput \r\n                    sec.Location = Point(xinput,y)\r\n                else:\r\n                    sec.Width = formbody.Width - 25*xRatio - xlabel         \r\n                    sec.Location = Point(xlabel,y)\r\n                sec.Text = j.buttontext\r\n                sec.Tag = j.category\r\n                sec.Height = 20 * yRatio\r\n                formbody.Controls.Add(sec)\r\n                if j.multi == False:\r\n                    sec.Click += form.picklinkedobjectsofcat\r\n                else:\r\n                    sec.Click += form.picklinkedobjectofcat\r\n                form.output.append(sec)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectelementsofcat':\r\n                sec = Button()\r\n                if j.inputname != \"\":\r\n                    sec.Width = formbody.Width - 25*xRatio - xinput \r\n                    sec.Location = Point(xinput,y)\r\n                else:\r\n                    sec.Width = formbody.Width - 25*xRatio - xlabel         \r\n                    sec.Location = Point(xlabel,y)\r\n                sec.Text = j.buttontext\r\n                sec.Tag = j.category\r\n                sec.Height = 20 * yRatio\r\n                formbody.Controls.Add(sec)\r\n                if j.multi == False:\r\n                    sec.Click += form.pickobjectsofcat\r\n                else:\r\n                    sec.Click += form.pickobjectofcat\r\n                form.output.append(sec)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n                sec = Button()\r\n                if j.inputname != \"\":\r\n                    sec.Width = formbody.Width - 25*xRatio - xinput \r\n                    sec.Location = Point(xinput,y)\r\n                else:\r\n                    sec.Width = formbody.Width - 25*xRatio - xlabel         \r\n                    sec.Location = Point(xlabel,y)\r\n                sec.Text = j.buttontext\r\n                sec.Tag = j.category\r\n                sec.Height = 20 * yRatio\r\n                formbody.Controls.Add(sec)\r\n                sec.Click += form.pickobjectsofcatordered\r\n                form.output.append(sec)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectfaces':\r\n                sf = Button()\r\n                if j.inputname != \"\":\r\n                    sf.Width = formbody.Width - 25*xRatio - xinput \r\n                    sf.Location = Point(xinput,y)\r\n                else:\r\n                    sf.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    sf.Location = Point(xlabel,y)\r\n                sf.Text = j.buttontext\r\n                sf.Height = 20 * yRatio\r\n                formbody.Controls.Add(sf)\r\n                sf.Click += form.pickfaces\r\n                form.output.append(sf)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectpointsonface':\r\n                spf = Button()\r\n                if j.inputname != \"\":\r\n                    spf.Width = formbody.Width - 25*xRatio - xinput \r\n                    spf.Location = Point(xinput,y)\r\n                else:\r\n                    spf.Width = formbody.Width - 25*xRatio - xlabel         \r\n                    spf.Location = Point(xlabel,y)\r\n                spf.Text = j.buttontext\r\n                spf.Height = 20 * yRatio\r\n                formbody.Controls.Add(spf)\r\n                spf.Click += form.pickpointsonface\r\n                form.output.append(spf)\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiselectedges':\r\n                sed = Button()\r\n                if j.inputname != \"\":\r\n                    sed.Width = formbody.Width - 25*xRatio - xinput \r\n                    sed.Location = Point(xinput,y)\r\n                else:\r\n                    sed.Width = formbody.Width - 25*xRatio - xlabel         \r\n                    sed.Location = Point(xlabel,y)\r\n                sed.Text = j.buttontext\r\n                sed.Height = 20 * yRatio\r\n                formbody.Controls.Add(sed)\r\n                sed.Click += form.pickedges\r\n                form.output.append(sed)\r\n                y = label.Bottom + 25 * yRatio\r\n                \r\n            elif j.__class__.__name__ == 'uislider':\r\n                gb = Panel()\r\n                if j.defaultvalue == '':\r\n                    defval = j.minimum\r\n                else:\r\n                    defval = j.defaultvalue\r\n                sl = mytrackbar(j.minimum,j.step)\r\n                if j.inputname != \"\":\r\n                    gb.Width = formbody.Width - 25*xRatio - xinput \r\n                    gb.Location = Point(xinput,y)\r\n                else:\r\n                    gb.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    gb.Location = Point(xlabel,y)\r\n                gb.Height = 40 * yRatio\r\n                sl.Minimum = 0\r\n                sl.Maximum = (j.maximum-j.minimum)/j.step\r\n                sl.Value = (defval - j.minimum) / j.step\r\n                sl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n                sl.Location = Point(40 * xRatio,0)\r\n                if j.inputname != \"\":\r\n                    sl.Width = formbody.Width - 25*xRatio - xinput  - 35 * xRatio\r\n                else:\r\n                    sl.Width = formbody.Width - 25*xRatio - xlabel  - 35 * xRatio\r\n                gb.Controls.Add(sl)\r\n                form.output.append(sl)\r\n                displabel = Label()\r\n                displabel.Width = 50 * xRatio\r\n                displabel.Location = Point(0,5 * yRatio)\r\n                displabel.Text = str(defval)\r\n                displabel.Height = 30 * yRatio\r\n                displabel.BringToFront()\r\n                gb.Controls.Add(displabel)  \r\n                formbody.Controls.Add(gb)           \r\n                sl.Scroll += form.scroll\r\n                y = label.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiimage':\r\n                pic = Image.FromFile(j.image)\r\n                im = PictureBox()\r\n                if j.showborder:\r\n                    im.BorderStyle = BorderStyle.Fixed3D\r\n                else:\r\n                    im.BorderStyle = BorderStyle.None\r\n                ratio = float(pic.Height) / float(pic.Width)\r\n                image_maxsize = formbody.Width - 25 * xRatio - xlabel\r\n                image_height = image_maxsize * ratio\r\n                im.Size = Size(int(image_maxsize), int(image_height))\r\n                im.Image = pic\r\n                im.SizeMode = PictureBoxSizeMode.Zoom\r\n                formbody.Controls.Add(im)\r\n                im.Location = Point(int(25 * xRatio), int(y + 25 * yRatio))\r\n                y = im.Bottom + int(25 * yRatio)\r\n        \r\n            elif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n                cp = Button()\r\n                if j.inputname != \"\":\r\n                    cp.Width = formbody.Width - 25*xRatio - xinput \r\n                    cp.Location = Point(xinput,y)\r\n                else:\r\n                    cp.Width = formbody.Width - 25*xRatio - xlabel      \r\n                    cp.Location = Point(xlabel,y)\r\n                cp.Text = j.buttontext\r\n                cp.Height = 30 * yRatio\r\n                formbody.Controls.Add(cp)\r\n                cp.Click += form.colorpicker\r\n                form.output.append(cp)\r\n                y = label.Bottom + 25 * yRatio  \r\n            elif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n                importcolorselection = 2\r\n            elif j.__class__.__name__ == 'uigroup':\r\n                grouppanel = GroupBox()\r\n                grouppanel.Text = j.groupname\r\n                grouppanel.Location = Point(xlabel,y)\r\n                grouppanel.Width = formbody.Width - 65 * xRatio\r\n                #recursive implementation of the definition to process grouped inputs\r\n                addinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n                formbody.Controls.Add(grouppanel)\r\n                y = grouppanel.Bottom + 25 * yRatio\r\n            elif j.__class__.__name__ == 'uiconditional':\r\n                grouppanelcond = GroupBox()\r\n                grouppanelcond.Location = Point(xlabel,y)\r\n                grouppanelcond.Width = formbody.Width - 25*xRatio - 65 * xRatio \r\n                form.output.append(grouppanelcond)              \r\n                #recursive implementation of the definition to process conditional groups of inputs\r\n                panlist = []\r\n                rblist = []\r\n                yp = 25 * yRatio\r\n                xrb = 25 * xRatio\r\n                for i,d in zip(j._Conditions,j._GroupedInputs): \r\n                    rb = RadioButton()\r\n                    rb.CheckedChanged += form.ActivateOption\r\n                    rb.Text = i\r\n                    rb.Location = Point(xrb,10*yRatio)\r\n                    rb.Width = 95 * xRatio\r\n                    rblist.append(rb)                   \r\n                    grouppanelcond.Controls.Add(rb)             \r\n                    condition_pannel = Panel()\r\n                    condition_pannel.Name = i\r\n                    condition_pannel.Top = yp\r\n                    condition_pannel.Width = formbody.Width - 25*xRatio - 65 * xRatio\r\n                    condition_pannel.BackColor = Color.Transparent\r\n                    condition_pannel.BringToFront()                 \r\n                    addinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n                    panlist.append(condition_pannel)\r\n                    yp = condition_pannel.Bottom - 25*yRatio\r\n                    xrb += 100 * xRatio\r\n                for pan in panlist:\r\n                    grouppanelcond.Controls.Add(pan)\r\n                for e,pan in enumerate(panlist):\r\n                    if e != j._defaultOptionIndex:\r\n                        pan.Enabled = False\r\n                    else:\r\n                        continue\r\n                rblist[j._defaultOptionIndex].Checked = True\r\n                grouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n                grouppanelcond.BackColor = Color.Transparent                \r\n                formbody.Controls.Add(grouppanelcond)\r\n                form.output.append([grouppanelcond.Tag])                \r\n                y = grouppanelcond.Bottom + 25*yRatio\r\n            formbody.Height = y\r\n\r\n\r\n    # process input lists \r\n    addinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n    \r\n    #add the formbody panel to the form\r\n    form.Controls.Add(body)     \r\n    \r\n\r\n    if IN[6] != None:\r\n        if IN[8] > 400 * yRatio:\r\n            formy += 50 * yRatio\r\n            xinput = 270 * yRatio\r\n        else:\r\n            formy = logo.Bottom + 20 * yRatio\r\n    else:\r\n        formy += 50 * yRatio\r\n\r\n\r\n\r\n    #Adding validation button\r\n    \r\n    button = Button()\r\n    button.Text = IN[1]\r\n    button.Width = formwidth - xinput - 40 * xRatio\r\n    button.Height = 20 * yRatio\r\n    button.Location = Point (xinput,formy)\r\n    button.Click += form.setclose\r\n    form.Controls.Add(button)\r\n    form.MaximizeBox = False\r\n    form.MinimizeBox = False\r\n    form.FormBorderStyle = FormBorderStyle.FixedSingle\r\n    \r\n    #Adding Cancel button\r\n    if IN[6] != None:\r\n        cancelbutton = Button()\r\n        cancelbutton.Text = IN[6]\r\n        cancelbutton.Width = 120 * xRatio\r\n        cancelbutton.Height = 20 * xRatio\r\n        cancelbutton.Name = \"Cancel\"\r\n        cancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n        cancelbutton.Click += form.setclose\r\n        form.Controls.Add(cancelbutton)\r\n        form.CancelButton = cancelbutton\r\n    \r\n    #Adding link to help\r\n    \r\n    if IN[5] != None :\r\n        helplink = LinkLabel()\r\n        helplink.Text = \"Help\"\r\n        helplink.Tag = IN[5]\r\n        helplink.Click += form.openurl\r\n        helplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n        form.Controls.Add(helplink)\r\n    else:\r\n        pass    \r\n            \r\n    form.ShowIcon = True\r\n    form.Width = formwidth\r\n    form.Height = formy + 120 * yRatio\r\n    formfooterheight = form.Height - formheaderheight\r\n    \r\n    # Make formbody scrollable\r\n    \r\n    # if the form is longer than its maximum height, do the following:\r\n    # modify the form height\r\n    # make the formbody panel scrollable\r\n    if form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n        formbody_calculatedheight = IN[7] * yRatio - form.Height\r\n        # make sure the formbody is at least 100 px high\r\n        if formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n        body.Height = formbody_calculatedheight\r\n        form.Height = form.Height + formbody_calculatedheight\r\n        # this (and apparently only this) will implement a vertical AutoScroll *only*\r\n        # http://stackoverflow.com/a/28583501\r\n        body.HorizontalScroll.Maximum = 0\r\n        body.AutoScroll = False\r\n        body.VerticalScroll.Visible = False\r\n        body.AutoScroll = True\r\n        body.BorderStyle = BorderStyle.Fixed3D\r\n    else:\r\n        form.Height = form.Height + body.Height\r\n    # Move footer elements\r\n    logo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n    button.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n    if IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n    if IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n    #Positionning the form at top left of current view\r\n    #In The revit environment\r\n    try:\r\n        uiviews = uidoc.GetOpenUIViews()\r\n        if doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n            activeviewid = doc.ActiveView.Id\r\n            activeUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n        else:\r\n            activeUIView = uiviews[0]\r\n        rect = activeUIView.GetWindowRectangle()\r\n        form.StartPosition = FormStartPosition.Manual\r\n        form.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n    except:\r\n        pass\r\n    \r\n        \r\n    if IN[2]:\r\n        if importcolorselection != 2:\r\n            form.Show()\r\n            CustomMessageLoop(form)\r\n            result = form.values\r\n            OUT = result,True, form.cancelled \r\n        else:\r\n            OUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n    else :\r\n        OUT = ['Set toggle to true!'] , False, False\r\nexcept System.Exception, e:\r\n    # Accessing the exception message and stack trace\r\n    exception_message = e.Message\r\n    stack_trace = e.StackTrace\r\n    formatted_exception = \"{}\\nStack Trace:\\n{}\".format(exception_message, stack_trace)\r\n    OUT = formatted_exception, \"error\", \"error\"\r\n",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "652ef6e6fd194bd6a3c0f96e7445d3e4",
      "Inputs": [
        {
          "Id": "58d7de38c0cf4bd098ef9e2277140426",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "51727c29c41d4c1eb2afc3806965fb37",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c9e7dd78f56442c0af974e6cce03fade",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "640e02b339a44763a39b8a516e36f52c",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86a11f12ece14314b479c1c7b4f39ebe",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ba3e84ec90144632866f73703e78b090",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c5fbb644d1e4da7892b5ec901d2957d",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "139c4269da2642ffab516f2776887a2d",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dfc7ac4ef9aa4bbe9009623c283354a3",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7522ca3f542345e9a315baeea335dfb7",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "748513389b434fe4af8e0897d7250898",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "Description_optional",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": "\"\"",
        "Description": ""
      },
      "Id": "aee876f4fa604b94b6829f495e2af792",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "79be0c104f00432a8a3f917dabe3f18c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "Logo_optional",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": "\"\"",
        "Description": ""
      },
      "Id": "eb6d92c451e84b3c8461eb2623034eb8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32ab87e02ffa4c4bb3031f5d6f0fe68b",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "User Inputs",
      "Id": "47e0a03143564447ad0aba20606d99f4",
      "Inputs": [
        {
          "Id": "b9f8e3d628bc4b0c8d2d01ab8cd89da6",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "OUT[0];\nOUT[1];\nOUT[2];",
      "Id": "6827a40ad0784ecba5f7ac83d1a8b7a4",
      "Inputs": [
        {
          "Id": "d76ef05135ab4a1c870209e4c131fba8",
          "Name": "OUT",
          "Description": "OUT",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15f061c86446494cb2e3336cc720e550",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f4b7ace8ffa4382929947b62534b2f6",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b8e9d868874848348bd6bad812a83a54",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Was Run ",
      "Id": "eb9fddf68cda490bb14993f1cf2ce43b",
      "Inputs": [
        {
          "Id": "06661dccfcbb4ae7bcd40600ede844ea",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "ButtonText_optional",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": "\"Set Values\"",
        "Description": ""
      },
      "Id": "44f805f42c464774b18f9ecc58e06f34",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4f2540372c044f5badf8d3390c13e97d",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "Inputs",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "252f2b9990bb4a0da17f36e0d7608dec",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f2902e85352241b9ab3c4544d852926a",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "Toggle",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "0a6977c9a3ce4e629bc9be1fd8cf25f9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6c52575a8ce46998e18b91b7c1eec05",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "LinkToHelp_optional",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "a2f1283318a247e4b81e05d7a1af165b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bdc5dfca6c714ec0a64080d23e785dd6",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "CancelButtonText_optional",
        "TypeName": "string",
        "TypeRank": 0,
        "DefaultValue": "null",
        "Description": " Cancel button will only be displayed if a label text is entered here"
      },
      "Id": "54fa9d32b20b49d7aab8946482548269",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c9da12612e624b29b60816cd86007a8c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Was Cancelled",
      "Id": "f3d565e5379a420795584e2319983692",
      "Inputs": [
        {
          "Id": "82321378fde34a08ad14358f9cc20d8f",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "MaxHeight_optional",
        "TypeName": "int",
        "TypeRank": 0,
        "DefaultValue": "0",
        "Description": ""
      },
      "Id": "cb9cd769fdcd479c8868c89365616091",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fe9f57dfd0a1494ca15477a903793694",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "Width_optional",
        "TypeName": "int",
        "TypeRank": 0,
        "DefaultValue": "400",
        "Description": ""
      },
      "Id": "024ed433d62b4a2ab5735399dd344fcd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0bbc01fb5aa94b609a2a5550ef220943",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "LabelWidth_optional",
        "TypeName": "int",
        "TypeRank": 0,
        "DefaultValue": "140",
        "Description": ""
      },
      "Id": "ffed7bcdb31446bdb2181920ed406813",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d440722c47844d55bb7b66d9f9f1b8e4",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "748513389b434fe4af8e0897d7250898",
      "End": "d76ef05135ab4a1c870209e4c131fba8",
      "Id": "4d8d0a65e0b44d118e1cb4a156a4d788",
      "IsHidden": "False"
    },
    {
      "Start": "79be0c104f00432a8a3f917dabe3f18c",
      "End": "640e02b339a44763a39b8a516e36f52c",
      "Id": "af0d9f65c0714a7c83f33d958294904f",
      "IsHidden": "False"
    },
    {
      "Start": "32ab87e02ffa4c4bb3031f5d6f0fe68b",
      "End": "86a11f12ece14314b479c1c7b4f39ebe",
      "Id": "e6c1543dd872430d99e0441ae7bf7e45",
      "IsHidden": "False"
    },
    {
      "Start": "15f061c86446494cb2e3336cc720e550",
      "End": "b9f8e3d628bc4b0c8d2d01ab8cd89da6",
      "Id": "1c141dcff22f495785d9096550be8829",
      "IsHidden": "False"
    },
    {
      "Start": "4f4b7ace8ffa4382929947b62534b2f6",
      "End": "06661dccfcbb4ae7bcd40600ede844ea",
      "Id": "fa79d90bac6a41d6994512d133204f36",
      "IsHidden": "False"
    },
    {
      "Start": "b8e9d868874848348bd6bad812a83a54",
      "End": "82321378fde34a08ad14358f9cc20d8f",
      "Id": "3f0dc0d7aec047e497734038c5f769b0",
      "IsHidden": "False"
    },
    {
      "Start": "4f2540372c044f5badf8d3390c13e97d",
      "End": "51727c29c41d4c1eb2afc3806965fb37",
      "Id": "c2a59dfdfdbd4510a203fc8adad03c56",
      "IsHidden": "False"
    },
    {
      "Start": "f2902e85352241b9ab3c4544d852926a",
      "End": "58d7de38c0cf4bd098ef9e2277140426",
      "Id": "af1b6cbd595b435c940e97610d97a6ff",
      "IsHidden": "False"
    },
    {
      "Start": "b6c52575a8ce46998e18b91b7c1eec05",
      "End": "c9e7dd78f56442c0af974e6cce03fade",
      "Id": "43281e27226b4268bd59ed343839c3c6",
      "IsHidden": "False"
    },
    {
      "Start": "bdc5dfca6c714ec0a64080d23e785dd6",
      "End": "ba3e84ec90144632866f73703e78b090",
      "Id": "b513fcc626164ea7a4f33da56f27cc7d",
      "IsHidden": "False"
    },
    {
      "Start": "c9da12612e624b29b60816cd86007a8c",
      "End": "9c5fbb644d1e4da7892b5ec901d2957d",
      "Id": "0e1389cd497f4f64b39e97851fee871e",
      "IsHidden": "False"
    },
    {
      "Start": "fe9f57dfd0a1494ca15477a903793694",
      "End": "139c4269da2642ffab516f2776887a2d",
      "Id": "cb338bcaed51422c86f85a316bb04206",
      "IsHidden": "False"
    },
    {
      "Start": "0bbc01fb5aa94b609a2a5550ef220943",
      "End": "dfc7ac4ef9aa4bbe9009623c283354a3",
      "Id": "c960f97970734bebb4a2a8ced20c3874",
      "IsHidden": "False"
    },
    {
      "Start": "d440722c47844d55bb7b66d9f9f1b8e4",
      "End": "7522ca3f542345e9a315baeea335dfb7",
      "Id": "e93c87474d0845989cdada909a9b9ba6",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "652ef6e6fd194bd6a3c0f96e7445d3e4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 221.66545106706263,
        "Y": 86.683212569618775
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "aee876f4fa604b94b6829f495e2af792",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -237.818921203124,
        "Y": -64.1119899707852
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "eb6d92c451e84b3c8461eb2623034eb8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -186.312667703512,
        "Y": 101.831728823146
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "47e0a03143564447ad0aba20606d99f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 757.24181685378824,
        "Y": 30.199365365765573
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "6827a40ad0784ecba5f7ac83d1a8b7a4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 489.68455811431028,
        "Y": 66.608826030507473
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "eb9fddf68cda490bb14993f1cf2ce43b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 761.24181685378824,
        "Y": 140.19936536576597
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "44f805f42c464774b18f9ecc58e06f34",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -300.393511931116,
        "Y": 22.4304834658233
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "252f2b9990bb4a0da17f36e0d7608dec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -157.4162453091858,
        "Y": 169.329282735145
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "0a6977c9a3ce4e629bc9be1fd8cf25f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -187.187155577556,
        "Y": 234.174081182144
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "a2f1283318a247e4b81e05d7a1af165b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -290.467474843354,
        "Y": 314.330860684578
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "54fa9d32b20b49d7aab8946482548269",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -597.573404707885,
        "Y": 408.9216537817
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "f3d565e5379a420795584e2319983692",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 762.34761109512226,
        "Y": 216.719902069626
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "cb9cd769fdcd479c8868c89365616091",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -241.01121323173,
        "Y": 498.353792414835
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "024ed433d62b4a2ab5735399dd344fcd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -217.16527002840689,
        "Y": 588.45476204556167
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "ffed7bcdb31446bdb2181920ed406813",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -263.99622252876657,
        "Y": 669.86622099439853
      }
    ],
    "Annotations": [],
    "X": -5.550402400556095,
    "Y": 22.322725056015372,
    "Zoom": 0.83780161710767764
  }
}