{
  "Uuid": "e138f953-591a-4729-ba24-45fb02ded2c0",
  "IsCustomNode": true,
  "Category": "Modelical.Elements.Query",
  "Description": "This node gets information about handflipping, faceflipping clockwise rotation and counteclockwise rotation.",
  "Name": "Element.GetRotation",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_elements",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Element(s) to get rotation"
      },
      "Id": "fe5500f1c4604e5c80cfec621d576dbd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5454daed24284b63a733c724ab9f4936",
          "Name": "",
          "Description": "Datos de entrada",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un parámetro de función, utilícelo con nodos personalizados.\r\n\r\nPuede especificar el tipo y el valor por defecto del parámetro. Por ejemplo,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "/*FacingFlipped, HandFlipped, Clockwise Rotation and CounterClockwise Rotation */\r\n_info;",
      "Id": "047f1d57c2aa47d1b8b55402629b4733",
      "Inputs": [
        {
          "Id": "91479ee868e54e68ac22b17c621c60c2",
          "Name": "",
          "Description": "Datos de salida",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Una función de salida, se debe utilizar con nodos personalizados"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# This node has been made by Modelical\r\n# www.modelical.com\r\n\r\nimport clr\r\n\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\n\r\n# Function Helpers\r\nfrom math import *\r\n\r\ndef Feet2m(value):\r\n        return value * 0.3048\r\n\r\ndef length(v):\r\n    return sqrt(v.X**2 + v.Y**2)\r\n\r\ndef toList(input):\r\n    if isinstance(input, list):\r\n        return input\r\n    else:\r\n        return [input]\r\n        \r\ndef dot_product(v,w):\r\n   return v.X * w.X + v.Y * w.Y\r\n\r\ndef determinant(v,w):\r\n   return v.X*w.Y-v.Y*w.X\r\n\r\ndef inner_angle(v,w):\r\n   cosx=dot_product(v,w)/(length(v)*length(w))\r\n   rad=acos(cosx) # in radians\r\n   return rad*180/pi # returns degrees\r\n\r\ndef angle_clockwise(A, B):\r\n    inner=inner_angle(A,B)\r\n    det = determinant(A,B)\r\n    if det<0:\r\n        return round(inner,5)\r\n    else:\r\n        return round(360-inner,5)\r\n\r\n# Logic starts here\r\nelements = toList(UnwrapElement(IN[0]))\r\nfList=[]\r\n\r\nfor e in elements:\r\n    try:\r\n        ff=e.FacingFlipped\r\n    except:\r\n        ff=None\r\n\r\n    try:\r\n        hf=e.HandFlipped\r\n    except:\r\n        hf=None\r\n\r\n    try:\r\n        ro=e.HandOrientation\r\n        roCL=angle_clockwise(XYZ(1,0,0), ro)\r\n        roCC=360-roCL\r\n    except:\r\n        roCL=None\r\n        roCC=None\r\n\r\n    fList.append([e,[ff,hf,roCL,roCC]])\r\n\r\n\r\n\r\n# Output\r\nOUT =fList",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "f4afdff937e7464ea478d6d39e669a44",
      "Inputs": [
        {
          "Id": "5b592d10ba6541f7842cfcb5ce90d4fe",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4cea5e4fc9d64cbcae5443b2d1d12792",
          "Name": "OUT",
          "Description": "Resultado de la secuencia de comandos de Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Ejecuta una secuencia de comandos de Python incrustada."
    }
  ],
  "Connectors": [
    {
      "Start": "5454daed24284b63a733c724ab9f4936",
      "End": "5b592d10ba6541f7842cfcb5ce90d4fe",
      "Id": "e69e8af3675f4761a5f9f5531bbf539a",
      "IsHidden": "False"
    },
    {
      "Start": "4cea5e4fc9d64cbcae5443b2d1d12792",
      "End": "91479ee868e54e68ac22b17c621c60c2",
      "Id": "38538740d5454773a45fe449436b2879",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": []
}