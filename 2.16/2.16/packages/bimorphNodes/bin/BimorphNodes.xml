<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BimorphNodes</name>
    </assembly>
    <members>
        <member name="T:BimorphNodes.Nodes.Infrastructure.BoxCorners">
            <summary>
            A class storing four points representing a bounding box - the extra points are the top min
            point and bottom max point.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Min">
            <summary>
            The min point of this <see cref="T:BimorphNodes.Nodes.Infrastructure.BoxCorners"/> which can be used to define the min point
            of a bounding box.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Max">
            <summary>
            The max point of this <see cref="T:BimorphNodes.Nodes.Infrastructure.BoxCorners"/> which can be used to define the max point
            of a bounding box.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.MinTop">
            <summary>
            The point on the left-top side of the box aligned with the Y coord of the <see cref="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Max"/>
            and X coord of the <see cref="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Min"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.MaxBottom">
            <summary>
            The point on the bottom-right side of the box aligned with the Y coords of the <see cref="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Min"/>
            and X coord of the <see cref="P:BimorphNodes.Nodes.Infrastructure.BoxCorners.Max"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoxCorners.#ctor(BimorphNodes.Core.ILinkTransformType)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.BoxCorners"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkElementOutline">
            <summary>
            Creates an Outline (BoundingBox) from a link element and transforms it to the correct location as there
            is a limitation in Revit which causes any property extraction (bounding boxes, actual location of element)
            to be positioned as the links original location, not where it may have been transformed or translated
            by the user. If moveToLinkCentre is 1, then the result is reversed; the given bounding box is transformed
            from its host location to the relative centre-to-centre location of its link instance (represented by the
            totalTransform input).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementOutline.Outline">
            <summary>
            The linked element outline.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementOutline.#ctor(BimorphNodes.Core.ILinkTransformType)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementOutline"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.MinMaxPoint">
            <summary>
            A class which stores new min and max points for a given bounding box following a transform.
            The class will compute the transformed points and calculate the axis aligned min max points
            via an imaginary bounding box which encapsulates the transformed points.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.MinMaxPoint.Min">
            <summary>
            The min point.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.MinMaxPoint.Max">
            <summary>
            The max point.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.MinMaxPoint.#ctor(BimorphNodes.Core.ILinkTransformType,BimorphNodes.Nodes.Infrastructure.BoxCorners)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.MinMaxPoint"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.MinMaxPoint.ComputeMinMax(BimorphNodes.Core.ILinkTransformType,BimorphNodes.Nodes.Infrastructure.BoxCorners)">
            <summary>
            Outputs the new min and max points of the bounding box (Outline) after evaluating the locations
            of the min and max points of the given bounding box. The new min and max points are created through
            using the existing XYZ coordinates of the four corners of the bounding box. The axes of each point
            that lie at the furthest extents are used to define the new min and max points.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.BaseTransformType">
            <summary>
            A base class implementing the <see cref="T:BimorphNodes.Core.ILinkTransformType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BaseTransformType.#ctor(Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.Outline)">
            <summary>
            Constructs a base class <see cref="T:BimorphNodes.Core.ILinkTransformType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BaseTransformType.GetMirrorTransform(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Used to correct positions of points if the Revit link has been mirrored by mirroring the min and max
            points about the origin of the link. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BaseTransformType.GetRotationTransform">
            <summary>
            Returns the rotation transform by calculating the angle between the <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.TotalTransform"/>
            basis X and the global identity X axis.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType">
            <summary>
            A <see cref="T:BimorphNodes.Core.ILinkTransformType"/> which is used to transform an axis-aligned bounding box in
            the active (host) file to a Revit linked instance transform. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.RotationTransform">
            <summary>
            The transform used to rotate the difference between the <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.TotalTransform"/>
            basisX and the global identity basis X.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.MirrorTransform">
            <summary>
            The transform used to inverse the <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.TotalTransform"/> mirror relative
            to the global identity if <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.ReflectedLinkTransform"/> is true.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.Origin">
            <summary>
            The origin to transform from.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.TargetOrigin">
            <summary>
            The target origin to transform to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.RotationDirection">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.RotationDirection"/> for this <see cref="T:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType.#ctor(Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.Outline)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType"/>.
            </summary>
            <param name="targetTransform"> The transform to apply to the <paramref name="outline"/>.</param>
            <param name="outline"> The <see cref="T:Outline"/> to apply the <paramref name="targetTransform"/> to.</param>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType">
            <summary>
            A <see cref="T:BimorphNodes.Core.ILinkTransformType"/> which is used to transform an axis-aligned bounding box
            extracted from a linked element to the active (host) file to a Revit transform-to-Identity. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.RotationTransform">
            <summary>
            The transform used to rotate the difference between the <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.TotalTransform"/>
            basisX and the global identity basis X.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.MirrorTransform">
            <summary>
            The transform used to inverse the <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.TotalTransform"/> mirror relative
            to the global identity if <see cref="P:BimorphNodes.Nodes.Infrastructure.BaseTransformType.ReflectedLinkTransform"/> is true.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.Origin">
            <summary>
            The origin to transform from.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.TargetOrigin">
            <summary>
            The target origin to transform to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.RotationDirection">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.RotationDirection"/> for this <see cref="T:BimorphNodes.Nodes.Infrastructure.HostToLinkTransformType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType.#ctor(Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.Outline)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkToHostTransformType"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.CurveExtensions">
            <summary>
            Helper functions which support the CAD class nodes
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CurveExtensions.TransformCurveToPlane(Autodesk.Revit.DB.Curve,Autodesk.Revit.DB.SketchPlane)">
            <summary> 
            Transforms a view-specifc curve to a sketch plane. This is only used for CAD link instances
            linked/imported to plan views and is needed as model curves or symbolic curves cant be created
            unless they reside on the plane (by default, the geometry extracted from the CAD instance is
            always on the XY plane @ (0,0,0) 
            </summary> 
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CurveExtensions.GetBestFitPlane(Autodesk.Revit.DB.Curve,System.Boolean)">
            <summary>
            Gets a plane from a curve. Copied from CurveUtils from Dynamo's Revit.GeometryConversion.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ListExtensions.EqualiseList``1(System.Collections.Generic.List{``0},System.Int32,``0)">
            <summary>
            Returns a new list with the last item in the input list repeated to match the <paramref name="count"/>
            only if the total number of items is less than this value. If the list contains no items, then
            the <paramref name="defaultItem"/> is repeated instead.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1">
            <summary>
            An class which implements a collection of <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1"/>'s with methods
            to add items into the extractions and query if the layer is present in the collection.
            The layers are defined by an input from the user (or all layers in a CAD file if they specify
            none)
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1.Layers">
            <summary>
            The <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1"/> stored in this collection.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1.#ctor(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1"/>
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1.IsValidLayer(System.String)">
            <summary>
            Returns true if the collection contains the <paramref name="layerName"/> otherwise
            returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1.AddToLayer(System.Collections.Generic.IList{`0},System.String)">
            <summary>
            Adds the <paramref name="convertedItems"/> to the <see cref="P:BimorphNodes.Nodes.Infrastructure.LayerExtractionCollection`1.Layers"/> based on the input
            <paramref name="layerKey"/>. Only if the key exists in the collection will the items be
            added.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DetailCurveConverter">
            <summary>
            Creates new <see cref="T:Autodesk.Revit.DB.DetailCurve"/> curves and wraps them into Dynamo curves.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DetailCurveConverter.Convert(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ICadExtractor{Autodesk.Revit.DB.Curve},BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Converts <see cref="T:Autodesk.Revit.DB.Curve"/>'s to wrapped <see cref="T:Autodesk.Revit.DB.DetailCurve"/> curves.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ModelCurveConverter.Convert(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ICadExtractor{Autodesk.Revit.DB.Curve},BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Converts <see cref="T:Autodesk.Revit.DB.Curve"/>'s to wrapped Dynamo Model curves.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ProtoCurveConverter.Convert(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ICadExtractor{Autodesk.Revit.DB.Curve},BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Converts <see cref="T:Autodesk.Revit.DB.Curve"/>'s to Dynamo Proto curves.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SymbolicCurveConverter.Convert(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ICadExtractor{Autodesk.Revit.DB.Curve},BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Converts <see cref="T:Autodesk.Revit.DB.Curve"/>'s to wrapped Dynamo Symbolic curves.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceData">
            <summary>
            Class stores data about an <see cref="T:ImportInstance"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.Instance">
            <summary>
            The link or imported CAD file.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.View">
            <summary>
            If the CAD link or import has an owner view, this variable stores the associated view.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.ViewSpecific">
            <summary>
            True if the CAD link or import has an owner view.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.Plane">
            <summary>
            The sketch plane which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.Instance"/> is hosted.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceData.#ctor(BimorphNodes.Services.NodeServices,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceData"/> object.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.UserSettings">
            <summary>
            An object storing the inputs by the user.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.UserSettings.ImportInstanceData">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.UserSettings.ImportInstanceData"/> input by the user.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.UserSettings.LayerNames">
            <summary>
            The layer names input by the user. If no layer names have been input then this list
            will default to list all the layer names in the CAD link/import.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.UserSettings.LineStyleMap">
            <summary>
            The line style names input by the user which map to each layer name input. If the user
            has input a list which does not map 1-to-1 to the <see cref="P:BimorphNodes.Nodes.Infrastructure.UserSettings.LayerNames"/> or no line
            styles, this list is extended so it maps 1-to-1 by repeating the last item in the list.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.UserSettings.PlacementView">
            <summary>
            The view used to host converted curves which are view-specific in Revit, such as Symbolic
            and detail curves.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.UserSettings.#ctor(BimorphNodes.Nodes.Infrastructure.ImportInstanceData,Autodesk.Revit.DB.View,BimorphNodes.Services.NodeServices,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.UserSettings"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.ExtractionCollection">
            <summary>
            The <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1"/> containing the geometry extracted from the
            <see cref="P:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.ImportInstanceData"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.ImportInstanceData">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.ImportInstanceData"/> which the extraction shall be performed.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.#ctor(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ImportInstanceData,BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadCurveExtractor.Convert(Autodesk.Revit.DB.GeometryObject)">
            <summary>
            Converts and returns the <see cref="T:Autodesk.Revit.DB.GeometryObject"/> as a <see cref="T:Curve"/>
            or an empty list if it fails to convert or its not a curve.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.CadPointExtractor">
            <summary>
            Class used to extract and convert points from a CAD link or import.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.ExtractionCollection">
            <summary>
            The <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1"/> containing the geometry extracted from the
            <see cref="P:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.ImportInstanceData"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.ImportInstanceData">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.ImportInstanceData"/> which the extraction shall be performed.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.#ctor(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ImportInstanceData,BimorphNodes.Nodes.Infrastructure.UserSettings)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.CadPointExtractor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadPointExtractor.Convert(Autodesk.Revit.DB.GeometryObject)">
            <summary>
            Converts and returns the <see cref="T:Autodesk.Revit.DB.GeometryObject"/> as a <see cref="T:Autodesk.Revit.DB.XYZ"/>
            or an empty list if it fails to convert or its not a point.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ICadExtractor`1">
            <summary>
            Interface for CAD Processor classes which convert curves from CAD links or imports.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ICadExtractor`1.ExtractionCollection">
            <summary>
            A dictionary to store curves extracted from a CAD link or import. Each key is a layer from the CAD file. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ICadExtractor`1.ImportInstanceData">
            <summary>
            The link or imported CAD file.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ICadExtractor`1.Convert(Autodesk.Revit.DB.GeometryObject)">
            <summary>
            Converts the <see cref="T:Autodesk.Revit.DB.GeometryObject"/> to a collection of <see cref="!:T"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1">
            <summary>
            Represents a layer from a CAD file which stores geometry from that layer in a collection. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1.LayerName">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1.ExtractedItems">
            <summary>
            The extracted geometry from the CAD file on the layer specified by the <see cref="P:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1.LayerName"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1.GraphicsStyle">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1.GraphicsStyle"/> to apply to the extracted geometry on the layer.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1">
            <summary>
            An interface which implements a collection of <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1"/>'s with methods
            to add items into the extractions and query if the layer is present in the collection.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1.Layers">
            <summary>
            The <see cref="T:BimorphNodes.Nodes.Infrastructure.ILayerExtraction`1"/> stored in this collection.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1.AddToLayer(System.Collections.Generic.IList{`0},System.String)">
            <summary>
            Adds the item to the collection.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ILayerExtractionCollection`1.IsValidLayer(System.String)">
            <summary>
            Returns true if the collection contains the <paramref name="layerName"/> otherwise
            returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1">
            <summary>
            Represents a collection of converted objects of type <see cref="!:T"/> from a layer in a CAD file.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.LayerName">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.ExtractedItems">
            <summary>
            The extracted geometry from the CAD file on the layer specified by the <see cref="P:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.LayerName"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.GraphicsStyle">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.GraphicsStyle"/> to apply to the extracted geometry on the layer.
            </summary>
            <remarks>
            TODO: This property is not needed for point or proto curve conversion, however the code base requires
            todo: the flexibility to be used with Dynamo and as a standalone Revit addin which doesn't need Dynamo dependency.
            </remarks>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1.#ctor(System.String,Autodesk.Revit.DB.GraphicsStyle)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LayerExtraction`1"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadProcessorMain.Run``1(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.ICadExtractor{``0})">
            <summary> 
            Mainline function for converting geometry from a <see cref="T:ImportInstance"/>.
            </summary> 
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerNameProcessor.GetList(BimorphNodes.Nodes.Infrastructure.ImportInstanceData,System.Collections.Generic.List{System.String})">
            <summary>
            Compute the layers input by the user. If no layers are input, then a list is creaed
            comprising all of the layers in the CAD link or import (as this list is always used to
            determine which curves to add to the output curve sublists, or discard).
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LineStyleMapper">
            <summary>
            A class used to map a line style name which a user can input with a line <see cref="T:Autodesk.Revit.DB.GraphicsStyle"/>
            in the active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LineStyleMapper.CategoryNameMap">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.LineStyleMapper.CategoryNameMap"/> in the active document.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineStyleMapper.#ctor(BimorphNodes.Services.NodeServices)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LineStyleMapper"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineStyleMapper.TryGetByName(System.String,Autodesk.Revit.DB.GraphicsStyleType)">
            <summary>
            Returns a line <see cref="T:Autodesk.Revit.DB.GraphicsStyle"/> by name. If the name can't be found in the active document
            the <see cref="P:BimorphNodes.Services.NodeServices.DefaultLineStyle"/> is returned instead.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.OriginPoint">
            <summary> 
            The placement point of this CADTextData object.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.Rotation">
            <summary> 
            The rotation of this CADTextData object in degrees.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.LayerName">
            <summary> 
            The layer name this CADTextData object is from.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.TextValue">
            <summary> 
            The text value of this CADTextData object.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.FontTypeName">
            <summary> 
            The font type this CADTextData, e.g. Arial.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.Height">
            <summary> 
            The height of this CADTextData object in the active Document's display units.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.WidthFactor">
            <summary>
            The width factor of the text style.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.IsBold">
            <summary>
            True if the text style is bold.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.IsItalic">
            <summary>
            True if the text style is italic.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.FontFile">
            <summary> The font file used with this text data.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.Color">
            <summary>
            Returns the color of this CADTextData.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.HorizontalAlign">
            <summary>
            The horizontal alignment of this CADTextData.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.VerticalAlign">
            <summary>
            The vertical alignment of this CADTextData.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.#ctor(BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.TextEntityWrapper,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.Double,System.Double)">
            <summary>
            CADTextData constructor using a <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/> object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.SetProtoOrigin(BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.TextEntityWrapper,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.Double)">
            <summary>
            Sets the LocationPoint at the text origin.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.ComputeTextLocation(BimorphNodes.Nodes.Infrastructure.DXFExtractor,netDxf.Vector3,System.Double)">
            <summary>
            Computes and returns the text location based on whether the Revit file has shared coordinates.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.SetTextAttributes(BimorphNodes.Nodes.Infrastructure.TextEntityWrapper,System.Double)">
            <summary>
            Sets the TextValue, FontTypeName, LayerName, and Height of this CADTextData object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextDataBase.TrySetBoldItalic(netDxf.Tables.TextStyle)">
            <summary>
            Method used to parse <see cref="T:netDxf.XData"/> extracted from a <see cref="T:netDxf.Tables.TextStyle"/> and 
            sets the <see cref="F:BimorphNodes.Nodes.Infrastructure.CadTextDataBase._isBold"/> and <see cref="F:BimorphNodes.Nodes.Infrastructure.CadTextDataBase._isItalic"/> properties.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DXFExportUtils">
            <summary>
            Utility class with methods for exporting and loading DXF files from Revit.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.IsolateCategoryVisibility(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,Autodesk.Revit.DB.Categories,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Method used to hide all categories in the given exportView and keep the given <see cref="T:ImportInstance"/> 
            <see cref="T:Autodesk.Revit.DB.Category"/> visible for the purposes of DXF export (ensures only the selected
            import instance is visible in the exportView for export, otherwise any instances from the same category will
            be exported leading to unexpected text conversion). Note that this method is also important to prevent 
            runtime exceptions occurring in older versions of Revit which use <see cref="!:ViewVisibilityControl2016"/>
            method from BimorphNodes2016 bqckwards compability library.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.GetViewPlanFamilyTypeId(Autodesk.Revit.DB.Document)">
            <summary>
            Returns the Plan View <see cref="T:Autodesk.Revit.DB.ViewFamilyType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.TransformImportInstanceToPlanView(BimorphNodes.Nodes.Infrastructure.DXFExtractor,Autodesk.Revit.DB.ImportInstance,Autodesk.Revit.DB.View)">
            <summary>
            Method used to either return the <see cref="T:Autodesk.Revit.DB.ElementId"/> of the <see cref="T:ImportInstance"/>
            unmodified, or if it has an owner view and that owner view is not a plan view type, then the import is 
            tansformed to the exportPlanView prior to export. This is an integral concept for successful parsing of the DXF
            Text and MText entities since the transform data is lost if the <see cref="T:ImportInstance"/> is exported from a
            non-plan view (such as an elevation). If the view is a deafult view (i.e. no owner view) or if the owner view is
            a plan type then the <see cref="T:ImportInstance"/> does not need to be transformed.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.GetExportView(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Gets the export View from the import instance. This will be the owner view if the import instance has an
            owner view. However, if the the owner view is a non-plan view type (elevation for example) then a new 
            temporary plan view is created. This is important otherwise the transform data of the text inserts is lost
            once exported to DXF. All other views use a temporary orthogonal 3D view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.ExportDXF(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DXFExtractor,Autodesk.Revit.DB.ImportInstance,System.String)">
            <summary>
            Export function for DXF.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExportUtils.LoadDXFDoc(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DXFExtractor,Autodesk.Revit.DB.ImportInstance,System.String,System.String)">
            <summary>
            Method used to export the <see cref="T:ImportInstance"/> to DXF and load it ready for parsing of text entities.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DXFExtractor">
            <summary>
            Class used to export a CAD link or import to DXF and extract all <see cref="T:netDxf.Entities.Text"/> and <see cref="T:netDxf.Entities.MText"/> objects
            and store them as <see cref="T:TextData"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.TextDataElements">
            <summary>
            Dictionary which stores the <see cref="T:TextData"/> objects (text) extracted from a CAD link or import. The key is the layer name
            from where the text derived.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.TotalTransform">
            <summary>
            The transform extracted from the <see cref="T:ImportInstance"/> which positions text entity orgins in Revit.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.TransformToVerticalView">
            <summary>
            A <see cref="T:Autodesk.Revit.DB.Transform"/> between a vertical <see cref="T:ImportInstance"/> owner view and the default plan view
            at the 0.0 XY plane. If there is no owner view, or if the owner view is not vertical, this property is null. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.DXFDocument">
            <summary>
            The loaded DXF document exported from an <see cref="T:ImportInstance"/> in the active Revit document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerView">
            <summary>
            The owner view if the <see cref="T:ImportInstance"/> has a valid owner view. If it has no owner view, this
            property is null.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerViewIsPlanType">
            <summary>
            True if the <see cref="T:ImportInstance"/> exported to DXF has an owner view, and the owner view is a plan type.
            If there is no owner view, or if the owner view is not a plan type, this property is set to false.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerViewIsSheetOrDrafting">
            <summary>
            True if the <see cref="T:ImportInstance"/> exported to DXF has an owner view, and the owner view is a sheet type,
            or Drafting type. If there is no owner view, or if the owner view is not a plan type, this property is set to false.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerViewIsVertical">
            <summary>
            True if the <see cref="T:ImportInstance"/> exported to DXF has an owner view and that owner view is vertical, 
            i.e. an Elevation or Section. If there is no owner view, or if the owner view is not a plan type, this
            property is set to false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.#ctor(BimorphNodes.Services.NodeServices,Autodesk.Revit.DB.ImportInstance,System.Collections.Generic.List{System.String})">
            <summary>
            DXFTextExtractor constructor.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.AddTextData(BimorphNodes.Nodes.Infrastructure.TextEntityWrapper,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.Collections.Generic.List{System.String},System.Double,System.Double)">
            <summary>
            Method used to add a <see cref="T:TextData"/> object to the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.TextDataElements"/> list from a <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/> entity. The method
            also performs filtering to only allow entities to be added which match the layer list input by the user. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.SetOwnerView(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Sets the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerView"/> property for this <see cref="T:BimorphNodes.Nodes.Infrastructure.DXFExtractor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.IsOwnerViewPlanType(BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Evalautes the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerView"/> <see cref="T:Autodesk.Revit.DB.ViewType"/> and returns true
            if it is a plan type view, sheet, or null. Any owner view which is vertical, such as an elevation, returns false.
            This property is always set to true for null owner views as import instances always default to the XY plane (i.e.
            a plan view).
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.IsOwnerViewSheetOrDrafting(BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Evalautes the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerView"/> <see cref="T:Autodesk.Revit.DB.ViewType"/> and returns true
            if it is a sheet type view or 2D view type. Any owner view type, or null owner view returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFExtractor.IsVerticalView(BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Evalautes the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.OwnerView"/> <see cref="T:Autodesk.Revit.DB.ViewType"/> and returns true
            if it is a vertical view such as an elevation. Any owner view type, or null owner view returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DXFTransform">
            <summary>
            Class which stores transform data about an <see cref="T:ImportInstance"/> which has been exported to DXF from
            Revit.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.TransformToView">
            <summary>
            The transform computed from the <see cref="T:ImportInstance"/> relative to any <see cref="T:Autodesk.Revit.DB.View"/> in Revit
            which it has been linked or imported to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.ProjectEastWest">
            <summary>
            The <see cref="T:ProjectPosition"/> EastWest value in decimal feet. This value is the value shown on the 
            E/W parameter of the Project Base Point in Revit.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.ProjectNorthSouth">
            <summary>
            The <see cref="T:ProjectPosition"/> NorthSouth value in decimal feet. This value is the value shown on the 
            N/S parameter of the Project Base Point in Revit.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.ProjectElevation">
            <summary>
            The elevation of this project - the AOL of the project base point. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.RotationToTrueNorth">
            <summary>
            The rotation in radians to true north stored in the Revit Project Base Point.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.IsMirrored">
            <summary>
            True if the transform of the <see cref="T:ImportInstance"/> which was exported to DXF is mirrored.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFTransform.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DXFExtractor,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            <see cref="T:BimorphNodes.Nodes.Infrastructure.DXFTransform"/> constructor. Stores the revit <see cref="T:Autodesk.Revit.DB.Transform"/> using the transform 
            <see cref="T:netDxf.Matrix3"/> stored in the top-level <see cref="T:netDxf.Entities.Insert"/> parsed from the exported DXF.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFTransform.ComputeFromOwnerView(BimorphNodes.Nodes.Infrastructure.DXFExtractor,Autodesk.Revit.DB.Transform)">
            <summary>
            Computes and sets the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.TransformToView"/>]. If the <see cref="T:ImportInstance"/> has no owner
            view, the the global identity is returned. If a rotation to north is applied to the project base point,
            and the owner view is a plan view, it is multiplied by the transform from the view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFTransform.SetBasePointProperties(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Sets the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.RotationToTrueNorth"/>, <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.ProjectEastWest"/> and <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.ProjectNorthSouth"/>
            properties of this <see cref="T:BimorphNodes.Nodes.Infrastructure.DXFTransform"/> from the active documents <see cref="T:ProjectPosition"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData">
            <summary>
            A class which stores rotation data about the top-level (master) <see cref="T:netDxf.Entities.Insert"/>. This is only used if the
            OwnerView from where the DXF has been exported is vertical, the <see cref="T:ImportInstance"/> has been mirrored
            and the text is from the top-level insert. It is used to circumvent issues caused by the loss of rotation data 
            whenever these conditions arise.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.RevitViewType">
            <summary>
            The vertical Revit <see cref="T:Autodesk.Revit.DB.ViewType"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.FromVerticalOwnerView">
            <summary>
            True if this <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/> is from a vertical owner view in Revit. When true this
            <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/> is used to modify the rotation of text entities  from the top-level
            (master) <see cref="T:netDxf.Entities.Insert"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.BlockName">
            <summary>
            The name of the top-level (master) <see cref="T:netDxf.Blocks.Block"/> name. If this name matches the
            <see cref="T:netDxf.Blocks.Block"/> name of from the <see cref="T:netDxf.Entities.Insert"/> where a text entity has derived
            then this <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/> shall be applied.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.Rotation">
            <summary>
            The rotation of this  <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/>. If the View type is a Legend then this is 0.0
            otherwise it is a -180.0. This is due to the transformation of the <see cref="T:ImportInstance"/> from a vertical
            <see cref="T:Autodesk.Revit.DB.View"/> to the default plan <see cref="T:Autodesk.Revit.DB.View"/> creating this rotation which must be deducted from text
            entities found in the master <see cref="T:netDxf.Entities.Insert"/> (as the rotation data is lost when exported to DXF).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.ImportInstanceDeterminant">
            <summary>
            The Determinant of the <see cref="T:ImportInstance"/> TotalTransform attached to the vertical <see cref="T:Autodesk.Revit.DB.View"/>
            in Revit. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.Applies(BimorphNodes.Nodes.Infrastructure.DXFExtractor,System.String)">
            <summary>
            Returns true if this <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/> should be used to modify the rotation of a text
            entity by evaluating if the DXF export is <see cref="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.FromVerticalOwnerView"/> and the 
            <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFTransform.IsMirrored"/> and <see cref="P:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData.BlockName"/> matches the currentBlockName.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper">
            <summary>
            Wrapper class used for <see cref="T:netDxf.Entities.MText"/> or <see cref="T:netDxf.Entities.Text"/> entities extracted from a DXF. These classes have identical properties, yet
            are distinct. To prevent verbose code and overloads to handle one or the other, this wrapper serves to consolidate the classes and prevent 
            the problem it causes.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.TextStyle">
            <summary> The TextStyle of this <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.PlacementPoint">
            <summary> The placement point of this <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.Color">
            <summary> The <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/> color.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.Rotation">
            <summary> The rotation of this <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.ScaleFactor">
            <summary> The scale of this <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.Value">
            <summary> The text value displayed by the text entity.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.LayerName">
            <summary> The layer name the text entity is hosted on.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.HorizontalAlign">
            <summary> The Horizontal Alignment name.</summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.VerticalAlign">
            <summary> The Vertical Alignment name.</summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.#ctor(BimorphNodes.Nodes.Infrastructure.DXFExtractor,netDxf.Entities.MText,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.String)">
            <summary>
            Wrapper constructor which extracts matching properties from <see cref="T:netDxf.Entities.MText"/> entities.
            </summary>
            <param name="dxfExtractor"> The <see cref="T:BimorphNodes.Nodes.Infrastructure.DXFExtractor"/> used to parse the exported DXF file.</param>
            <param name="mText"> The <see cref="T:netDxf.Entities.MText"/> entity to convert.</param>
            <param name="masterInsertData"> The <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/>.</param>
            <param name="insertData">
            The parsed <see cref="T:netDxf.Entities.Insert"/> data which data required for the initialization of this 
            <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>
            </param>
            <param name="currentBlockName"> The current <see cref="T:netDxf.Entities.Insert"/> <see cref="T:netDxf.Blocks.Block"/> name.</param>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.#ctor(BimorphNodes.Nodes.Infrastructure.DXFExtractor,netDxf.Entities.Text,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.String)">
            <summary>
            Wrapper constructor which extracts matching properties from <see cref="T:netDxf.Entities.Text"/> entities.
            </summary>
            <param name="dxfExtractor"> The <see cref="T:BimorphNodes.Nodes.Infrastructure.DXFExtractor"/> used to parse the exported DXF file.</param>
            <param name="text"> The <see cref="T:netDxf.Entities.Text"/> entity to convert.</param>
            <param name="masterInsertData"> The <see cref="T:BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData"/>.</param>
            <param name="insertData">
            The parsed <see cref="T:netDxf.Entities.Insert"/> data which data required for the initialization of this 
            <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/>
            </param>
            <param name="currentBlockName"> The current <see cref="T:netDxf.Entities.Insert"/> <see cref="T:netDxf.Blocks.Block"/> name.</param>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper.ComputePlacementPoint(netDxf.Vector3,BimorphNodes.Nodes.Infrastructure.ParsedInsertData)">
            <summary>
            Computes the placement point of the textPostion based on the scale of the insert and and reflections applied to its matrix.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.CadTextException">
            <summary>
            Class for handling CAD text conversion exceptions in BimorphNodes with custom warning messages for the user. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextException.UnableToWrapTextEntity(System.String)">
            <summary>
            Thrown if the <see cref="T:netDxf.Entities.MText"/> or <see cref="T:System.Net.Mime.MediaTypeNames.Text"/> entities extracted from a DXF fail to wrap into the <see cref="T:BimorphNodes.Nodes.Infrastructure.TextEntityWrapper"/> class.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextException.ImportInstanceDXFExportFails">
            <summary>
            Exception thrown if export of an <see cref="T:ImportInstance"/> to DXF fails. Typically this exception is caused by the ImportInstance containing 
            curve elements which violate Revits <see cref="P:Autodesk.Revit.ApplicationServices.Application.ShortCurveTolerance"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextException.HasWriteAccessToFolder(System.String)">
            <summary>
            Method used to check if the user has write permissions to a folder.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.CadTextException.DXFExportLocationWriteProtected(System.String)">
            <summary>
            Exception thrown if the root directory of BimorphNodes package location where the DXF file is 
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ParsedInsertData">
            <summary>
            Class used to store data from a parsed insert. The object type is passed recursively for nested blocks and helps
            to track transform and rotation data from parent to child.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.Scale">
            <summary>
            The scale of this <see cref="T:netDxf.Entities.Insert"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.RelativePosition">
            <summary>
            The position of this <see cref="T:netDxf.Entities.Insert"/> relative to any parent <see cref="T:netDxf.Entities.Insert"/> if it is nested.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.Rotation">
            <summary>
            The rotation of this <see cref="T:netDxf.Entities.Insert"/> in degrees.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.DeterminantSign">
            <summary> 
            The determinant of the <see cref="T:netDxf.Matrix3"/> transform of this <see cref="T:netDxf.Entities.Insert"/>. Used to establish
            the rotation direction and <see cref="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.RelativePosition"/> even if the <see cref="T:netDxf.Entities.Insert"/> is mirrored.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.InvertedNormal">
            <summary>
            True if this insert has a Z-direction normal (assuming the insert is from a <see cref="T:ImportInstance"/>
            in plan view) which is opposed to the <see cref="P:Autodesk.Revit.DB.Transform.BasisZ"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.#ctor(netDxf.Entities.Insert)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ParsedInsertData"/> instance for the top-most (Master) insert in a DXF file.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParsedInsertData.#ctor(netDxf.Entities.Insert,BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,BimorphNodes.Nodes.Infrastructure.ParsedInsertData)">
            <summary>
            Primary <see cref="T:BimorphNodes.Nodes.Infrastructure.ParsedInsertData"/> constructor which processes any <see cref="T:netDxf.Entities.Insert"/>
            with a parent <see cref="T:netDxf.Entities.Insert"/>. 
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DXFParserUtils">
            <summary>
            Class used to parse text entities from a DXF file.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFParserUtils.ParseTextHorizontalAlign(BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,System.String,System.String,System.Int32)">
            <summary>
            Returns the horizontal alignment of a text entity as a string using by Dynamo.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFParserUtils.ParseTextVerticalAlign(System.String)">
            <summary>
            Returns the vertical alignment of a text entity as a string using by Dynamo.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFParserUtils.ProcessInsert(netDxf.Entities.Insert,BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.Collections.Generic.List{System.String},System.Double,System.Double)">
            <summary>
            Method used to extract <see cref="T:netDxf.Entities.Text"/> or <see cref="T:netDxf.Entities.MText"/> entities from a <see cref="T:netDxf.Blocks.Block"/>. If a
            nested  <see cref="T:netDxf.Blocks.Block"/> is found, this method runs recursively until all text entities are processed.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DXFParserUtils.SetTextFromInserts(BimorphNodes.Services.NodeServices,BimorphNodes.Nodes.Infrastructure.DXFExtractor,System.Collections.Generic.List{System.String},Autodesk.Revit.DB.ImportInstance)">
            <summary>
             Adds the <see cref="T:netDxf.Entities.MText"/> and <see cref="T:netDxf.Entities.Text"/> entities to the <see cref="P:BimorphNodes.Nodes.Infrastructure.DXFExtractor.TextDataElements"/>
             if found in any blocks in the DXF file.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.DocumentToReport">
            <summary>
            The document object to report any linked or imported
            <see cref="T:ImportInstance"/> from.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.IsActiveDocument">
            <summary>
            True if the <see cref="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.DocumentToReport"/> is the active document.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.Path">
            <summary>
            The qualified path to the <see cref="T:ImportInstance"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:BimorphNodes.Nodes.Infrastructure.DocumentAttributes"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.GetDocumentToReport(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.DocumentToReport"/>; this will be the active document if the
            <paramref name="filePath"/> is null or empty, otherwise the document is opened
            from disk.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.CloseExternalDocument">
            <summary>
            Event handler which closes any external <see cref="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.DocumentToReport"/>
            open on disk and unsubscribes from the active Dynamo workspace close events.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.Close">
            <summary>
            Closes the document if it is opened from an external file otherwise does nothing.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor">
            <summary>
            Class used to parse and store <see cref="T:BimorphNodes.Core.IImportInstanceReport"/> data about
            linked or import CAD instances in any Revit file.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor.DocumentAttributes">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor.DocumentAttributes"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor.#ctor(System.String)">
            <summary> 
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor"/> instance.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceReportProcessor.Process">
            <summary>
            Function used to collect all <see cref="!:ImportInstance"/>'s in the
            <see cref="P:BimorphNodes.Nodes.Infrastructure.DocumentAttributes.DocumentToReport"/>. Any instances found in
            the document are returned in a list of <see cref="T:BimorphNodes.Core.IImportInstanceReport"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.AppSettings">
            <summary>
            The application settings class.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.AppSettings.ValidViewTypes">
            <summary>
            A list of valid view types which can be used for extracting text.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.AppSettings.Tolerance">
            <summary>
            The tolerance used internally by the application to control floating point accuracy.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.AppSettings.VolumeZeroTolerance">
            <summary>
            The smallest volume considered valid for a solid.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DocumentUtils.DepreciatedRevitVersion(Autodesk.Revit.DB.Document,System.Int32)">
            <summary>
            Returns true if the current version number of the Revit API is a depreciated version not supported
            by this app.
            </summary>
            <param name="doc"> The active document object.</param>
            <param name="oldVersionNumber"> An int indicating which version (and those before it) is depreciated, eg: 2016.</param>
            <returns></returns>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.FileUtils.DeleteFile(System.String,System.String,System.String)">
            <summary>
            Deletes the file at the given address.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.InsertUtils.InsertHasInvertedNormal(netDxf.Entities.Insert)">
            <summary>
            Returns true if the insert has a normal opposed to the Unit Z axis.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.InsertUtils.ComputeInsertRotation(BimorphNodes.Nodes.Infrastructure.DXFExtractor,BimorphNodes.Nodes.Infrastructure.VerticalMasterInsertRotationData,BimorphNodes.Nodes.Infrastructure.ParsedInsertData,System.Double,System.String)">
            <summary>
            Computes and returns the summed rotation of an insert and any nested inserts with rotations.
            This method prevents rotations from exceeding 360.0 degrees as they are accumulated.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.InsertUtils.GetInsertMatrixDeterminantSign(netDxf.Entities.Insert,System.Boolean)">
            <summary>
            Computes the determinant from a <see cref="T:netDxf.Matrix3"/> of an <see cref="T:netDxf.Entities.Insert"/> and returns its sign.
            Function returns either -1 or 1 not 0.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.InsertUtils.GetInsertsFromDXFDocument(BimorphNodes.Nodes.Infrastructure.DXFExtractor)">
            <summary>
            Returns a list of inserts from a DXF document which are parsed for <see cref="T:netDxf.Entities.MText"/> and <see cref="T:netDxf.Entities.Text"/>
            entities. If the owner exportView is a Revit <see cref="T:Autodesk.Revit.DB.ViewSheet"/>, then the Layout of the DXF is used to obtain 
            the inserts rather than the model space (default).
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TransformUtils.GetMirrorPlane(Autodesk.Revit.DB.Transform)">
            <summary>
            Method used to create a plane with the BasisX as its normal. Used to mirror text origin points extracted from a DXF.
            This method is important to prevent runtime exceptions from occurring with older versions of Revit by encapsulating the 
            <see cref="M:Autodesk.Revit.DB.Plane.CreateByNormalAndOrigin(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)"/> method.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkStatus">
            <summary>Enum displaying the loaded status of a linked file</summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.Invalid">
            <summary>
            This value is the uninitialized value for the enum. It indicates that the link has not
            been properly initialized.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.Loaded">
            <summary>
            The link is loaded.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.Unloaded">
            <summary>
            The link is unloaded.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.Imported">
            <summary>
            The element represented by this value was imported into Revit rather than linked into Revit.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.NotFound">
            <summary>
            The linked file was not able to be found the last time Revit tried to load it.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.CanBeUpgraded">
            <summary>
            The linked point cloud file is obsolete and can be indexed into new format.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.InClosedWorkset">
            <summary>
            The linked file is in a closed workset and will not be displayed.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LocallyUnloaded">
            <summary>
            The linked file is unloaded for the specific user. (If the linked file is both
            unloaded for the specific user and unloaded for all users, the link will report
            LinkedFileStatus.Unloaded.)
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.Uninitialized">
            <summary>
            Revit has not tried to load the link, possibly because it is a nested
            link and its parent failed to load.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkLoaded">
            <summary>
            The linked model loaded correctly.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkNotFound">
            <summary>
            The linked model could not be found.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkNotOpenable">
            <summary>
            An error occurred trying to read the linked model. It could happen if
            a wrong link type is trying to be loaded.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkOpenAsHost">
            <summary>
            The linked model is already opened directly in Revit.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.SameModelAsHost">
            <summary>
            The linked model has the same path as the currently active document.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.SameCentralModelAsHost">
            <summary>
            Either the linked model and its host document are both locals of the same
            central model, or one is a local and the other is its central.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkNotLoadedOtherError">
            <summary>
            An unknown error occurred.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkMayBeUpgraded">
            <summary>
            Point cloud link loaded correctly but is obsolete and may be upgraded..
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.ExternalServerMissing">
            <summary>
            The external add-in required to load this link model could not be found.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.LinkExists">
            <summary>
            Revit already has a link with the input location, so no new link
            can be created.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.CouldNotChangeViewReference">
            <summary>
            The link previously had an invalid view reference and either no new view was provided
            or the input view was not usable for linking CAD files.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.LinkStatus.UsedExisting">
            <summary>
            Revit already has a link with the input location, so the same link is been reused.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ColorExtensions.ToDynamoColor(Autodesk.Revit.DB.Color)">
            <summary>
            Converts the Revit <see cref="T:Autodesk.Revit.DB.Color"/> into a Dynamo <see cref="T:DSCore.Color"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ColorExtensions.ToDynamoColor(DSCore.Color)">
            <summary>
            Converts the Dynamo <see cref="T:DSCore.Color"/> into a Revit <see cref="T:Autodesk.Revit.DB.Color"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DynamoElementExtensions">
            <summary>
            An extensions class for Dynamo's Revit LinkElement class.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DynamoElementExtensions.AnonymousLinkElement(Revit.Elements.Element)">
            <summary>
            Returns true if the element is from a linked document but not from BimorphNode LinkElement class.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkFileStatusExtensions">
            <summary>
            An extensions class for the <see cref="T:LinkedFileStatus"/> enum.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkFileStatusExtensions.ToLinkStatus(Autodesk.Revit.DB.LinkedFileStatus)">
            <summary>
            Converts the <paramref name="linkedFileStatus"/> into a matching
            <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkStatus"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkLoadResultTypeExtensions">
            <summary>
            An extensions class for the <see cref="T:LinkLoadResultType"/> enum.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkLoadResultTypeExtensions.ToLinkStatus(Autodesk.Revit.DB.LinkLoadResultType)">
            <summary>
            Converts the <paramref name="linkedFileStatus"/> into a matching
            <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkStatus"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementExtensions">
            <summary>
            <see cref="T:Element"/> extensions class.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.SupportsIntersections(Autodesk.Revit.DB.Element)">
            <summary>
            Returns true if the element is supported by the <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/> otherwise
            returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.GetBoundingBox(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Document)">
            <summary>
            Helper function which obtains the bounding box from an element. For convenience, no view is
            passed into the <see cref="M:Autodesk.Revit.DB.Element.getBoundingBox(Autodesk.Revit.DB.View)"/> as this works
            for all model elements with the exception of a few, such as <see cref="T:Autodesk.Revit.DB.Area"/> or any
            view-based elements such as annotations. Where this initial attempt fails, the bounding box
            is then obtained via a view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.ExtractSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Options)">
            <summary>
            Extracts all the solid entities from a Revit Element.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.ExtractSolidsFromSymbols(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Options)">
            <summary>
            Extracts all the solid entities from a Family Instance (Revit Element) Symbol instead of its instance geometry.
            This method resolves is used for creating face references where, if using the instance geometry, the face doesn't
            host families at the correct location. A normal element can also be passed to this method without any issue - it 
            can handle all element types. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.ExtractProtoSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Transform)">
            <summary>
            Extracts all the Revit solids from a link element, tranforms the geometry to the host location and converts it to a ProtoSolid.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementExtensions.ExtractProtoSurfaces(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.RevitLinkInstance,Autodesk.Revit.DB.Transform)">
            <summary>
            Extracts all the Revit faces from the LinkElement's solids (which is transformed
            to the host location), and converts the solids to ProtoSolid's.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceExtensions">
            <summary>
            Extension class for the <see cref="T:Autodesk.Revit.DB.ImportInstance"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceExtensions.TryGetExternalFileReference(Autodesk.Revit.DB.ImportInstance,Autodesk.Revit.DB.Document)">
            <summary>
            Returns the <see cref="T:Autodesk.Revit.DB.ExternalFileReference"/> of <paramref name="importInstance"/> or null
            if it is not an external file, in which case it is imported not linked. Handles the exception
            thrown if the <see cref="T:Autodesk.Revit.DB.ImportInstance"/> does not have an external file
            reference. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceExtensions.ViewSpecificAndValidViewType(Autodesk.Revit.DB.ImportInstance,Autodesk.Revit.DB.View)">
            <summary> 
            Checks if the given linkinstance owner view is view specific and its ViewType is valid for
            view-specific model curve creation which results in the curve being translated to the sketch
            plane of the view
            </summary> 
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceExtensions.SupportPlaneFromCADImport(Autodesk.Revit.DB.ImportInstance,BimorphNodes.Services.NodeServices)">
            <summary> 
            Creates a new support plane from a CAD link or import 
            </summary> 
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetExtensions">
            <summary>
            Extensions for the <see cref="T:Autodesk.Revit.DB.ViewSheet"/> class.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetExtensions.GetSheetNumbers(System.Collections.Generic.List{Autodesk.Revit.DB.ViewSheet})">
            <summary>
            Gets the list of sheet numbers from a input list of ViewSheets.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetExtensions.RenumberRenameSheets(System.Collections.Generic.List{Autodesk.Revit.DB.ViewSheet},System.Collections.Generic.List{System.String},Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
            Sets the parameter of the input ViewSheet using the input values list.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetExtensions.DuplicateAnnotations(Autodesk.Revit.DB.ViewSheet,Autodesk.Revit.DB.ViewSheet)">
            <summary>
            Function used to duplicate any sheet annotations, including dimensions, imported images, detail groups,
            curves, text notes, etc.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetExtensions.Duplicate(Autodesk.Revit.DB.ViewSheet,System.String)">
            <summary>
            Method used to create a new sheet ('duplicate') from an existing sheet in the document. Sets
            the new sheets name and number property and adds the new sheet to the <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetCache"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewExtensions">
            <summary>
            An extensions class for the <see cref="T:Autodesk.Revit.DB.View"/> class.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewExtensions.ForceViewRefresh(Autodesk.Revit.DB.View,System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})">
            <summary>
            A workaround which forces the view to update to re-render graphics, such as changing
            the appearance of a layer in an <see cref="T:ImportInstance"/> which Revit doesn't
            refresh automatically.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewExtensions.ViewHierarchy(Autodesk.Revit.DB.View)">
            <summary>
            Gets the <see cref="T:BimorphNodes.Core.ViewHierarchy"/> status as a string. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewExtensions.IsAssemblyView(Autodesk.Revit.DB.View)">
            <summary>
            Returns true if the view is from an assembly (if ID > -1). This is important to establish as NO views from
            an assembly can be duplicated as a dependent.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewExtensions.CanDuplicateAsDependent(Autodesk.Revit.DB.View)">
            <summary>
            Returns true if the view can be duplicated as a dependent. <seealso cref="!:ViewDuplicateOption.AsDependent"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes">
            <summary>
            A class which stores details about the file path and link status of an
            <see cref="T:ImportInstance"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.FilePath">
            <summary>
            The file path of the <see cref="T:ImportInstance"/> or an empty string if it is imported.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.LinkStatus">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.LinkStatus"/> of the <see cref="T:ImportInstance"/>. For linked instances this will
            represent the Revit API LinkedFileStatus enum, otherwise it will return 'Imported' if
            <see cref="!:IsLinked"/> is false or show the <see cref="T:LinkLoadResultType"/> if the link is from
            BIM 360.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.#ctor(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.GetLinkStatus(Autodesk.Revit.DB.ImportInstance,Autodesk.Revit.DB.CADLinkType)">
            <summary>
            Returns the <see cref="P:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.LinkStatus"/> of the <see cref="T:Autodesk.Revit.DB.CADLinkType"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ExternalFileAttributes.GetFilePath(Autodesk.Revit.DB.CADLinkType)">
            <summary>
            Returns the file path of the file is linked otherwise returns an empty string.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxInsideFactory">
            <summary>
            An element filter factory which creates a <see cref="T:BoundingBoxIsInsideFilter"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxInsideFactory.Tolerance">
            <summary>
            Allows control over the match criteria of the bounding box by using a tolerance in the geometry
            comparison in decimal feet.  It is suggested to use this in cases where trivial differences should
            be considered when matching elements. If the tolerance is positive, the outlines may be separated
            by the tolerance distance in each coordinate.  If the tolerance is negative, the outlines must
            overlap by at least the tolerance distance in each coordinate.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxInsideFactory.#ctor(System.Double)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxInsideFactory"/>. The <paramref name="toleranceInFt"/> must be
            input in decimal feet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxInsideFactory.CreateFilter(Autodesk.Revit.DB.Outline)">
            <summary>
            Creates a new <see cref="T:BoundingBoxIsInsideFilter"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxIntersectsFactory">
            <summary>
            An element filter factory which creates a <see cref="T:BoundingBoxIntersectsFilter"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxIntersectsFactory.Tolerance">
            <summary>
            Allows control over the match criteria of the bounding box by using a tolerance in the geometry
            comparison in decimal feet.  It is suggested to use this in cases where trivial differences should
            be considered when matching elements. If the tolerance is positive, the outlines may be separated
            by the tolerance distance in each coordinate.  If the tolerance is negative, the outlines must
            overlap by at least the tolerance distance in each coordinate.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxIntersectsFactory.#ctor(System.Double)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxIntersectsFactory"/>. The <paramref name="toleranceInFt"/> must be
            input in decimal feet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxIntersectsFactory.CreateFilter(Autodesk.Revit.DB.Outline)">
            <summary>
            Creates a new <see cref="T:BoundingBoxIntersectsFilter"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1">
            <summary>
            A n entity storing a set of <see cref="T:ElementQuickFilter"/>'s. The filters are stored in this
            way to support linked elements which require specific filters relating to the location of their
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>. Each filter is stored in a dictionary with the key referring to
            the unique name of the <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>. If the element is not a linked element or
            if it is but its <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> has not been transformed then the
            <see cref="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.DefaultFilter"/> is used for evaluation. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.DefaultFilter">
            <summary>
            The default <see cref="T:ElementQuickFilter"/> which an element passed into the
            <see cref="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.PassesFilter(System.Collections.Generic.List{Revit.Elements.Element})"/> will be evaluated with. If the element being tested is a
            <see cref="T:Revit.LinkElement"/> then a filter relating to the location of its
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> is used instead.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.Outline">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.Outline"/> to used with the <see cref="P:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.DefaultFilter"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.#ctor(BimorphNodes.Core.IBoundingBoxFilterFactory{`0},Autodesk.Revit.DB.Outline)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.AddFilterToSet(Revit.LinkElement)">
            <summary>
            Adds a filter to the library using the <paramref name="linkElement"/> originating link
            instance name as the key. This improves performance for any elements from the same link
            as it avoids the need to new-up another filter object. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1.PassesFilter(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            A ElementQuickFilter using an elements bounding box to select any elements that intersects its
            bounds from a set of given Dynamo elements. Returns wrapped Revit ElementIds that pass the filter.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult">
            <summary>
            An object which stores details about an element which passes a <see cref="T:BimorphNodes.Nodes.Infrastructure.BoundingBoxFilterSet`1"/> procedure.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.Element">
            <summary>
            The element from a quick filter result.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.ElementId">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.ElementId"/> of the <see cref="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.Element"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.LinkInstanceAttributes">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.LinkInstanceAttributes"/> of the <see cref="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.Element"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.IsLinkElement">
            <summary>
            Returns true if the <see cref="P:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.Element"/> if from a linked document otherwise
            returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SurroundingElementResult.#ctor(Revit.Elements.Element,BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes)">
            <summary>
            FilterResult constructor.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementIntersector">
            <summary>
            An <see cref="T:BimorphNodes.Core.IElementIntersector"/> which evaluates an <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/> in the active
            document to another element or linked element.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/> which this intersector shall intersect another element against.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.DefaultIntersectionFilter">
            <summary>
            The default list of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s which an element passed into this
            filter set shall be evaluated against. The filter derives from the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/> and
            is stored as a list as the element can be a <see cref="T:Revit.LinkElement"/>. If so, and its
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> is transformed then its solids are extracted and used
            to create <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/>'s (hence why a list is needed) as transformed
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> (where you see it in Revit) is not honored in the Revit API
            context so the developer has to transform the solids to align with live elements or other linked
            elements (from different <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>'s) in the document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Solids">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.Solid"/>'s which this intersector shall intersect another element against.
            The solids are stored as a list as the conversion of the Dynamo solid passed into the 
            constructor can result in more than one entity.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Outline">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Outline"/> of the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/> stored in this <see cref="T:BimorphNodes.Core.IElementIntersector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersector.#ctor(Autodesk.Revit.DB.Element,BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersector.AddFilterToSet(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Adds new <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/> to the <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet"/> using the
            <paramref name="elementToCompare"/> <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> name as the key. The solids are
            extracted and transformed from the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/> so they are guaranteed to align with the location
            of the <paramref name="elementToCompare"/> as transformed linked elements are aligned in the
            origin-to-origin location in the Revit API context not where you see it in Revit. Storing the filters
            improves performance if elements from the same link are evaluated as it avoids the need to new-up more
            of the same filter objects. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersector.SameElement(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Returns true if the element of the intersector is the same as the
            <see cref="P:BimorphNodes.Core.ISurroundingElementResult.Element"/> otherwise returns false.-
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Intersects(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Returns true if the <paramref name="elementToCompare"/> intersects with the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementIntersector.Element"/>
            otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector">
            <summary>
            An <see cref="T:BimorphNodes.Core.IElementIntersector"/> which evaluates the intersection between a
            <see cref="T:Revit.LinkElement"/> and another element. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Element">
            <summary>
            The <see cref="T:Revit.LinkElement"/> which this intersector shall intersect another element against.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.DefaultIntersectionFilters">
            <summary>
            The default list of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s which an element passed into this
            filter set shall be evaluated against. The filter derives from the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Element"/> and
            is stored as a list as the element can be a <see cref="T:Revit.LinkElement"/>. If so, and its
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> is transformed then its solids are extracted and used
            to create <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/>'s (hence why a list is needed) as transformed
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> (where you see it in Revit) is not honored in the Revit API
            context so the developer has to transform the solids to align with live elements or other linked
            elements (from different <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>'s) in the document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Solids">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.Solid"/>'s which this intersector shall intersect another element against.
            The solids are stored as a list as the conversion of the Dynamo solid passed into the 
            constructor can result in more than one entity.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Outline">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Outline"/> of the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Element"/> stored in this <see cref="T:BimorphNodes.Core.IElementIntersector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.#ctor(Revit.LinkElement,BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.GetDefaultFilters(Revit.LinkElement)">
            <summary>
            Creates the default <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/> for this <see cref="T:BimorphNodes.Core.IElementIntersector"/>.
            If the <paramref name="linkElement"/> is not transformed then a single
            <see cref="T:Autodesk.Revit.DB.ElementIntersectsElementFilter"/> is returned. If however it has derived from a transformed
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> then its solids are extracted and transformed to its host location
            to ensure any intersections with live elements in the document can be successfully evaluated. This is
            due to the way Revit handled linked elements; in the API context a linked element is positioned in its
            origin-to-origin location rather than where the users sees the element in Revit. Hence, the
            <see cref="T:Autodesk.Revit.DB.ElementIntersectsElementFilter"/> would fail or give unexpected results as a consequence.
            Using the <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/> with the linked elements solids therefore
            circumvents the problem. Lastly, a list is needed as there can be multiple solids in a Revit element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.AddFilterToSet(BimorphNodes.Core.ISurroundingElementResult,System.Boolean)">
            <summary>
            Adds new <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/> to the <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet"/> using the
            <paramref name="elementToCompare"/> <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> name as the key. The solids are
            extracted and transformed from the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Element"/> so they are guaranteed to align with the location
            of the <paramref name="elementToCompare"/> as transformed linked elements are aligned in the
            origin-to-origin location in the Revit API context not where you see it in Revit. Storing the filters
            improves performance if elements from the same link are evaluated as it avoids the need to new-up more
            of the same filter objects. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.SameElement(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Returns true if the element of the intersector is the same as the
            <see cref="P:BimorphNodes.Core.ISurroundingElementResult.Element"/> otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Intersects(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Returns true if the <paramref name="elementToCompare"/> intersects with the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementIntersector.Element"/>
            otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SolidIntersector">
            <summary>
            An <see cref="T:BimorphNodes.Core.IElementIntersector"/> which evaluates the intersection between a Dynamo
            <see cref="T:Autodesk.Revit.DB.Solid"/> and a <see cref="T:Element"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Solids">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.Solid"/>'s which this intersector shall intersect another element against.
            The solids are stored as a list as the conversion of the Dynamo solid passed into the 
            constructor can result in more than 1.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.DefaultIntersectionFilters">
            <summary>
            The default list of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s which an element passed into this
            filter set shall be evaluated against. The filter derives from the <see cref="T:Element"/> and
            is stored as a list as the element can be a <see cref="T:Revit.LinkElement"/>. If so, and its
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> is transformed then its solids are extracted and used
            to create <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/>'s (hence why a list is needed) as transformed
            <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> (where you see it in Revit) is not honored in the Revit API
            context so the developer has to transform the solids to align with live elements or other linked
            elements (from different <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>'s) in the document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Outline">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Outline"/> of the <see cref="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Solids"/> stored in this <see cref="T:BimorphNodes.Core.IElementIntersector"/>.
            If the conversion of the dynamoSolid passed into the constructor fails to convert to Revit solids
            the outline will have a zero diagonal length.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SolidIntersector.#ctor(Autodesk.DesignScript.Geometry.Solid,BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SolidIntersector.CreateDefaultFilters(System.Collections.Generic.IList{Autodesk.Revit.DB.Solid})">
            <summary>
            Returns a list of default <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s from the
            <paramref name="solids"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SolidIntersector.GetSolidOutline(Autodesk.DesignScript.Geometry.Solid,System.Boolean)">
            <summary>
            Returns the outline of the <paramref name="solid"/>. If <paramref name="failedConversion"/>
            is true returns a zero length outline.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SolidIntersector.AddFilterToSet(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Adds new <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/> to the <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet"/> using the
            <paramref name="elementToCompare"/> <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> name as the key. The solids are
            extracted and transformed from the <see cref="T:Element"/> so they are guaranteed to align with the location
            of the <paramref name="elementToCompare"/> as transformed linked elements are aligned in the
            origin-to-origin location in the Revit API context not where you see it in Revit. Storing the filters
            improves performance if elements from the same link are evaluated as it avoids the need to new-up more
            of the same filter objects. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Intersects(BimorphNodes.Core.ISurroundingElementResult)">
            <summary>
            Returns true if the <paramref name="elementToCompare"/> intersects with the <see cref="P:BimorphNodes.Nodes.Infrastructure.SolidIntersector.Solids"/>
            otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet">
            <summary>
            An entity which stores a set of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s which can be used with
            linked elements. The concept behind this class is to store the filters so they can be re-used
            with any linked elements from the same <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet._slowFilters">
            <summary>
            A dictionary storing a <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.Name"/> as the key, and a list of
            <see cref="T:Autodesk.Revit.DB.ElementIntersectsSolidFilter"/> which derive from the list of solids extracted from
            a <see cref="!:LinkElement"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet.Item(System.String)">
            <summary>
            Accessor which returns the list of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/> from the given
            key or an empty list if it doesn't exist.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet.#ctor">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet.Add(BimorphNodes.Core.ILinkInstanceAttributes,System.Collections.Generic.List{Autodesk.Revit.DB.ElementIntersectsFilter})">
            <summary>
            Adds a new list of <see cref="T:Autodesk.Revit.DB.ElementIntersectsFilter"/>'s to this
            <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectsFilterSet.Contains(System.String)">
            <summary>
            Returns true if the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.Name"/> exists in this set otherwise
            returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectionProcessor">
            <summary>
            A processor class which performs the intersection between two sets of Revit <see cref="T:Element"/>'s
            and returns the results as a list of <see cref="T:BimorphNodes.Core.IIntersectingElementResult"/>'s.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectionProcessor.#ctor">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementIntersectionProcessor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectionProcessor.GetIntersector(Revit.Elements.Element)">
            <summary>
            Returns the <see cref="T:BimorphNodes.Core.IElementIntersector"/> based on the type of the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementIntersectionProcessor.Process(System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Processes the element intersection by computing the intersection between each element in
            <paramref name="elementSetA"/> to <paramref name="elementSetB"/> and returns the result
            of each intersection as a list of <see cref="T:BimorphNodes.Core.IIntersectingElementResult"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor">
            <summary>
            A processor class which computes the intersection between a Dynamo Solid and Revit
            <see cref="T:Element"/>'s.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor.#ctor">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor.ComputeExtension(Autodesk.Revit.DB.Outline)">
            <summary>
            Computes the diametric dimension of outline of 10% (its diagonal length) and returns it in Revit's
            internal units. This value can be used to compensate for inaccuracies caused by the ComputeCentroid()
            method, needed to translate the bounding box from affine space to coordinate space.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor.GetSurroundingElements(BimorphNodes.Nodes.Infrastructure.SolidIntersector,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Returns the surrounding elements relative to the <paramref name="solidIntersector"/> with a 10%.
            tolerance added around the the bounding box of the solid to avoid missing elements due to
            inaccuracies of computing the bounding box for more complex solids.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IntersectSolidProcessor.Process(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Solid},System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Performs the intersection between each solid against the <paramref name="elements"/> and 
            returns the list of <see cref="T:BimorphNodes.Core.IIntersectingSolidResult"/>'s.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache">
            <summary>
            A cache storing the <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult"/>'s.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache.#ctor(Autodesk.Revit.DB.XYZ)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache.Register(Autodesk.Revit.DB.RevitLinkInstance,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.XYZ)">
            <summary>
            Registers the <paramref name="linkedElement"/> as a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult"/> with
            this <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache.IsRegisteredResult(Autodesk.Revit.DB.Element,System.String)">
            <summary>
            Returns true if the element is present in any of the <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult"/>
            registered with this <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache"/> otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache.GetResults(System.Boolean)">
            <summary>
            Returns all the results in this <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResultCache"/> or returns the nearest
            result to the ray origin if <paramref name="findNearest"/> is true.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup">
            <summary>
            Represents a group of <see cref="T:Revit.LinkElement"/> which are grouped based on their
            <see cref="T:Autodesk.Revit.DB.Document"/> and originating <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.Transform"/>
            matching. The group is used to copy the elements to the active document more efficiently.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.LinkDocument">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.Document"/> from where the <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.ElementIds"/> originate.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.Transform">
            <summary>
            The total transform of the <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> from where the
            <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.ElementIds"/> in this group derive.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.ElementIds">
            <summary>
            The <see cref="T:Revit.LinkElement"/> stored in this group which shall be copied.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.#ctor(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Transform)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.Add(Revit.LinkElement)">
            <summary>
            Adds the <paramref name="element"/> to this <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementCopyGroup.CanGroup(Revit.LinkElement)">
            <summary>
            Returns true if the <paramref name="element"/> can be added to this group, otherwise
            returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkElementInternal">
            <summary>
            The LinkElementInternal class provides a means of calculating the translations needed to
            locate the linkedElement in a host file as there is a limitation in Revit with
            link instance elements which always places them in Origin-to-Origin location,
            regardless of how the user may have transformed or translated the link instance.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.Outline">
            <summary>
            The linked elements bounding box <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.Outline"/>. The outline is in its host location
            instead of the origin-to-origin location (Revit default location). In this way, any
            transformations made to this elements <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> are accounted for.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.InternalElement">
            <summary>
            The underlying Revit <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.Element"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.LinkInstanceAttributes">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.LinkInstanceAttributes"/> of this <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementInternal"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.Element">
            <summary>
            Get the Element stored in this LinkElementInternal. Use the Element with any
            nodes that are incompatible with the LinkElementInternal.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.Document">
            <summary>
            Get the Revit API Document object from this linkElement. Remove any null's or
            empty lists from your input before using.
            </summary>
            <search> link, linkelement, linkedElement, document, bimorph, bimorphNodes </search>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.#ctor(Autodesk.Revit.DB.Element,BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementInternal"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementInternal.IsSameElement(System.Int32,System.String)">
            <summary>
            Returns true if the the <paramref name="elementId"/> and <paramref name="linkInstanceName"/>
            match this <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementInternal"/>'s <see cref="!:Id"/> and <see cref="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.Name"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes">
            <summary>
            A class which stores attributes about a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.DefaultAttributes">
            <summary>
            Returns the default <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes"/> singleton.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.LinkInstance">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.TotalTransform">
            <summary>
            Stores the totalTransform from the associated link instance to locate the true position
            of the linkedElement.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.Name">
            <summary>
            Stores the name of the link instance. Used to control the selection of the linkedElement
            quick filter.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.Id">
            <summary>
            Get the <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> Id associated with this LinkElement
            or -1 if the element does not derive from a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>, i.e. a live
            element.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.IsTransformedFromOrigin">
            <summary>
            Stores whether the link instance total transform has been moved, rotated or mirrored
            from its default centre-to-centre position. This is an important variable as there.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.#ctor(Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes"/> from a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.#ctor">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes"/> for any element which does not derive
            from a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes.#cctor">
            <summary>
            Static default constructor to ensure thread safety for the default singleton.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult">
            <summary>
            An entity which stores the hit point and <see cref="T:Element"/>
            from a <see cref="T:ReferenceIntersector"/> which derives from a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.LinkElement">
            <summary>
            The linked <see cref="T:Element"/> hit by the ray.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.HitPoint">
            <summary>
            The point which hit the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.LinkElement"/> when the ray was cast.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.LinkInstanceAttributes">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.LinkInstanceAttributes"/> of this result.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.Proximity">
            <summary>
            The distance in decimal feet from the origin of the ray to the <see cref="P:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.HitPoint"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult.#ctor(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.RevitLinkInstance,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementRaycastResult"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.RaycastCollector">
            <summary>
            An entity which wraps a <see cref="T:ReferenceIntersector"/> and performs
            the intersection. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.RaycastCollector.#ctor(Revit.Elements.Category,Autodesk.Revit.DB.View3D)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.RaycastCollector"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.RaycastCollector.GetResults(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Gets the <see cref="T:ReferenceWithContext"/> by projecting the raycast.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor">
            <summary>
            A <see cref="T:BimorphNodes.Core.IScheduleDataExtractor"/> which is used to extract data from a <see cref="T:PanelScheduleView"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.ScheduleView">
            <summary>
            The <see cref="T:TableView"/> to extract the data from.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.SectionTypes">
            <summary>
            A list of the <see cref="T:Autodesk.Revit.DB.ViewSchedule"/> <see cref="T:Autodesk.Revit.DB.SectionType"/>'s used to extract
            the cell data.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.TableData">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.TableData"/> from a <see cref="T:PanelScheduleView"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.HasHeaders">
            <summary>
            True if the <see cref="T:Autodesk.Revit.DB.ScheduleDefinition"/> from where the <see cref="P:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.TableData"/>
            derives has headers showing, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor.#ctor(Revit.Elements.Element)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.PanelScheduleDataExtractor"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor">
            <summary>
            A <see cref="T:BimorphNodes.Core.IScheduleDataExtractor"/> which is used to extract data from a <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.ScheduleView">
            <summary>
            The <see cref="T:TableView"/> to extract the data from.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.SectionTypes">
            <summary>
            A list of the <see cref="T:Autodesk.Revit.DB.ViewSchedule"/> <see cref="T:Autodesk.Revit.DB.SectionType"/>'s used to extract
            the cell data.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.TableData">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.TableData"/> from a <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.HasHeaders">
            <summary>
            True if the <see cref="T:Autodesk.Revit.DB.ScheduleDefinition"/> from where the <see cref="P:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.TableData"/>
            derives has headers showing, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor.#ctor(Revit.Elements.Element)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewScheduleDataExtractor"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule">
            <summary>
            An entity which stores data about a sheet category <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetSchedule.ScheduleWrapper">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetSchedule.ScheduleWrapper"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetSchedule.ScheduleCategory">
            <summary>
            The <see cref="T:Category"/> of the schedule.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetSchedule.SheetNumberColumnIndex">
            <summary>
            The index of the column in this <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule"/> which contains the sheet numbers.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetSchedule.HasSheetNumberColumn">
            <summary>
            Returns true if this <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule"/> has the sheet number column added otherwise
            returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetSchedule.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.ScheduleWrapper)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetSchedule.GetSheetNumberColumnIndex(Autodesk.Revit.DB.ScheduleDefinition)">
            <summary>
            Returns the index of the column in the <paramref name="scheduleDefinition"/> 
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor">
            <summary>
            Extracts sheets from a <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.SheetSchedule"/> schedule using the sheet number column.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.SheetSchedule">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.SheetSchedule"/> this extractor shall process.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.SheetSchedule)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.GetSheetNumbers(BimorphNodes.Nodes.Infrastructure.TableDataExtraction)">
            <summary>
            Returns the list of sheet numbers from the <paramref name="tableDataExtraction"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetScheduleExtractor.Process">
            <summary>
            Returns all Sheets from a Sheet Schedule by iterating over the values in the schedules
            Sheet Number field.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction">
            <summary>
            An entity which stores data extracted from a <see cref="T:TableData"/> object as a list of
            <see cref="T:BimorphNodes.Nodes.Infrastructure.TableRow"/>'s.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.TableRows">
            <summary>
            A list of <see cref="T:BimorphNodes.Nodes.Infrastructure.TableRow"/> stored in this <see cref="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.ColumnCount">
            <summary>
            Returns the count of columns in this <see cref="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction"/>. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.RowCount">
            <summary>
            Returns the count of columns in this <see cref="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction"/>. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.#ctor(BimorphNodes.Core.IScheduleDataExtractor)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction"/> object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.Add(BimorphNodes.Nodes.Infrastructure.TableRow)">
            <summary>
            Adds the <paramref name="tableRow"/> to this <see cref="T:BimorphNodes.Nodes.Infrastructure.TableDataExtraction"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.ExtractData(BimorphNodes.Core.IScheduleDataExtractor)">
            <summary>
            Extracts the data from the <see cref="T:TableData"/> and returns a list of 
            <see cref="T:BimorphNodes.Nodes.Infrastructure.TableRow"/>'s.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.GetRectangularData(System.Boolean)">
            <summary>
            Iterates through the list of <see cref="P:BimorphNodes.Nodes.Infrastructure.TableDataExtraction.TableRows"/> and returns its data as a list of strings.
            If the number of items in each row differs, this method ensures the data returned is rectangular
            and not jagged (can occur with Electric Panel Schedule's) by adding empty strings to the row data.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.TableRow">
            <summary>
            Represents a row of data stored as strings extracted from a row from a <see cref="T:TableData"/> object.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper">
            <summary>
            A class which wraps a schedule view and stores the extracted data from its <see cref="T:TableData"/>
            as a <see cref="P:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper.TableDataExtraction"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper.ScheduleView">
            <summary>
            The schedule view in this wrapper.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper.TableDataExtraction">
            <summary>
            The table data as strings. Each sub list is a row of data (with the exception of
            GetScheduleDataColumns which is transposed).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper.IsScheduleView">
            <summary>
            Returns true if the schedule view input by the user is a type of schedule view (either
            <see cref="T:Autodesk.Revit.DB.ViewSchedule"/> or <see cref="T:PanelScheduleView"/>) otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper.#ctor(Revit.Elements.Element)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetCache">
            <summary>
            A cache storing all the sheets in the active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetCache.ExistingSheetNumbers">
            <summary>
            Store a hash of all the existing sheet numbers in the document for rapid new number validation checks.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetCache.#ctor(BimorphNodes.Nodes.Infrastructure.ViewCache,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetCache"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewCache">
            <summary>
            A cache of all the views in the project.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ViewCache._cache">
            <summary>
            All the views in the active document stored in a dictionary of dictionaries where the outer dictionary
            is the view type as a string, with the inner dictionary storing all the views of that type and the view
            name is used as the key.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ViewCache._existingViewNames">
            <summary>
            A hash of all the existing view names for fast querying for validation.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCache.#ctor">
            <summary>
            Constructs a new <seealso cref="T:BimorphNodes.Nodes.Infrastructure.ViewCache"/> service.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCache.Exists(BimorphNodes.Core.IViewTypeKey,System.String,System.String,BimorphNodes.Core.ISheetCache)">
            <summary>
            Checks if the <paramref name="newViewName"/> already exists in the document and also validates the
            name against any other (new) name input by the user.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCache.GetView(BimorphNodes.Core.IViewTypeKey,System.String)">
            <summary>
            Returns the view from the cache with the given <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewTypeKey"/> and name.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCache.Add(BimorphNodes.Core.IViewTypeKey,Autodesk.Revit.DB.View)">
            <summary>
            Adds the <paramref name="view"/> to this cache.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicationOptionCollection.#ctor(BimorphNodes.Core.IViewDuplicationData)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionCollection"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicationOptionCollection.IsValidDuplicationOption(BimorphNodes.Core.IViewDuplicationData,Autodesk.Revit.DB.ViewDuplicateOption)">
            <summary>
            Returns true if the <see cref="T:ViewDuplicateOption"/> can be used to duplicate the view
            otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicationOptionCollection.Select(Autodesk.Revit.DB.ViewDuplicateOption,BimorphNodes.Core.IReportLogger)">
            <summary>
            Selects the <see cref="T:BimorphNodes.Core.IDuplicationOptionItem"/> from the <paramref name="option"/>. If the
            <see cref="P:BimorphNodes.Core.IDuplicationOptionItem.IsSelectable"/> is false, defaults to the first item in the
            collection which is.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ReportLogger">
            <summary>
            A class which stores a log of any errors encountered when duplicating sheets and views.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ReportLogger.Logs">
            <summary>
            A list of any error logs encountered when duplicating sheet and views.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ReportLogger.#ctor(BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ReportLogger"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ReportLogger.Add(System.String)">
            <summary>
            Adds the <paramref name="errorMessage"/> to this <see cref="T:BimorphNodes.Nodes.Infrastructure.ReportLogger"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ReportLogger.GetLogs">
            <summary>
            Returns all the logs in this <see cref="T:BimorphNodes.Nodes.Infrastructure.ReportLogger"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetDuplicatorMain.Run(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions,BimorphNodes.Core.IReportLogger)">
            <summary>
            Runs the sheet duplication application.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions">
            <summary>
            An entity which stores the inputs by a user to run the sheet duplication application.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.SelectedSheets">
            <summary>
            The sheets input for duplication by the user.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.Run">
            <summary>
            The options are set to run the application.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.DuplicateWithViews">
            <summary>
            True to duplicate sheets with their views otherwise only the sheet will be duplicated
            if set to false.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.DuplicateOption">
            <summary>
            The <see cref="T:ViewDuplicateOption"/> to apply if <see cref="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.DuplicateWithViews"/> is
            true.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.Suffix">
            <summary>
            The suffix to concatenate at the end of a view name to ensure it is unique.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.Prefix">
            <summary>
            The prefix to concatenate at the start of a view name to ensure it is unique.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions.#ctor(System.Collections.Generic.List{Revit.Elements.Views.Sheet},System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateProcessor.#ctor(BimorphNodes.Core.ISheetCache,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions,BimorphNodes.Core.IReportLogger)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicateProcessor"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateProcessor.DuplicateSheets(Autodesk.Revit.DB.Document)">
            <summary>
            The mainline function to duplicate sheets and placed views.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateProcessor.DuplicatePlacedViews(BimorphNodes.Core.ISheetData)">
            <summary>
            Duplicates all the views placed on a sheet.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ApplicationServices.Document">
            <summary>
            The active document object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ApplicationServices.Regenerate">
            <summary>
            Regenerates the active document.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationServices.CleanExpression">
            <summary>
            The regex clean expression used to evaluate strings for characters which cant be used in
            view names in Revit.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationServices.InvalidCharacters">
            <summary>
            The characters which Revit disallows if used to name views or sheets.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ApplicationServices.#ctor(Autodesk.Revit.DB.Document)">
            <summary>
            The processes to perform when the tool is first opened. Any service which requires a transaction
            to initialize should be included in this method.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ApplicationServices.ShutDown">
            <summary>
            Performs clean-up operations when the user closes the main window. 
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ApplicationSettings">
            <summary>
            The application settings for the sheet duplicator tool.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.InvalidDuplicateDependencyTypes">
            <summary>
            View types which cant be duplicated as dependents
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.ViewportParameters">
            <summary>
            The set of parameters for the viewport which must be set to match the original view.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.AnnotationCategoryList">
            <summary>
            The list of categories to collect for annotations. 
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.ReusableViewType">
            <summary>
            A list of <see cref="T:ViewType"/>'s which can be placed on multiple sheets without needing to be duplicated.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.InvalidCharacters">
            <summary>
            The characters which Revit disallows if used to name views or sheets.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.HelpUrl">
            <summary>
            The URL to launch when the user clicks the help button.
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.SheetFolderParameterName">
            <summary>
            The name of the folder 
            </summary>
        </member>
        <member name="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.ScopeBoxParameter">
            <summary>
            The scope box <see cref="T:Autodesk.Revit.DB.BuiltInParameter"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParameterSetter.MatchElementParameters(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.BuiltInParameter)">
            <summary>
            Sets the provided parameter of the <paramref name="elementToSet"/> from the
            <paramref name="elementToQuery"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetData">
            <summary>
            Stores data about an existing sheet in the active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.SheetCacheOwner">
            <summary>
            The <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetCache"/> where this <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetData"/> is stored.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.Sheet">
            <summary>
            The Revit <see cref="T:Autodesk.Revit.DB.ViewSheet"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.SheetDuplicated">
            <summary>
            A duplicate of the <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetData.Sheet"/> if the user has selected this sheet to be duplicated
            otherwise null.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.Id">
            <summary>
            The <see cref="T:ElementId"/> of the existing sheet.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.ViewsOnSheet">
            <summary>
            A list of the views on the sheet stored as <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.NumberNew">
            <summary>
            The new sheet number.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.NumberExisting">
            <summary>
            The existing sheet number.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.IsSelected">
            <summary>
            True if the user has selected this sheet otherwise false.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetData.DuplicationValidator">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetData.DuplicationValidator"/> which checks if this <see cref="T:BimorphNodes.Core.ISheetData"/> can be
            duplicated. 
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetData.#ctor(Autodesk.Revit.DB.ViewSheet,BimorphNodes.Core.ISheetCache,BimorphNodes.Core.IViewCache,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetData"/> object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetData.GetPlacedViewData">
            <summary>
            Creates an List of <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData"/> from the views placed on the <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetData.Sheet"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetData.DuplicateAnnotations(Autodesk.Revit.DB.ViewSheet,Autodesk.Revit.DB.ViewSheet)">
            <summary>
            Function used to duplicate any sheet annotations, including dimensions, imported images, detail groups,
            curves, text notes, etc.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetData.Duplicate">
            <summary>
            Method used to create a new sheet ('duplicate') from an existing sheet in the document. Sets
            the new sheets name and number property and adds the new sheet to the <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetCache"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewPlacement">
            <summary>
            Utility class with methods to place views on sheets when duplicated.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewPlacement.DrawingView(Autodesk.Revit.DB.ViewSheet,Autodesk.Revit.DB.View,BimorphNodes.Core.IViewDuplicationData)">
            <summary>
            Function used to place the new duplicate view on the new sheet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewPlacement.Schedules(BimorphNodes.Core.ISheetData)">
            <summary>
            Function used to place any schedules from the input sheet to the new duplicate sheet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewPlacement.PanelSchedules(BimorphNodes.Core.ISheetData)">
            <summary>
            Function used to place any Panel schedules from the input sheet to the new duplicate sheet.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.PlaceholderSheetValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates a list of sheets and
            looks for placeholder sheets. Placeholder sheets cannot be duplicated. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PlaceholderSheetValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.PlaceholderSheetValidation.#ctor(BimorphNodes.Core.ISheetData)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.PlaceholderSheetValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.PlaceholderSheetValidation.IsValid">
            <summary>
            Returns true if the list of sheets contains any placeholder sheets otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DuplicationValidator">
            <summary>
            An object which validates a list of <see cref="T:BimorphNodes.Core.IInputValidation"/> to establish if a sheet
            or view can be duplicated.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicationValidator.ErrorMessage">
            <summary>
            A message storing details about any validation failure.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicationValidator.HasError">
            <summary>
            Returns true if an input validation error has been found otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicationValidator.#ctor(System.Collections.Generic.IList{BimorphNodes.Core.IInputValidation})">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationValidator"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicationValidator.Validate">
            <summary>
            Performs the validation check by iterating through the <see cref="T:BimorphNodes.Core.IInputValidation"/>'s. 
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ValidateCharacters">
            <summary>
            Validates a string for any <see cref="F:BimorphNodes.Nodes.Infrastructure.ApplicationSettings.InvalidCharacters"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ValidateCharacters.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateCharacters.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ValidateCharacters"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateCharacters.IsValid">
            <summary>
            The method called to validate the text. Returns the result; true if valid, otherwise false for invalid.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ValidateNullOrWhiteSpace">
            <summary>
            Validates a string for null, empty or whitespace values.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ValidateNullOrWhiteSpace.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateNullOrWhiteSpace.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ValidateCharacters"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateNullOrWhiteSpace.IsValid">
            <summary>
            The method called to validate the text.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber">
            <summary>
            Validates a <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetData.NumberNew"/> value to ensure it is unique.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber.#ctor(BimorphNodes.Core.ISheetData)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber.NewNumberExists">
            <summary>
            Returns true if the <see cref="P:BimorphNodes.Core.ISheetData.NumberNew"/> already exists in the Revit project or if
            the new number input by the user clashes with another new number they have input for another
            sheet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber.IsValid">
            <summary>
            The method called to validate the sheet number.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ValidateViewName">
            <summary>
            Validates a <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetData.NumberNew"/> value to ensure it is unique.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ValidateViewName.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateViewName.#ctor(BimorphNodes.Core.IViewDuplicationData,BimorphNodes.Core.IViewCache,BimorphNodes.Core.ISheetCache)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ValidateSheetNumber"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ValidateViewName.IsValid">
            <summary>
            The method called to validate the view name.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem">
            <summary>
            Stores data about a <see cref="T:ViewDuplicateOption"/> which can be binded to the UI.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem.DuplicationOption">
            <summary>
            The <see cref="T:ViewDuplicateOption"/> which this <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem"/> represents.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem.IsSelectable">
            <summary>
            Returns true if this <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem"/> can be selected by the user.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem.Name">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DependentView">
            <summary>
            Duplicator method for a <see cref="F:BimorphNodes.Core.ViewHierarchy.Dependent"/> view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DependentView.#ctor(BimorphNodes.Core.IViewDuplicationData,BimorphNodes.Core.ISheetCache,BimorphNodes.Core.IViewCache,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions)">
            <summary>
            Constructs a new <seealso cref="T:BimorphNodes.Nodes.Infrastructure.DependentView"/> duplicator.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DependentView.Process(Autodesk.Revit.DB.ViewDuplicateOption,BimorphNodes.Core.IReportLogger)">
            <summary>
            For dependent views (has a parent view). If <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicationOptionItem"/>
            is Duplicate or Duplicate with detailing then the new dependent view will be 'duplicated' by
            duplicating the existing dependent view's parent first. If this parent view was already created
            in a previous run, an attempt will be made to locate it to avoid superfluous duplications.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DependentView.CreateParentView(Autodesk.Revit.DB.View,BimorphNodes.Core.IViewTypeKey,System.String)">
            <summary>
            Creates a new parent view and names it based on the <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions"/> then adds
            it to the <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewCache"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DependentView.GetParentView">
            <summary>
            Returns the parent view from the <see cref="F:BimorphNodes.Nodes.Infrastructure.DependentView._data"/> or creates a new parent if it doesn't exist.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DependentView.CreateFromParent">
            <summary>
            Method used to 'duplicate' a dependent view from a new duplicated parent. This method creates a new dependent
            view from a duplicated parent view to maintain the same view structure. For that reason, this method also
            matches the crop region and annotation crop settings from the existing dependent view, to essentially
            'duplicate' the view without calling <see cref="M:Autodesk.Revit.DB.View.Duplicate(Autodesk.Revit.DB.ViewDuplicateOption)"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.IndependentView">
            <summary>
            Duplicator method for a <see cref="F:BimorphNodes.Core.ViewHierarchy.Independent"/> view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IndependentView.#ctor(BimorphNodes.Core.IViewDuplicationData)">
            <summary>
            Constructs a new <seealso cref="T:BimorphNodes.Nodes.Infrastructure.DependentView"/> duplicator.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.IndependentView.Process(Autodesk.Revit.DB.ViewDuplicateOption,BimorphNodes.Core.IReportLogger)">
            <summary>
            Duplicator for independent views. If the view is re-usable (can be placed on multiple sheets),
            then the existing view is returned.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ParentView">
            <summary>
            Duplicator method for a <see cref="F:BimorphNodes.Core.ViewHierarchy.Parent"/> view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParentView.#ctor(BimorphNodes.Core.IViewDuplicationData,BimorphNodes.Core.ISheetCache,BimorphNodes.Core.IViewCache)">
            <summary>
            Constructs a new <seealso cref="T:BimorphNodes.Nodes.Infrastructure.ParentView"/> duplicator.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParentView.Process(Autodesk.Revit.DB.ViewDuplicateOption,BimorphNodes.Core.IReportLogger)">
            <summary>
            Duplicator for Parent views.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData">
            <summary>
            Class used to store information about a old view and new view for duplication purposes. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.ExistingViewport">
            <summary>
            The existing viewport in a sheet.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.ViewExisting">
            <summary>
            The view from the existing sheet that is about to be duplicated.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.TypeKey">
            <summary>
            Stores the <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewTypeKey"/> of this new view.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.ViewHierarchy">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.ViewHierarchy"/> setting.                                               
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.Duplicator">
            <summary>
            The <see cref="T:BimorphNodes.Core.IViewDuplicator"/> to duplicate this view.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.DuplicationValidator">
            <summary>
            The <see cref="T:BimorphNodes.Core.IDuplicationValidator"/>
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.NameExisting">
            <summary>
            Stores the existing view name.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.NameNew">
            <summary>
            Stores the new view name in a <see cref="T:BimorphNodes.Core.IInputValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.#ctor(Autodesk.Revit.DB.Viewport,BimorphNodes.Core.IViewCache,BimorphNodes.Core.ISheetCache,BimorphNodes.Nodes.Infrastructure.DuplicateInputOptions)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData"/> object.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.GetDuplicator">
            <summary>
            Returns a <see cref="T:BimorphNodes.Core.IViewDuplicator"/> based on the <see cref="P:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.ViewHierarchy"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.IsReusableView">
            <summary>
            Returns true if the view can be placed on multiple <see cref="T:Autodesk.Revit.DB.ViewSheet"/>'s without needing to be duplicated
            otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDuplicationData.Duplicate(Autodesk.Revit.DB.ViewDuplicateOption,BimorphNodes.Core.IReportLogger)">
            <summary>
            Duplicates the view and sets its unique name with the <see cref="P:BimorphNodes.Core.IViewDuplicationData.NameNew"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewportData.Location">
            <summary>
            Get the viewport centre point for positioning.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewportData.ExistingViewport">
            <summary>
            The existing viewport in a sheet.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewportData.#ctor(Autodesk.Revit.DB.Viewport)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewportData"/> object.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewTypeKey">
            <summary>
            An ID assigned to a view which refers to its <see cref="T:Autodesk.Revit.DB.ViewType"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewTypeKey.Id">
            <summary>
            The id of this key.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewTypeKey.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewTypeKey"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewTypeKey.GeyKey(Autodesk.Revit.DB.View)">
            <summary>
            Returns the ViewType Id used for accessing or creating the View dictionary which contains
            all the views in the active document.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewCropUtils">
            <summary>
            Utility class with methods for view setting the view crop.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCropUtils.SetViewCrop(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            <summary>
            Sets the view and annotation crop of the <paramref name="newView"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCropUtils.ResetViewCrop(Autodesk.Revit.DB.ViewCropRegionShapeManager)">
            <summary>
            Resets the crop view.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCropUtils.SetAnnotationCrop(Autodesk.Revit.DB.ViewCropRegionShapeManager,Autodesk.Revit.DB.ViewCropRegionShapeManager)">
            <summary>
            Sets the annotation crop.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewCropUtils.SetCrop(Autodesk.Revit.DB.ViewCropRegionShapeManager,Autodesk.Revit.DB.ViewCropRegionShapeManager)">
            <summary>
            Sets the view crop.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer">
            <summary>
            Represents an entity which stores a name and number which is used
            to renumber and/or rename a <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet"/> to renumber and rename.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.Number">
            <summary>
            The new number to number the <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.Name">
            <summary>
            The new name to name the <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.#ctor(Autodesk.Revit.DB.ViewSheet,System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.SetNewName">
            <summary>
            Sets the name and number of the <see cref="P:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer.ViewSheet"/> to the new name and number stored in this
            <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetRenameContainer"/>.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.AdaptiveComponentSupportValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates the <see cref="T:ViewType"/> of
            an <see cref="T:ImportInstance"/> owner view to check if it supports the creation
            of a specific type of <see cref="T:Autodesk.Revit.DB.CurveElement"/> (Model, Detail or Symbolic curves).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.AdaptiveComponentSupportValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.AdaptiveComponentSupportValidation.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Core.ICurveValidator)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.AdaptiveComponentSupportValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.AdaptiveComponentSupportValidation.IsValid">
            <summary>
            Returns true if a layer name input by the user exists in a CAD file otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator">
            <summary>
            An <see cref="T:BimorphNodes.Core.ICurveValidator"/> which implements constants which determine if a
            <see cref="T:Autodesk.Revit.DB.DetailCurve"/> is supported by particular family documents or views.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.InvalidViewTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.ViewType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.InvalidFamilyBuiltInCategoryTypes">
            <summary>
            A list of all the <see cref="T:BuiltInCategory"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.InvalidFamilyCategoryTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.CategoryType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType"/> this validator corresponds to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.SupportsAdaptiveComponents">
            <summary>
            Returns true if this <see cref="P:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.CurveElementType"/> supports adaptive component
            families, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator.#ctor(BimorphNodes.Services.NodeServices)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DetailCurveValidator"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator">
            <summary>
            An <see cref="T:BimorphNodes.Core.ICurveValidator"/> which implements constants which determine if a
            <see cref="T:Autodesk.Revit.DB.ModelCurve"/> is supported by particular family documents or views.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.InvalidViewTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.ViewType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.InvalidFamilyBuiltInCategoryTypes">
            <summary>
            A list of all the <see cref="T:BuiltInCategory"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.InvalidFamilyCategoryTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.CategoryType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType"/> this validator corresponds to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.SupportsAdaptiveComponents">
            <summary>
            Returns true if this <see cref="P:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.CurveElementType"/> supports adaptive component
            families, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator.#ctor(BimorphNodes.Services.NodeServices)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator">
            <summary>
            An <see cref="T:BimorphNodes.Core.ICurveValidator"/> which implements constants which determine if a
            <see cref="T:Autodesk.DesignScript.Geometry.Curve"/>. As this curve is not in the Revit
            DB it has no restrictions in relation to its creation in views or family documents,
            hence all its invalid properties are empty. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.InvalidViewTypes">
            <summary>
            A list of all the <see cref="T:ViewType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.InvalidFamilyBuiltInCategoryTypes">
            <summary>
            A list of all the <see cref="T:BuiltInCategory"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.InvalidFamilyCategoryTypes">
            <summary>
            A list of all the <see cref="T:CategoryType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType"/> this validator corresponds to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.SupportsAdaptiveComponents">
            <summary>
            Returns true if this <see cref="P:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.CurveElementType"/> supports adaptive component
            families, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ProtoCurveValidator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator">
            <summary>
            An <see cref="T:BimorphNodes.Core.ICurveValidator"/> which implements constants which determine if a
            <see cref="T:Autodesk.Revit.DB.SymbolicCurve"/> is supported by particular family documents or views.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.InvalidViewTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.ViewType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.InvalidFamilyBuiltInCategoryTypes">
            <summary>
            A list of all the <see cref="T:BuiltInCategory"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.InvalidFamilyCategoryTypes">
            <summary>
            A list of all the <see cref="T:Autodesk.Revit.DB.CategoryType"/>'s which the <see cref="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType"/>
            does not support. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType">
            <summary>
            The <see cref="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType"/> this validator corresponds to.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.SupportsAdaptiveComponents">
            <summary>
            Returns true if this <see cref="P:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.CurveElementType"/> supports adaptive component
            families, otherwise returns false.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SymbolicCurveValidator.#ctor(BimorphNodes.Services.NodeServices)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ModelCurveValidator"/>
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.FamilyCategoryTypeValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates the <see cref="T:CategoryType"/>
            of a family owner category to check if it supports the creation of a specific type of
            <see cref="T:Autodesk.Revit.DB.CurveElement"/> (Model, Detail or Symbolic curves).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.FamilyCategoryTypeValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.FamilyCategoryTypeValidation.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Core.ICurveValidator)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.FamilyCategoryTypeValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.FamilyCategoryTypeValidation.IsValid">
            <summary>
            Returns true if a layer name input by the user exists in a CAD file otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.FamilyCategoryValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates the <see cref="T:Autodesk.Revit.DB.BuiltInCategory"/>
            of a family owner category to check if it supports the creation of a specific type of
            <see cref="T:Autodesk.Revit.DB.CurveElement"/> (Model, Detail or Symbolic curves).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.FamilyCategoryValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.FamilyCategoryValidation.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Core.ICurveValidator)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.FamilyCategoryValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.FamilyCategoryValidation.IsValid">
            <summary>
            Returns true if the owner family category is valid for the type of <see cref="T:Autodesk.Revit.DB.CurveElement"/>
            creation otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewTypeValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates the <see cref="T:ViewType"/> of
            an <see cref="T:ImportInstance"/> owner view to check if it supports the creation
            of a specific type of <see cref="T:Autodesk.Revit.DB.CurveElement"/> (Model, Detail or Symbolic curves).
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewTypeValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewTypeValidation.#ctor(Autodesk.Revit.DB.ImportInstance,BimorphNodes.Core.ICurveValidator)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewTypeValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewTypeValidation.IsValid">
            <summary>
            Returns true if a layer name input by the user exists in a CAD file otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceLoadedValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates a <see cref="T:ImportInstance"/> to check
            if it is linked and if true, loaded into the active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ImportInstanceLoadedValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceLoadedValidation.#ctor(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ImportInstanceLoadedValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ImportInstanceLoadedValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:ImportInstance"/> is linked and loaded otherwise returns true
            if it is linked and unloaded. If the instance is not linked, returns true.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LayerNameCharacterValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates all the layers in a <see cref="T:ImportInstance"/>
            to check if any contain any characters which are not supported by the DXF export which the
            <see cref="T:CADTextData"/> requires to run. Only numbers letters, hiphens, underscores and dollar
            symbols are allowed.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerNameCharacterValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerNameCharacterValidation.#ctor(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LayerNameValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerNameCharacterValidation.IsValid">
            <summary>
            Returns true if a layer name input by the user exists in a CAD file otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LayerNameValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates the layers in a <see cref="T:ImportInstance"/>
            to validate if it exists from a name input by the user.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LayerNameValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerNameValidation.#ctor(Autodesk.Revit.DB.ImportInstance,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LayerNameValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LayerNameValidation.IsValid">
            <summary>
            Returns true if a layer name input by the user exists in a CAD file otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LineStyleNameValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates if a line style
            (a <see cref="T:Autodesk.Revit.DB.GraphicsStyle"/> has a unique / valid name which doesn't exist in the
            active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LineStyleNameValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineStyleNameValidation.#ctor(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LineStyleNameValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineStyleNameValidation.IsValid">
            <summary>
            Returns true if the line style name is unique otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LineWeightValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates if a line weight is valid.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LineWeightValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineWeightValidation.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LineWeightValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LineWeightValidation.IsValid">
            <summary>
            Returns true if the line weight is within the range Revit allows otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ElementLocationValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates a <see cref="T:Autodesk.Revit.DB.Location"/> for validity.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ElementLocationValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementLocationValidation.#ctor(Autodesk.Revit.DB.Location)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ElementLocationValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ElementLocationValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:Autodesk.Revit.DB.Location"/> is valid otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkElementMemberValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates a list of <see cref="T:Revit.Elements.Element"/>
            to check if any are from linked documents. If true and the element does not derive from
            the <see cref="T:Revit.LinkElement"/> then the list is deemed invalid. To optimise the checking
            only a sample of elements are taken from the list.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkElementMemberValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementMemberValidation.#ctor(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkElementMemberValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkElementMemberValidation.IsValid">
            <summary>
            Returns false (invalid) if the elements list contains any elements which are from linked documents
            but not a type of <see cref="T:Revit.LinkElement"/>, otherwise returns true. The element list is
            sampled based on a sample rate to avoid excessive casting evaluation.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ParameterNameValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates the name of a
            <see cref="T:Autodesk.Revit.DB.Parameter"/> in the <see cref="T:Autodesk.Revit.DB.ParameterMap"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParameterNameValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParameterNameValidation.#ctor(Autodesk.Revit.DB.Parameter,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ParameterNameValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParameterNameValidation.IsValid">
            <summary>
            Returns true if the parameter name exists in the element (it wont be null), otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ParameterStorageTypeValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates the storage type of a
            <see cref="T:Autodesk.Revit.DB.Parameter"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ParameterStorageTypeValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParameterStorageTypeValidation.#ctor(Autodesk.Revit.DB.Parameter)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ParameterStorageTypeValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ParameterStorageTypeValidation.IsValid">
            <summary>
            Returns true if the parameter has a storage type, otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceLoadedValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> to check
            if it is loaded into the active document.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceLoadedValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceLoadedValidation.#ctor(Revit.Elements.Element)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceLoadedValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceLoadedValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> is loaded otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceTypeValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> which evaluates a <see cref="T:Revit.Elements.UnknownElement"/> internal type
            to establish if it is a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LinkInstanceTypeValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceTypeValidation.#ctor(Revit.Elements.Element)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LinkInstanceTypeValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LinkInstanceTypeValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:Revit.Elements.UnknownElement"/> is a <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ScheduleViewTypeValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates if a <see cref="T:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper"/>
            stores a valid <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ScheduleViewTypeValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ScheduleViewTypeValidation.#ctor(BimorphNodes.Nodes.Infrastructure.ScheduleWrapper)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ScheduleViewTypeValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ScheduleViewTypeValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:BimorphNodes.Nodes.Infrastructure.ScheduleWrapper"/> is a type of <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>
            otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetNumberColumnValidation">
            <summary>
            An input validator which evaluates if the sheet number column is added to a
            <see cref="T:Autodesk.Revit.DB.ViewSchedule"/>.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetNumberColumnValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetNumberColumnValidation.#ctor(BimorphNodes.Nodes.Infrastructure.SheetSchedule)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetNumberColumnValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetNumberColumnValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule"/> contains the sheet number column, otherwise
            returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.SheetScheduleCategoryValidation">
            <summary>
            Validates the category of the <see cref="T:Autodesk.Revit.DB.ViewSchedule"/> to ensure it is a type of sheet
            schedule.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.SheetScheduleCategoryValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetScheduleCategoryValidation.#ctor(BimorphNodes.Nodes.Infrastructure.SheetSchedule)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetScheduleCategoryValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.SheetScheduleCategoryValidation.IsValid">
            <summary>
            Returns true if the <see cref="T:BimorphNodes.Nodes.Infrastructure.SheetSchedule"/> category is the <see cref="F:BimorphNodes.Services.NodeSettings.SheetsCategory"/>
            otherwise returns f
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.DuplicateOptionValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates a int can be
            parsed into a <see cref="T:ViewDuplicateOption"/>. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.DuplicateOptionValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateOptionValidation.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.DuplicateOptionValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.DuplicateOptionValidation.IsValid">
            <summary>
            Returns true if the duplicate option value is within the valid <see cref="T:ViewDuplicateOption"/>
            enum range otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.LegalCharacterValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates a string for illegal characters
            which cannot be used in Revit to name views or sheets.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.LegalCharacterValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LegalCharacterValidation.#ctor(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.LegalCharacterValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.LegalCharacterValidation.IsValid">
            <summary>
            Returns true if the duplicate option value is within the valid <see cref="T:ViewDuplicateOption"/>
            enum range otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.PrefixSuffixValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates two strings for
            at least 1 character - if they are null or empty then the input is not valid.
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.PrefixSuffixValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.PrefixSuffixValidation.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.PrefixSuffixValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.PrefixSuffixValidation.IsValid">
            <summary>
            Returns true if the affix and suffix are strings and contain at least 1 character otherwise
            returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.UniqueSheetNumberValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates a sheet number against all existing
            sheet numbers in the active document to test for uniqueness. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.UniqueSheetNumberValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.UniqueSheetNumberValidation.#ctor(Autodesk.Revit.DB.Document,BimorphNodes.Nodes.Infrastructure.SheetRenameContainer)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.UniqueSheetNumberValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.UniqueSheetNumberValidation.IsValid">
            <summary>
            Returns true if the list of numbers contains a distinct set (no duplicates) otherwise returns false.
            </summary>
        </member>
        <member name="T:BimorphNodes.Nodes.Infrastructure.ViewDetailLevelValidation">
            <summary>
            An <see cref="T:BimorphNodes.Core.IInputValidation"/> implementation which evaluates a int can be
            parsed into a <see cref="T:ViewDetailLevel"/>. 
            </summary>
        </member>
        <member name="P:BimorphNodes.Nodes.Infrastructure.ViewDetailLevelValidation.ErrorMessage">
            <summary>
            A message storing details about any validation failures.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDetailLevelValidation.#ctor(System.Int32)">
            <summary>
            Constructs a new <see cref="T:BimorphNodes.Nodes.Infrastructure.ViewDetailLevelValidation"/>.
            </summary>
        </member>
        <member name="M:BimorphNodes.Nodes.Infrastructure.ViewDetailLevelValidation.IsValid">
            <summary>
            Returns true if the duplicate option value is within the valid <see cref="T:ViewDetailLevel"/>
            enum range otherwise returns false.
            </summary>
        </member>
        <member name="T:CADTextData">
            <summary>
            Class used to parse an MText or Text object with relevant metadata.
            </summary>
        </member>
        <member name="P:CADTextData.OriginPoint">
            <summary> 
            The placement point of this CADTextData object.&#xD;&#xA;&#xD;&#xA;
            Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.Rotation">
            <summary> 
            The rotation of this CADTextData object in degrees.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.LayerName">
            <summary> 
            The layer name this CADTextData object is from.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.TextValue">
            <summary> 
            The text value of this CADTextData object.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.FontTypeName">
            <summary> 
            The font type of this CADTextData, e.g. Arial.&#xD;&#xA;&#xD;&#xA;
            Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.Height">
            <summary> 
            The height of this CADTextData object in the active Document's display units.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.WidthFactor">
            <summary>
            The width factor of the text style.
            </summary>
        </member>
        <member name="P:CADTextData.IsBold">
            <summary>
            True if the text style is bold.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.IsItalic">
            <summary>
            True if the text style is italic.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.FontFile">
            <summary>
            The font file used with this text data.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.Color">
            <summary>
            Returns the color of this CADTextData.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.HorizontalAlign">
            <summary>
            The horizontal alignment of this CADTextData.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:CADTextData.VerticalAlign">
            <summary>
            The vertical alignment of this CADTextData.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:CADTextData.#ctor(BimorphNodes.Nodes.Infrastructure.CadTextDataBase)">
            <summary>
            Constructs a new <see cref="T:CADTextData"/> from the base class instance.
            </summary>
        </member>
        <member name="M:CADTextData.FromLayers(Revit.Elements.ImportInstance,System.Collections.Generic.List{System.String})">
            <summary>
            Extract text from a CAD link or import by layer name. Works recursively to extract text from CAD blocks regardless of any nested depth. 
            The node also avoids exploding the CAD instance, so it is not affected by Revits 10,000 element import limit!
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="importInstance"> Input the ImportInstance to convert to curves.</param>
            <param name="layerNames"> Input the layer names to filter and convert text elements. Leave unconnected to convert text on all layers. Names are case-sensitive.</param>
            <returns name = "CADTextData[][]"> CADTextData[][]</returns>
            <returns name = "layerKeys[]"> string[]</returns>
            <search> text, from, CAD, DWG, DGN, layer, layers, textdata, cadtextdata, bimorph, bimorphNodes </search>
        </member>
        <member name="T:CAD">
            <summary>
            DWG DGN class provides utilities for converting curves from CAD links or Imports using layer names as filters. 
            There are methods for reporting all the CAD links or Imports in the Document and methods to convert curves to 
            detail lines also using layer names as filters.
            </summary>
        </member>
        <member name="M:CAD.CurvesFromCADLayers(Revit.Elements.ImportInstance,System.Collections.Generic.List{System.String},System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Extracts curves from a CAD link or import by layer name. Enter LineStyle names to
            map to each layer during conversion.&#xD;&#xA;&#xD;&#xA;The node is optimized to convert curve types that typically fail when
            using Dynamo Element.Curves node or Revit Explode.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support.
            </summary>
            <param name="importInstance">Input the ImportInstance to convert to curves.</param>
            <param name="layerNames">Input the layer names for conversion. Leave unconnected to convert all layers. Names are case-sensitive.</param>
            <param name="createModelCurves">Set to True to convert into Revit Model Lines.</param>
            <param name="lineStyleMap">Input the LineStyle name to map to each layer. Longest lacing is used by default.</param>
            <returns name="Curve[][]">Curve[][]</returns>
            <search> curves, lines, from, CAD, DWG, DGN, layer, layers, modelCurves, model, create, bimorph, bimorphNodes </search>
        </member>
        <member name="M:CAD.DetailCurvesFromCADLayers(Revit.Elements.ImportInstance,Revit.Elements.Views.View,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Extracts curves from a CAD link or import to Revit Detail curves by layer name.
            Enter LineStyle names to map to each layer during conversion.&#xD;&#xA;&#xD;&#xA;The node is optimized to convert curve types that 
            typically fail when using Dynamo Element.Curves node or Revit Explode.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support.
            </summary>
            <param name="importInstance">Input the ImportInstance to convert to curves.</param>
            <param name="view">Select the target View for the Detail Lines. The View should be related to the ImportInstance.</param>
            <param name="layerNames">Input the layer names for conversion. Leave unconnected to convert all layers. Names are case-sensitive.</param>
            <param name="lineStyleMap">Input the LineStyle names to map to each layer. Longest lacing is used by default.</param>
            <returns name="DetailCurve[][]">DetailCurve[][]</returns>
            <returns name="layerKeys[]">string[]</returns>
            <search> curves, lines, from, CAD, DWG, DGN, layer, layers, detaillines, detailcurves, curve, detail, create, importinstance, import, instance, bimorph, bimorphNodes </search>
        </member>
        <member name="M:CAD.SymbolicCurvesFromCADLayers(Revit.Elements.ImportInstance,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Extracts curves from a CAD link or import to Revit Family Symbolic curves by layer name.
            Enter LineStyle names to map to each layer during conversion.&#xD;&#xA;&#xD;&#xA;The node is optimized to convert curve types that typically 
            fail when using Dynamo Element.Curves node or Revit Explode.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support.
            </summary>
            <param name="importInstance">Input the ImportInstance to convert to curves.</param>
            <param name="layerNames">Input the layer names for conversion. Leave unconnected to convert all layers. Names are case-sensitive.</param>
            <param name="lineStyleMap">Input the LineStyle names to map to each layer. Longest lacing is used by default.</param>
            <returns name="SymbolicCurve[][]">SymbolicCurve[][]</returns>
            <returns name="layerKeys[]">string[]</returns>
            <search> curves, lines, from, CAD, DWG, DGN, layer, layers, symbolic, symboliclines, symbolicurves, curve, create, importinstance, import, instance, bimorph, bimorphNodes </search>
        </member>
        <member name="M:CAD.PointsFromCADLayers(Revit.Elements.ImportInstance,System.Collections.Generic.List{System.String})">
            <summary>
            Extracts points from a CAD link or import to Dynamo Points by layer name. Points are organized into sublists by layer.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support.
            </summary>
            <param name="importInstance">Input the ImportInstance to convert to curves.</param>
            <param name="layerNames">Input the layer names for conversion. Leave unconnected to convert all layers. Names are case-sensitive.</param>
            <returns name="Point[][]">Point[][]</returns>
            <returns name="layerKeys[]">string[]</returns>
            <search> points, from, CAD, DWG, DGN, layer, layers, importinstance, import, instance, bimorph, bimorphNodes </search>
        </member>
        <member name="T:Curve">
            <summary>
            Curve class includes methods for interacting with Dynamo curves and Revit Model and Detail curves
            </summary>
        </member>
        <member name="M:Curve.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Curve.IntersectAll(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Finds and returns all intersection points between a set of curves. Highly optimized
            for rapid results.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="curves">Input a list of Curves to intersect.</param>
            <returns name="Point[]">Point[]</returns>
            <search> intersect, curve, curves, find, intersections, intersect, all, between, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Curve.SolidIntersection(Autodesk.DesignScript.Geometry.Solid,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve},System.Boolean)">
            <summary>
            Finds and returns all intersecting curve segments between a solid and a list of curves. Setting
            invert to true has the reverse effect and trims curves that intersect the solid.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="solid">Input a solid or list of solids.</param>
            <param name="curves">Input a list of Curves to intersect the solid or solids.</param>
            <param name="invert">True to return curve segments outside the solid. False to return curve segments inside the solid.</param>
            <returns name="CurveSolidIntersectionResult[]">CurveSolidIntersectionResult[]</returns>
            <search> intersect, curve, curves, intersections, intersect, between, solid, solids, trim, by, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Curve.FindDuplicates(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Finds and groups duplicates from a list of Dynamo Curves and returns the groups
            as CurveDuplicatesResult instances.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="curves">
            Input a list of Dynamo Curves to find any duplicates.
            </param>
            <returns name="CurveDuplicatesResult[]">CurveDuplicatesResult[]</returns>-
            <search> duplicates, lines, curves, find, bimorph, bimorphNodes </search>
        </member>
        <member name="T:Results.CurveDuplicatesResult">
            <summary>
            An entity which stores a list of duplicate Dynamo Revit.Elements.CurveElement's.
            </summary>
        </member>
        <member name="P:Results.CurveDuplicatesResult.UniqueCurve">
            <summary>
            The unique curve in the result. If there are duplicate curves then this was the first curve found
            during processing.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.CurveDuplicatesResult.Duplicates">
            <summary>
            The duplicates of the UniqueCurve or an empty list if it has none.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.CurveDuplicatesResult.#ctor">
            <summary>
            Constructs a new CurveDuplicatesResult.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.CurveDuplicatesResult.AddDuplicate(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Adds a duplicate curve to this CurveDuplicatesResult.
            </summary>
        </member>
        <member name="T:Results.CurveElementDuplicatesResult">
            <summary>
            An entity which stores a list of duplicate Dynamo Revit.Elements.CurveElement's.
            </summary>
        </member>
        <member name="P:Results.CurveElementDuplicatesResult.UniqueCurve">
            <summary>
            The unique curve in the result. If there are duplicate curves then this was the first curve found
            during processing.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.CurveElementDuplicatesResult.Duplicates">
            <summary>
            The duplicates of the UniqueCurve or an empty list if it has none.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.CurveElementDuplicatesResult.#ctor">
            <summary>
            Constructs a new CurveDuplicatesResult.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.CurveElementDuplicatesResult.AddDuplicate(Revit.Elements.CurveElement)">
            <summary>
            Adds a duplicate curve to this CurveDuplicatesResult.
            </summary>
        </member>
        <member name="T:Results.CurveSolidIntersectionResult">
            <summary>
            A class which stores the result of an intersection between a solid and curve. 
            </summary>
        </member>
        <member name="P:Results.CurveSolidIntersectionResult.Solid">
            <summary>
            The solid which was intersected against the Curve.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.CurveSolidIntersectionResult.Curve">
            <summary>
            The original curve which was intersected with the Solid.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.CurveSolidIntersectionResult.CurveSegments">
            <summary>
            A list of the curve segments resulting from the intersection of the Curve and Solid.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.CurveSolidIntersectionResult.FailedToConvert">
            <summary>
            True if the conversion of the Dynamo Solid to a Revit API Solid fails (cylindrical
            geometry typically fails to convert for example), or if the solid has zero volume
            or is not closed.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.CurveSolidIntersectionResult.#ctor">
            <summary>
            Constructs a new CurveSolidIntersectionResult.
            </summary>
        </member>
        <member name="T:Results.ElementIntersectionResult">
            <summary>
            A results class which stores information about an Element intersection. 
            </summary>
        </member>
        <member name="P:Results.ElementIntersectionResult.Element">
            <summary>
            The Element (A) which was intersected with other elements (B) in the document.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.ElementIntersectionResult.IntersectingElements">
            <summary>
            A list of elements (B) which intersect with the Element (A) or an empty list if
            no elements intersect it.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.ElementIntersectionResult.IsSupported">
            <summary>
            Returns true if the Element (A) is supported by the Revit API intersection filter
            otherwise returns false, indicating an unsupported element.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.ElementIntersectionResult.#ctor">
            <summary>
            Constructs a new ElementIntersectionResult.
            </summary>
        </member>
        <member name="T:Results.SolidIntersectionResult">
            <summary>
            An entity which stores the result of an intersection between a Dynamo solid and Revit
            elements.
            </summary>
        </member>
        <member name="P:Results.SolidIntersectionResult.Solid">
            <summary>
            The Dynamo Solid which is intersected with Element's in the
            Revit document.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.SolidIntersectionResult.IntersectingElements">
            <summary>
            A list of elements which intersect with the Solid or an empty list if
            no elements intersect it.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Results.SolidIntersectionResult.FailedToConvert">
            <summary>
            Returns true if the Solid failed to convert to a Revit API Solid using its
            ShapeBuilder class thus preventing the intersection from being computed.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Results.SolidIntersectionResult.#ctor">
            <summary>
            Constructs a new SolidIntersectionResult.
            </summary>
        </member>
        <member name="T:Revit.BoundingBox">
            <summary>
            Containment testing nodes using Bounding Boxes. This class returns elements using Revit QuickFitlers
            </summary>
        </member>
        <member name="M:Revit.BoundingBox.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.BoundingBox.GetElements``1(System.Collections.Generic.List{Revit.Elements.Element},BimorphNodes.Core.IBoundingBoxFilterFactory{``0},Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Gets the elements which intersect with the <paramref name="boundingBox"/> using the
            <paramref name="boundingBoxFilterFactory"/>.
            </summary>
        </member>
        <member name="M:Revit.BoundingBox.GetElementsInside(Autodesk.DesignScript.Geometry.BoundingBox,System.Collections.Generic.List{Revit.Elements.Element},System.Double)">
            <summary>
            Filter and return Revit elements inside a bounding box. Supports Bimorph LinkElements.
            &#xD;&#xA;&#xD;&#xA;Utilizes Revit's QuickFilter class for rapid results.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="boundingBox">Input a Bounding Box.</param>
            <param name="elements">Input a list of Revit elements.</param>
            <param name="tolerance">.
            Input the distance in active document units. Use positive or negative values to increase or decrease the
            extents of the BoundingBox to control the match criteria in the geometry comparison.
            </param>
            <returns name="Element[]">Element[]</returns>
            <search> elements, inside, find, get, boundingbox, bounding, box, collect, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.BoundingBox.GetElementsIntersect(Autodesk.DesignScript.Geometry.BoundingBox,System.Collections.Generic.List{Revit.Elements.Element},System.Double)">
            <summary>
            Filter and return Revit elements intersecting or inside a bounding box. Supports Bimorph
            LinkElements.&#xD;&#xA;&#xD;&#xA;Utilizes Revit's QuickFilter class for rapid results.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="boundingBox">Input a Bounding Box.</param>
            <param name="elements">Input a list of Revit elements.</param>
            <param name="tolerance">
            Input a distance in active document units to control the match criteria in the geometry comparison. Use
            positive values to consider gaps, and negative values to consider overlaps.
            </param>
            <returns name="Element[]">Element[]</returns>
            <search> elements, intersect, find, get, boundingbox, bounding, box, collect, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.CurveElement.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.CurveElement.FindDuplicates(System.Collections.Generic.List{Revit.Elements.CurveElement})">
            <summary>
            Finds and groups duplicates from a list of Revit Model or Detail Curves and returns the groups
            as CurveElementDuplicatesResult instances.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="curveElements">
            Input a list of Revit Model or Detail Curves to find any duplicates.
            </param>
            <returns name="CurveElementDuplicatesResult[]">CurveElementDuplicatesResult[]</returns>-
            <search> duplicates, lines, curves, find, bimorph, bimorphNodes </search>
        </member>
        <member name="T:Revit.Element">
            <summary>
            Tests for intersections between two sets of Revit elements. The node prevents self intersections if
            the element is in both inputs to preclude false flags.&#xD;&#xA;&#xD;&#xA;
            Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Revit.Element.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.Element.IntersectsElement(System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Finds intersections (clash detection) between two sets of elements or LinkElements. Each element in set A
            which intersects with any elements from set B is returned as an ElementIntersectionResult. Self-intersection
            is automatically prevented if the same element is found in both lists.&#xD;&#xA;&#xD;&#xA;The node is optimized
            to output rapid results up to 99.5% faster than any other intersection technique.
            &#xD;&#xA;&#xD;&#xA;Use IsElementSupported to check that elements are supported by the node.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="elementSetA">
            Input a list of Revit elements or LinkElements to perform the interference check.
            </param>
            <param name="elementSetB">
            Input a list of Revit elements or LinkElements to test for interference against elementSetA.
            </param>
            <returns name="ElementIntersectionResult[]">ElementIntersectionResult[]</returns>
            <search>
            intersect, intersecting, intersection, intersects, revit, elements, clash, detection, interference,
            checking, check, coordination, bim, surrounding, element, find, get, bimorph, bimorphNodes
            </search>
        </member>
        <member name="M:Revit.Element.IntersectsSolid(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Solid},System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Finds intersections (clash detection) between Dynamo Solids and Revit elements or LinkElements.
            &#xD;&#xA;&#xD;&#xA;The node is optimized to output rapid results up to 99.5% faster than
            any other intersection technique.&#xD;&#xA;&#xD;&#xA;Use IsElementSupported to check that
            elements are supported by the clash algorithms.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="solids">
            Input a list of solid objects to perform the interference check.
            </param>
            <param name="elements">
            Input a list of Revit elements or LinkElements to test for interference against each of the solid objects.
            </param>
            <returns name="SolidIntersectionResult[]">SolidIntersectionResult[]</returns>
            <search>
            find, intersecting, intersect, intersection, intersects, revit, element, elements, clash, detection,
            interference, checking, check, coordination, bim, surrounding, solid, with, bimorph, bimorphNodes
            </search>
        </member>
        <member name="M:Revit.Element.IsElementSupported(Revit.Elements.Element)">
            <summary>
            Returns true if the element is supported by the LinkElement.Intersects nodes, false otherwise.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="element">
            Input a list of Revit elements or LinkElements to test if they are supported by the BimorphNodes Element
            intersection nodes.
            </param>
            <returns name="bool">bool</returns>
            <search> elements, element, supported, bimorph, bimorphNodes</search>
        </member>
        <member name="T:Revit.ImportInstanceReport">
            <summary>
            A class which stores attribute data about a <see cref="P:Revit.ImportInstanceReport.ImportInstance"/>.
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.ImportInstance">
            <summary>
            The ImportInstance of this report.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.LevelHost">
            <summary>
            The host Level or null if it has no host level.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.OwnerView">
            <summary>
            The owner view of the ImportInstance or null if there is no owner view.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.WorksetName">
            <summary>
            The name of the workset the ImportInstance is assigned to.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.Path">
            <summary>
            The path to the ImportInstance or the default path if it is imported.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.LinkStatus">
            <summary>
            Returns the link status of the ImportInstance based on the Revit API LinkedFileStatus enum.
            Returns one of the following values: CanBeUpgraded, Imported, InClosedWorkset, Invalid,
            Loaded, LocallyUnloaded, NotFound, Unloaded. &#xD;&#xA;&#xD;&#xA;For ImportInstance's linked
            from BIM 360, one of the following values are returned: Uninitialized, LinkLoaded, LinkNotFound,
            LinkNotOpenable, LinkOpenAsHost, SameModelAsHost, SameCentralModelAsHost,
            LinkNotLoadedOtherError, LinkMayBeUpgraded, ExternalServerMissing, LinkExists,
            CouldNotChangeViewReference, UsedExisting
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.Name">
            <summary>
            The name of the ImportInstance.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.ImportInstanceReport.IsLinked">
            <summary>
            Returns true if the ImportInstance is linked otherwise false, meaning it
            is imported.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="M:Revit.ImportInstanceReport.#ctor(BimorphNodes.Core.IDocumentAttributes,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Constructs a new ImportInstanceReport.
            </summary>
        </member>
        <member name="M:Revit.ImportInstanceReport.GetWorksetName(BimorphNodes.Core.IDocumentAttributes,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Returns the workset name the <see cref="T:Autodesk.Revit.DB.ImportInstance"/> is on.
            </summary>
        </member>
        <member name="M:Revit.ImportInstanceReport.GetOwnerView(BimorphNodes.Core.IDocumentAttributes,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Returns the owner view of the <see cref="T:Autodesk.Revit.DB.ImportInstance"/>. 
            Returns null if it has no owner view.
            </summary>
        </member>
        <member name="M:Revit.ImportInstanceReport.GetLevelHost(BimorphNodes.Core.IDocumentAttributes,Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Returns the level the <see cref="P:Revit.ImportInstanceReport.ImportInstance"/> is hosted on where applicable. Returns
            null if the <see cref="P:Revit.ImportInstanceReport.ImportInstance"/> is not hosted on a level.
            </summary>
        </member>
        <member name="T:Revit.ImportInstance">
            <summary>
            A node class for interactions with Revit <see cref="T:Autodesk.Revit.DB.ImportInstance"/>'s.
            </summary>
        </member>
        <member name="M:Revit.ImportInstance.LayerNames(Revit.Elements.ImportInstance)">
            <summary>
            Get the full list of layer names from a CAD Link or Import.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="importInstance">Input the ImportInstance to extract the layers.</param>
            <returns name="layerNames[]">string[]</returns>
            <search> get, layer, names, from, CAD, DWG, DGN, importinstance, import, instance, layers, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.ImportInstance.LayerNamesInUse(Revit.Elements.ImportInstance)">
            <summary>
            Get the list of layer names from a CAD link or import that are in use and contain curves, points,
            or text.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="importInstance">Input the ImportInstance to find layers that are in use.</param>
            <returns name="layerNames[]"> string[]</returns>
            <returns name="containsCurves[]"> bool[]&#xD;&#xA;&#xD;&#xA;Indices map to the layerNames output. Can be used as a boolean mask.</returns>
            <returns name="containsPoints[]"> bool[]&#xD;&#xA;&#xD;&#xA;Indices map to the layerNames output. Can be used as a boolean mask.</returns>
            <returns name="containsText[]"> bool[]&#xD;&#xA;&#xD;&#xA;Indices map to the layerNames output. Can be used as a boolean mask.</returns>
            <search> layer, names, from, CAD, DWG, DGN, importinstance, import, instance, layers, in, use, active, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.ImportInstance.SetObjectStyle(Revit.Elements.ImportInstance,System.String,System.Int32,DSCore.Color,Revit.Elements.LinePatternElement)">
            <summary>
            Set the weight and color of CAD link or import Object Styles (layers).
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="importInstance"> Input the ImportInstance containing the target layers.</param>
            <param name="layerName"> Input the layer name to update. Names are case-sensitive.</param>
            <param name="projectionWeight"> Input the line projection weight.</param>
            <param name="color"> Input a color to map to the CAD layer.</param>
            <param name="linePattern">
            Input the required line pattern (optional) or leave unconnected to default to the Solid line pattern.
            </param>
            <returns name="importInstance">ImportInstance</returns>
            <search> set, CAD, DWG, DGN, importinstance, import, instance, object, styles, objectstyles, layer, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.ImportInstance.SetLayerVisibility(Revit.Elements.ImportInstance,Revit.Elements.Views.View,System.String,System.Boolean)">
            <summary>
            Sets the visibility of the given layer name.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="importInstance"> Input the ImportInstance containing the target layers.</param>
            <param name="view"> The view in which to change the layer visibiilty.</param>
            <param name="layerName"> Input the layer name to update. Names are case-sensitive.</param>
            <param name="visible"> True to show, or false to hide.</param>
            <returns name="importInstance"> ImportInstance</returns>
            <search> set, CAD, DWG, DGN, importinstance, import, instance, layer, visibility, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.ImportInstance.ReportInstances(System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds any CAD links or imports in the document and returns them in a list of ImportInstanceReport's.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="filePath">
            Leave unconnected to report the active document or input a File Path to report an external
            Revit document or Family.
            </param>
            <param name="refresh"> To refresh, switch a bool input to its opposing state.</param>
            <param name="close"> 
            Set to true to close any external files opened using the filePath input. If the active document
            is being reported, this input has no effect. Closing disposes all output objects.
            </param>
            <returns name="ImportInstanceReport[]">ImportInstanceReport[]</returns>
            <search> report, CAD, DWG, DGN, importinstance, import, instance, instances, bimorph, bimorphNodes </search>
        </member>
        <member name="T:Revit.LineStyle">
            <summary>
            Revit <see cref="T:Autodesk.Revit.DB.GraphicsStyle"/> nodes.
            </summary>
        </member>
        <member name="M:Revit.LineStyle.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.LineStyle.AllAttributes(System.Boolean)">
            <summary>
            Gets all the Revit LineStyles in the active document and returns the LineStyleAttributes.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="refresh">To refresh, input a bool and switch its state to trigger the update.</param>
            <returns name="LineStyleAttributes[]">LineStyleAttributes[]</returns>
            <search> line, linestyle, all, attributes, graphics, style, graphicstyle, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LineStyle.Create(System.String,System.Int32,Revit.Elements.LinePatternElement,DSCore.Color)">
            <summary>
            Create a new LineStyle and returns it as a new LineStyleAttributes object. Note that the
            Solid line pattern is a special case in the Revit API - its not a style and therefore
            cannot be selected. To create a line style using the solid pattern simply input null.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="name">Input the name of the new Line Style as a string.</param>
            <param name="weight">Input the line weight as an integer.</param>
            <param name="linePattern">Input the required line pattern or null to default to the Solid line pattern.</param>
            <param name="color">Input the required line Color.</param>
            <returns name="LineStyleAttributes">LineStyleAttributes</returns>
            <search> linestyle, graphics, style, graphicstyle, new, create, bimorph, bimorphNodes</search>
        </member>
        <member name="T:Revit.LineStyleAttributes">
            <summary>
            A class which stores attribute information about a line style in the Revit document.
            </summary>
        </member>
        <member name="P:Revit.LineStyleAttributes.Name">
            <summary>
            The name of the line style.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.LineStyleAttributes.Color">
            <summary>
            The color of the line style.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.LineStyleAttributes.Weight">
            <summary>
            The line weight of the line style.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.LineStyleAttributes.GraphicsStyle">
            <summary>
            The Graphics Style of the line style.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
        </member>
        <member name="P:Revit.LineStyleAttributes.LinePatternElement">
            <summary>
            Returns the Line Pattern Element of the line style. Note that if the line pattern
            is the built-in Solid style, returns null as the Solid style is a special type that
            isn't represented as a line pattern in the Revit API but a special code that tells
            drawing and export codes to use solid lines rather than patterned lines. Similarly
            if the line style has no pattern returns null. 
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="LinePatterElement">LinePatterElement</returns>
            <search> linepattern, pattern, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LineStyleAttributes.#ctor(Autodesk.Revit.DB.Category)">
            <summary>
            Constructs a new LineStyleAttributes object.
            </summary>
        </member>
        <member name="M:Revit.LineStyleAttributes.GetLinePatternElement">
            <summary>
            Returns the Line Pattern Element of the line style. If the line style has no
            pattern or if the pattern is the built-in Solid style, returns null as its not possible to
            represent as a line pattern. 
            </summary>
        </member>
        <member name="T:Revit.LinkElement">
            <summary>
            The LinkElement class is exclusive to BimorphNodes and provides a means of extracting
            elements by category from a Revit link instance. Its purpose is very important as it
            calculates the translations needed to locate the linkedElement in a host file as there
            is a limitation in Revit with link instance elements which always places them in
            Origin-to-Origin location, regardless of how the user may have transformed or
            translated the link instance.
            </summary>
        </member>
        <member name="P:Revit.LinkElement.LinkInstanceAttributes">
            <summary>
            The <see cref="P:Revit.LinkElement.LinkInstanceAttributes"/> of this <see cref="T:Revit.LinkElement"/>.
            </summary>
        </member>
        <member name="P:Revit.LinkElement.Outline">
            <summary>
            The linked elements bounding box <see cref="P:Revit.LinkElement.Outline"/>. The outline is in its host location
            instead of the origin-to-origin location (Revit default location). In this way, any
            transformations made to this elements <see cref="T:Autodesk.Revit.DB.RevitLinkInstance"/> are accounted for.
            </summary>
        </member>
        <member name="P:Revit.LinkElement.InternalElement">
            <summary>
            The underlying Revit <see cref="P:Revit.LinkElement.Element"/>.
            </summary>
        </member>
        <member name="P:Revit.LinkElement.LinkInstanceId">
            <summary>
            Get the RevitLinkInstance Id associated with this LinkElement.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="int">int</returns>
            <search> link, instance, id, linkinstance, revitlink, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.TotalTransform">
            <summary>
            The total transform of the RevitLinkInstance from where this LinkElement derived.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="CoordinateSystem">CoordinateSystem</returns>
            <search> link, linkedElement, total, transform, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.Element">
            <summary>
            Get the Element stored in this LinkElement. Use the Element with any nodes
            that are incompatible with the LinkElement.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="LinkElement">LinkElement</returns>
            <search> link, linkedElement, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.Document">
            <summary>
            Get the Revit API Document object from this linkElement.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="Document">Document</returns>
            <search> link, linkelement, linkedElement, document, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.BoundingBox">
            <summary>
            Get this LinkElement's bounding box at its host location.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="BoundingBox">BoundingBox</returns>
            <search> link, linkedElement, boundingbox, box, bounding, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.Location">
            <summary>
            Get the location of this LinkElement at its host location.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="Geometry">Geometry</returns>
            <search> link, linkelement, linkedElement, location, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.ElementType">
            <summary>
            Returns the FamilyType for this LinkElement. Returns null if the LinkElement
            does not have a FamilyType assigned.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="ElementType">LinkElement Type or Null.</returns>
            <search> link, linkelement, linkedElement, element, type, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.Solids">
            <summary>
            The Solids in this LinkElement at its host location.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="Solid[]">Solid[]</returns>
            <search> link, linkedElement, solid, geometry, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="P:Revit.LinkElement.Faces">
            <summary>
            The Faces in this LinkElement at its host location.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <returns name="Surface[]">Surface[]</returns>
            <search> link, face, faces, surface, linkinstance, linkelement, linkedElement, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LinkElement.#ctor(Autodesk.Revit.DB.Element,BimorphNodes.Nodes.Infrastructure.LinkInstanceAttributes)">
            <summary>
            Constructs a new <see cref="T:Revit.LinkElement"/>.
            </summary>
        </member>
        <member name="M:Revit.LinkElement.GetLocationGeometry">
            <summary>
            Returns either a point or curve to represent the location of the LinkElement, transformed
            to its host location .
            </summary>
        </member>
        <member name="M:Revit.LinkElement.GetParameterValueByName(Revit.LinkElement,System.String)">
            <summary>
            Get the value of one of the LinkElement's parameters. Use BimorphNodes
            LinkElement.OfCategory or LinkElement.ByRayBounce node to collect the LinkElement's.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="linkElement"> The link linkedElement to query.</param>
            <param name="parameterName"> The name of the parameter to obtain.</param>
            <returns name="var[]..[]">var[]..[]</returns>
            <search> get, parameter, value, name, link, element, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LinkElement.CopyToActiveDocument(System.Collections.Generic.List{Revit.LinkElement})">
            <summary>
            Copies the given LinkElements to the active document. This method performs
            re-hosting of elements where applicable.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="linkElements"> The list of LinkElements to copy to the active document..</param>
            <returns name="Element[]">Element[]</returns>
            <search>  copy, active, document, link, element, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LinkElement.OfCategory(Revit.Elements.Element,Revit.Elements.Category)">
            <summary>
            Get LinkElements from a linked Revit document (a LinkInstance) by Category. LinkElements are
            optimized for use with BimorphNodes Element and BoundingBox nodes and are compatible with
            all other Dynamo nodes that accept Elements as inputs.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="linkInstance">Input the Revit Link Instance.</param>
            <param name="category">Input the LinkElement Category.</param>
            <returns name="LinkElement[]">LinkElement[]</returns>
            <search> link, instance, revit, model, linkedElement, category, elements, revitlink, of, linkelement, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.LinkElement.ByRayBounce(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,Revit.Elements.Views.View3D,Revit.Elements.Category,System.Boolean)">
            <summary>
            Returns LinkElements and position hit by a ray bounce from the specified origin point and direction.
            &#xD;&#xA;&#xD;&#xA;LinkElements are optimized for use with BimorphNodes Element and BoundingBox
            nodes and are compatible with all nodes that accept Elements as inputs.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="origin"> The origin of the ray.</param>
            <param name="direction"> The direction of the ray. Normalized vectors can be input.</param>
            <param name="view3D"> Input a 3D view to define the context for the ray bounce.</param>
            <param name="category">
            Input an optional category to filter the elements hit by the ray bounce. Leave unconnected to
            return all linkedElement category types hit by the ray bounce.
            </param>
            <param name="findNearest">
            An optional input to find only the nearest linked element hit by the ray point when set to true.
            </param>
            <returns name="LinkElement[]"> LinkElement[]</returns>
            <returns name="Point[]"> Point[]</returns>
            <search> link, instance, revit, model, linkedElement, elements, ray, bounce, linkelement, bimorph, bimorphNodes, nearest </search>
        </member>
        <member name="M:Revit.LinkElement.ToString">
            <summary>
            Overriding ToString controls what is displayed whenever the object's string representation
            is used. For example, ToString is called when the object is displayed in a Watch node.
            </summary>
            <returns>
            The string representation of the LinkElement object, displaying the RevitLinkInstance
            name and LinkElement name and BoundingBox.
            </returns>
        </member>
        <member name="T:Revit.Schedule">
            <summary>
            Provides methods for extracting Revit Schedule data as strings. Supports Electric Panel and component Schedules.
            The methods must use the Dynamo's LinkElement base class rather than the ViewSchedule sub class type as Dynamo's
            object model doesn't support Electric Panel Schedules and returns them from a different namespace to the
            Revit.ElementIds.View namespace.
            </summary>
        </member>
        <member name="M:Revit.Schedule.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.Schedule.ValidateInputs(BimorphNodes.Nodes.Infrastructure.ScheduleWrapper)">
            <summary>
            Validates the inputs to the nodes.
            </summary>
        </member>
        <member name="M:Revit.Schedule.GetData(Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Gets all the table data from a given Schedule or Electric Panel Schedule as strings. Supports Periodic
            updating.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="scheduleView">
            Input the Revit schedule view.
            </param>
            <param name="removeHeading">
            Set to True to remove the headings from the schedule data. Has no effect on Electric Panel
            Schedules or if schedule headings are not visible.
            </param>
            <param name="refresh">y
            Input a bool and switch states to refresh the data or set Dynamo to periodic updating.
            </param>
            <returns name="string[][]">String[][]</returns>
            <search> get, schedule, data, table, bimorph, bimorphNodes</search>
        </member>
        <member name="M:Revit.Schedule.GetDataColumns(Revit.Elements.Element,System.Collections.Generic.List{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Gets all the table data from a given schedule as strings. Column indexes start at 0. Supports Periodic
            updating.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="scheduleView">Input the Revit schedule view.</param>
            <param name="columnIndexes">Input the index or indexes of the required columns. Indexes start from 0.</param>
            <param name="removeHeading">
            Set to True to remove the headings from the schedule data. Has no effect on Electric Panel Schedules or
            if schedule headings are not visible.
            </param>
            <param name="refresh">Input a bool and switch states to refresh the data or set Dynamo to periodic updating.</param>
            <returns name="string[][]">String[][]</returns>
            <search> get, schedule, data, table, column, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.Schedule.GetDataRows(Revit.Elements.Element,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Gets all the table data from a given schedule as strings. Row indexes start at 0. Supports Periodic
            updating.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="scheduleView">Input the Revit schedule view.</param>
            <param name="rowIndexes">Input the index or indexes of the required rows. Indexes start from 0.</param>
            <param name="refresh">Input a bool and switch states to refresh the data or set Dynamo to periodic updating.</param>
            <returns name="string[][]">String[][]</returns>
            <search> get, schedule, data, table, row, bimorph, bimorphNodes </search>
        </member>
        <member name="T:Revit.Sheet">
            <summary>
            Duplicate Sheets class. Includes methods that enable duplication of placed views and logic
            to maintain the existing view structure.
            </summary>
        </member>
        <member name="M:Revit.Sheet.#ctor">
            <summary>
            Default constructor set to private to prevent unwanted 'create' node from appearing in Dynamo
            after zero-touch import. 
            </summary>
        </member>
        <member name="M:Revit.Sheet.Duplicate(System.Collections.Generic.List{Revit.Elements.Views.Sheet},System.Boolean,System.Boolean,System.Int32,System.String,System.String)">
            <summary>
            Duplicate selected Sheets with options to control if placed Views are duplicated and the method of
            duplication.&#xD;&#xA;&#xD;&#xA;The Sheet output returns successfully duplicated Sheets otherwise
            it returns the same sheet if it cant be duplicated. The report output logs any Sheets and/or Views
            that fail to duplicate. &#xD;&#xA;&#xD;&#xA;WARNING: if you use any of the Dynamo category filter
            nodes you must run Dynamo in Manual Execution mode otherwise a never ending loop will be triggered.
            Revit regenerates the model when a view is duplicated which can have major performance implications.
            It is therefore recommended to duplicate in small batches of no more than 15 sheets.
            &#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support.
            </summary>
            <param name="sheets">Input the Revit Sheets to duplicate.</param>
            <param name="run">Set to True to duplicate the input Sheets.</param>
            <param name="duplicateWithViews">Set to True to duplicate placed Views on the Sheets.</param>
            <param name="duplicateOption">Input View Duplicate Option: 0 = Duplicate. 1 = WithDetailing. 2 = AsDependent.</param>
            <param name="suffix">Input a suffix to the duplicated Sheet number and View names. Leave blank to add a prefix only.</param>
            <param name="prefix">
            Enter an optional prefix at the start of the duplicated Sheet number and View names. Leave blank to add a suffix only.
            </param>
            <returns name="report[]">string[]</returns>
            <returns name="Sheet[]">Sheet[]</returns>
            <search> duplicate, sheet, sheets, views, view, viewsheet, sheetview, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.Sheet.FromSchedule(Revit.Elements.Views.ScheduleView,System.Boolean)">
            <summary>
            Returns all Sheets from a Sheet Schedule. The Sheet Number field is required in the Schedule to run.
            Supports periodic updating.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="scheduleView">Input a Sheet Schedule View.</param>
            <param name="refresh">Input a bool and switch states to refresh the data or set Dynamo to periodic updating.</param>
            <returns name="Sheet[]">Sheet[]</returns>
            <search> sheet, from, schedule, sheetschedule, sheets, bimorph, bimorphNodes </search>
        </member>
        <member name="M:Revit.Sheet.RenumberRename(Revit.Elements.Views.Sheet,System.String,System.String)">
            <summary>
            Renumber and/or rename a Revit sheet. To renumber or rename only, input an empty string
            into the unneeded input.&#xD;&#xA;&#xD;&#xA;Visit bimorph.com/bimorph-nodes for support
            </summary>
            <param name="sheet">Input a Revit sheet to renumber and/or rename.</param>
            <param name="number">Input a new sheet number. Input an empty string to rename only.</param>
            <param name="name">Input a new sheet name. Input an empty string to renumber only.</param>
            <returns name="Sheet">Sheet</returns>
            <search> renumber, rename, sheet, sheets, viewsheet, bimorph, bimorphNodes </search>
        </member>
    </members>
</doc>
