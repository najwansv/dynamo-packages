{
  "Uuid": "f24465ea-e323-444e-81de-8ea9a03debce",
  "IsCustomNode": true,
  "Category": "Ampersand",
  "Description": "Chop a list into sublists given a series of sizes.  Remaining list items after the sublists have been filled are discarded.  Remaining sublist capacity after list items are exhausted is ignored.",
  "Name": "[&] List.ChopByLengths",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Place successive items from a list into sublists of the given sizes.\r\n# This functionality now supported by the native List.Chop node.\r\n#\r\n# Colin McCrone\r\n# Twitter:  https://twitter.com/colinmccrone\r\n# LinkedIn: https://www.linkedin.com/in/colinmccrone\r\n# Updated:  2019-05-20\r\n#\r\nimport clr\r\n\r\n# Input\r\ndata = IN[0]        # 1-D list to chopped into groups\r\nbinSizes = IN[1]    # List of group sizes, ex: {2,3,1}\r\n\r\n# Initialize quantities\r\ngroups = []\r\nidxData = 0\r\nidxBins = 0\r\n\r\n# Place successive data items into sublists equal\r\n# to the sizes listed in binSizes and append to groups[]\r\nwhile idxData < len(data) and idxBins < len(binSizes):\r\n\tsublist = []\r\n\tfor j in range(int(binSizes[idxBins])):\r\n\t\tif idxData < len(data):\r\n\t\t\tsublist.append(data[idxData])\r\n\t\t\tidxData = idxData + 1\r\n\t\telse:\r\n\t\t\tbreak\r\n\tgroups.append(sublist)\r\n\tidxBins = idxBins + 1\r\n\r\n#Assign your output to the OUT variable\r\nOUT = groups",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "7a8d837090c140c48afaa698f66050af",
      "Inputs": [
        {
          "Id": "192145f3699949fc9526536b79fcc839",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f89da96b4b4a48e3b1363794de649b88",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2769130815b644c4bcccf12c56e1a8f4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "list",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "90cc8f5421594e8299443fda73bed9ec",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3f6997e1d45249e88bf4c860230ab40a",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "lengths",
        "TypeName": "int",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "7e45c5dfe95c4849a6b9ac7006c27b0d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8c50f07c08ad40eb83a4479c690626de",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "groups",
      "Id": "2709f8bd53314f2db669c2f5737e28e8",
      "Inputs": [
        {
          "Id": "94d091ac581749d2a4e4a8e7b0064a19",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "2769130815b644c4bcccf12c56e1a8f4",
      "End": "94d091ac581749d2a4e4a8e7b0064a19",
      "Id": "b851c7f695534155b435f1fdbeb86532"
    },
    {
      "Start": "3f6997e1d45249e88bf4c860230ab40a",
      "End": "192145f3699949fc9526536b79fcc839",
      "Id": "a6a35e6fdcc44d02b0ae65c9b591a934"
    },
    {
      "Start": "8c50f07c08ad40eb83a4479c690626de",
      "End": "f89da96b4b4a48e3b1363794de649b88",
      "Id": "11457419dd8d447daa04f888a8f01e0e"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -12.38207891058093,
      "EyeY": 141.45714958573572,
      "EyeZ": 121.7063622754861,
      "LookX": 85.342834331298036,
      "LookY": -242.94586286395131,
      "LookZ": -198.2650967244787,
      "UpX": 0.23239564382751007,
      "UpY": 0.80901699437485641,
      "UpZ": -0.539892366627337
    },
    "NodeViews": [
      {
        "Id": "7a8d837090c140c48afaa698f66050af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 250.0,
        "Y": -5.6843418860808015E-14
      },
      {
        "Id": "90cc8f5421594e8299443fda73bed9ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 0.0,
        "Y": 0.0
      },
      {
        "Id": "7e45c5dfe95c4849a6b9ac7006c27b0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 0.0,
        "Y": 94.0
      },
      {
        "Id": "2709f8bd53314f2db669c2f5737e28e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 449.8,
        "Y": 0.0
      }
    ],
    "Annotations": [
      {
        "Id": "636354e79eb4433eab7f3e025bb1776c",
        "Title": "Colin McCrone\r\nTwitter:  @ColinMcCrone\r\nLinkedIn: https://www.linkedin.com/in/colinmccrone\r\nUpdated:  2021-05-26\r\n\r\nAn example Dynamo script for how to use this node can be found in the 'extra' folder where the package files are stored. To find it, go to the Packages Menu and select \"Manage Packages.\" Where Ampersand is listed, open the drop-down menu link at the right and choose \"Show Root Directory.\" Open the \"extra\" folder to find the example file called AmpersandExamples.dyn.",
        "Nodes": [],
        "Left": -2.4220375486210912,
        "Top": -242.23097278258638,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": 332.25474644899907,
    "Y": 377.53695803592944,
    "Zoom": 1.3076413563671876
  }
}