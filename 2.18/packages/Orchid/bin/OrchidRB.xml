<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchidRB</name>
    </assembly>
    <members>
        <member name="M:Orchid.AdeskApp.Dynamo.GraphGuid">
             <summary>
             Get the guid of the current Dynamo graph file.
             </summary>
            <returns name="string">Path.</returns>
             <search>app,application,graph,guid</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.ApplicationFolder">
            <summary>
            Get the Dynamo application folder.
            </summary>
            <returns name="string">Dynamo application folder.</returns>
            <search>app,application,folder,storage,location,root</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.Version">
            <summary>
            Get the Dynamo version number inclusive the subversion number.
            </summary>
            <returns name="string">Version build.</returns>
            <search>app,application,version</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.VersionBuild">
            <summary>
            Get the Dynamo version build.
            </summary>
            <returns name="string">Version build.</returns>
            <search>app,application,version,build</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.PackagesPath">
            <summary>
            Get the path to the Dynamo package root folder.
            </summary>
            <returns name="string">Path.</returns>
            <search>app,application,package,path,root</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.DefinitionsPath">
            <summary>
            Get the path to the Dynamo definition root folder.
            </summary>
            <returns name="string">Path.</returns>
            <search>app,application,definition,path,root</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.GraphPath">
             <summary>
             Get the path to the current Dynamo graph file.
             </summary>
            <returns name="string">Path.</returns>
             <search>app,application,graph,path</search>
        </member>
        <member name="M:Orchid.AdeskApp.Dynamo.EnumByName(System.String,System.String)">
            <summary>
            Get Dynamo enumeration value by name and enumeration type.
            </summary>
            <param name="enumType">Name of the Dynamo enumeration type.</param>
            <param name="valueName">Name of the enumeration value.</param>
            <returns name="Enum">Dynamo enumeration type.</returns>
            <search>enum,enumeration,revit,type,name</search>
        </member>
        <member name="T:Orchid.AdeskApp.AlterForge">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.AdeskApp.SpecType.Name(Revit.Elements.SpecType)">
            <summary>
            Get (parameter) spec type name.
            Note: This function does only work using english/international spec type names!
            </summary>
            <param name="type">SpecType as Dynamo type.</param>
            <returns name="string">Name of the spec type</returns>
            <search>forge,parameter,type,spec</search>
        </member>
        <member name="M:Orchid.AdeskApp.SpecType.ByName(System.String)">
            <summary>
            Get (parameter) spec type by name.
            Note: This function does only work using english/international spec type names!
            </summary>
            <param name="string">Name of the spec type</param>
            <returns name="SpecType">SpecType as Dynamo type.</returns>
            <search>forge,parameter,type,spec</search>
        </member>
        <member name="M:Orchid.AdeskApp.GroupType.Name(Revit.Elements.GroupType)">
            <summary>
            Get (parameter) group type name.
            Note: This function does only work using english/international group type names!
            </summary>
            <param name="type">GroupType as Dynamo type.</param>
            <returns name="string">Name of the group type</returns>
            <search>forge,parameter,group</search>
        </member>
        <member name="M:Orchid.AdeskApp.GroupType.ByName(System.String)">
            <summary>
            Get (parameter) group type by name.
            Note: This function does only work using english/international group type names!
            </summary>
            <param name="string">Name of the group type.</param>
            <returns name="GroupType">GroupType as Dynamo type.</returns>
            <search>forge,parameter,group</search>
        </member>
        <member name="M:Orchid.AdeskApp.Language.All">
            <summary>
            Get all Revit language.
            </summary>
            <returns name="Language">Revit language as Autodesk type.</returns>
            <search>language,revit,all</search>
        </member>
        <member name="M:Orchid.AdeskApp.Language.ByName(System.String)">
            <summary>
            Get Revit language by name.
            </summary>
            <param name="name">Name of the language as string.</param>
            <returns name="Language">Revit language as Autodesk type.</returns>
            <search>language,revit,name</search>
        </member>
        <member name="M:Orchid.AdeskApp.Language.Culture(System.Object)">
            <summary>
            Get culture by Revit language.
            </summary>
            <param name="language">Revit language as Autodesk type.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>language,revit,culture</search>
        </member>
        <member name="M:Orchid.AdeskApp.Revit.ApplicationFolder">
            <summary>
            Get the Revit application folder.
            </summary>
            <returns name="string">Revit application folder.</returns>
            <search>app,application,revit,folder</search>
        </member>
        <member name="P:Orchid.AdeskApp.Revit.Format">
            <summary>
            Get the Revit format indicator (the major release version).
            </summary>
            <returns name="string">Format number.</returns>
            <search>app,application,revit,format</search>
        </member>
        <member name="P:Orchid.AdeskApp.Revit.Version">
            <summary>
            Get the Revit version number inclusive the subversion number.
            </summary>
            <returns name="string">Version number.</returns>
            <search>app,application,revit,version</search>
        </member>
        <member name="P:Orchid.AdeskApp.Revit.VersionBuild">
            <summary>
            Get the Revit version build.
            </summary>
            <returns name="string">Version build.</returns>
            <search>app,application,revit,version,build</search>
        </member>
        <member name="P:Orchid.AdeskApp.Revit.Username">
            <summary>
            Get the Revit current user name.
            </summary>
            <returns name="string">User name.</returns>
            <search>app,application,revit,user,name</search>
        </member>
        <member name="M:Orchid.AdeskApp.Revit.PatchCulture(Autodesk.Revit.ApplicationServices.LanguageType)">
            <summary>
            Get Revit Culture
            </summary>
        </member>
        <member name="P:Orchid.AdeskApp.Revit.Culture">
            <summary>
            Get current culture set in Revit.
            </summary>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>app,application,revit,culture</search>
        </member>
        <member name="M:Orchid.AdeskApp.Revit.Language">
            <summary>
            Get the Revit current language.
            </summary>
            <returns name="Language">Current language.</returns>
            <search>app,application,revit,language</search>
        </member>
        <member name="M:Orchid.AdeskApp.Revit.EnumByName(System.String,System.String)">
            <summary>
            Get Autodesk Revit enumeration value by name and enumeration type.
            </summary>
            <param name="enumType">Name of the Revit enumeration type.</param>
            <param name="valueName">Name of the enumeration value.</param>
            <returns name="Enum">Revit enumeration type.</returns>
            <search>enum,enumeration,revit,type,name</search>
        </member>
        <member name="M:Orchid.Common.Clipboard.CopyElementTo(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Cut element to clipboard if idle is set to true (default).
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="idle">Set idle?</param>
            <search>clipboard,copy,element</search>
        </member>
        <member name="M:Orchid.Common.Clipboard.CutElementTo(System.Collections.IList,System.Boolean)">
            <summary>
            Cut element to clipboard if idle is set to true (default).
            </summary>
            <param name="element">Element as Dynamo type.</param>
            <param name="idle">Set idle?</param>
            <search>clipboard,cut,element</search>
        </member>
        <member name="M:Orchid.Common.Clipboard.AlignedToSamePlace(System.Boolean)">
            <summary>
            Paste element from clipboard (aligned to same place), if idle is set to true.
            </summary>
            <param name="idle">Set idle?</param>
            <search>clipboard,copy,element,same,place</search>
        </member>
        <member name="M:Orchid.Common.Clipboard.CopyTo(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Copy object to Clipboard. Can copy objects from a 1D list, but not from 2D...nD!
            If List Level is used, then will the last item be available in the clipboard.
            </summary>
            <param name="object">Object(s) to copy.</param>
            <param name="id">Add element id (if exists) to output?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>clipboard,copy</search>
        </member>
        <member name="M:Orchid.Common.Directory.CloudToLocal(System.String,System.Int32)">
            <summary>
            Convert the cloud path to a local path relative to the document containing the cloud link.
            Note: Integer given for step is relatively steps from where current document is located, 
            "0" is the same directory, "1" is a step up relative to current directory.
            </summary>
            <param name="path">Cloud path to the document.</param>
            <param name="step">Step relative to current directory.</param>
            <returns name="Directory">Directory object.</returns>
            <search>directory,revit,cloud,local,path</search>
        </member>
        <member name="P:Orchid.Common.Directory.Current">
            <summary>
            Get current directory.
            </summary>
            <returns name="Directory">Directory as string.</returns>
            <search>directory,current</search>
        </member>
        <member name="M:Orchid.Common.Directory.FromPath(System.String)">
            <summary>
            Get a directory string from a path. 
            If the directory doesn't exist it will be created!
            </summary>
            <param name="path">Path to the directory.</param>
            <returns name="Directory">Directory as string.</returns>
            <search>directory,path</search>
        </member>
        <member name="M:Orchid.Common.Directory.SubPath(System.String,System.Int32)">
            <summary>
            Remove subfolders from directory path by integer value.
            </summary>
            <param name="directory">Directory path as string.</param>
            <param name="remove">Number of subfolders to remove from directory path.</param>
            <returns name="Directory">Directory as string.</returns>
            <search>directory,path,sub,part</search>
        </member>
        <member name="M:Orchid.Common.Directory.Contents(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get the files in a directory and its subdirectories.
            Use string for extension type, default is * for all files!
            If files are are readonly but not hidden, are they included.
            If files are both hidden or readonly files
            (and thereby system files) are they left out.
            </summary>
            <param name="directory">Directory as string to get contents from.</param>
            <param name="searchString">Search string used to filter results.</param>
            <param name="deepSearch">Apply searching in all subfolders?</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="File">File as string.</returns>
            <search>directory,content,sub,part</search>
        </member>
        <member name="M:Orchid.Common.File.Info(System.String)">
            <summary>
            Get file(s) information.
            </summary>
            <param name="file">File incl. path.</param>
            <returns name="info">File information.</returns>
            <search>file,info,information</search>
        </member>
        <member name="M:Orchid.Common.File.CloudToLocal(System.String,System.Int32)">
            <summary>
            Convert the cloud path to a local path relative to the document containing the cloud link.
            Note: Integer given for step is relatively steps from where current document is located, 
            "0" is the same directory, "1" is a step up relative to current directory.
            </summary>
            <param name="path">Cloud path to the document.</param>
            <param name="step">Step relative to current directory.</param>
            <returns name="File">File object.</returns>
            <search>file,cloud,local,convert</search>
        </member>
        <member name="M:Orchid.Common.File.FromPath(System.String)">
            <summary>
            Get file from a path.
            </summary>
            <param name="path">Path to the file.</param>
            <returns name="File">File as string.</returns>
            <search>file,path</search>
        </member>
        <member name="M:Orchid.Common.File.Rename(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Rename file.
            </summary>
            <param name="directory">The directory path as string.</param>
            <param name="extension">The file extension.</param>
            <param name="sourceName">The name of the source file.</param>
            <param name="targetName">The name of the target file.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="File">File as string.</returns>
            <search>file,rename</search>
        </member>
        <member name="M:Orchid.Common.File.MergePDF(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Merge list of PDF documents.
            </summary>
            <param name="documents">List of PDF documents to be merged.</param>
            <param name="filePath">Give a valid path for the merged PDF output.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>file,pdf,merge,join,combine</search>
        </member>
        <member name="M:Orchid.Common.Object.ToOrchidType(System.Object)">
            <summary>
            Convert Autodesk Revit object to Orchid object.
            </summary>
            <param name="object">Object as Revit type.</param>
            <returns name="Object">Object as Orchid type.</returns>
            <search>object,convert,dynamo,orchid</search>
        </member>
        <member name="M:Orchid.Common.Object.ToDynamoType(System.Object)">
            <summary>
            Convert Autodesk Revit object to Dynamo Revit object.
            </summary>
            <param name="object">Object as Orchid/Revit type.</param>
            <returns name="Object">Object as Dynamo type.</returns>
            <search>object,convert,dynamo,orchid</search>
        </member>
        <member name="M:Orchid.Common.Object.ToRevitType(System.Object)">
            <summary>
            Convert Orchid and Dynamo Revit object to Autodesk Revit object.
            </summary>
            <param name="object">Object as Orchid/Dynamo type.</param>
            <returns name="Object">Object as Revit type.</returns>
            <search>object,convert,dynamo,orchid,revit</search>
        </member>
        <member name="M:Orchid.Common.Object.Hashing(System.Object)">
            <summary>
            Input hassing value.
            Note: Hasing should not be mix up with guid or unique id!
            https://en.wikipedia.org/wiki/Hash_function
            </summary>
            <param name="object">An object.</param>
            <returns name="integer">Hashing value.</returns>
            <search>object,hash</search>
        </member>
        <member name="M:Orchid.Common.Object.TypeOf(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="M:Orchid.Common.Object.ClassOf(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            Returns the object if it is by the input class.
            Note: Dynamo elements may fail due to the existence of the 
            type "UnknownElement", in this case, use Element.ClassOf instead.
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="object">An object.</param>
            <param name="class">Class as System.RuntimeType.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Object">An object.</returns>
            <search>object,class,type</search>
        </member>
        <member name="M:Orchid.Common.Object.EnumByName(System.String,System.String,System.String)">
            <summary>
            Get assembly enumeration value by name and enumeration type.
            </summary>
            <param name="assemblyName">Name of the loaded assembly.</param>
            <param name="enumType">Name of the assembly enumeration type.</param>
            <param name="valueName">Name of the enumeration value.</param>
            <returns name="Enum">Assembly enumeration type.</returns>
            <search>enum,enumeration,assembly,type,name</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.ByName(System.String)">
            <summary>
            Get PDF export setting by name.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="ExportSetting">Export setting as Dynamo type.</returns>
            <search>pdf,export,print,setting</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.InDocument(Revit.Application.Document)">
            <summary>
            Get PDF export settings in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="ExportSetting">Export setting as Dynamo type.</returns>
            <search>pdf,export,print,setting</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.CreateSetting(System.String,System.Enum,System.Enum,System.Enum,System.Enum,System.Double[],System.Enum,System.Int32)">
            <summary>
            Set pdf export setting. Note: If "Default" paper size is selected, then will no other
            options be set. The entire setting will be set as the builtin default option/setting!
            </summary>
            <param name="name">name to create for the export setting.</param>
            <param name="paperZize">Paper size as enumeration type. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as enumeration type.</param>
            <param name="paperPlacement">Paper placement as enumeration type.</param>
            <param name="marginType">Print margin as enumeration type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as enumeration type.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="ExportSetting">PDF export setting.</returns>
            <search>pdf,export,print,setting,create</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.ChangeSetting(Orchid.Common.PDFexport,System.Enum,System.Enum,System.Enum,System.Enum,System.Double[],System.Enum,System.Int32)">
            <summary>
            Change pdf export setting. Note: If "Default" paper size is selected, then will no other
            options be set. The entire setting will be set as the builtin default option/setting!
            </summary>
            <param name="exportSetting">PDF export setting as Orchid/Dynamo type.</param>
            <param name="paperZize">Paper size as enumeration type. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as enumeration type.</param>
            <param name="paperPlacement">Paper placement as enumeration type.</param>
            <param name="marginType">Print margin type as enumeration type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as enumeration type.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="PrintSetting">PrintSetting.</returns>
            <search>pdf,export,print,setting,change</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.SetOptions(Orchid.Common.PDFexport,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Enum,System.Enum)">
            <summary>
            Set pdf export options.
            </summary>
            <param name="exportSetting">PDF export setting as Orchid/Dynamo type.</param>
            <param name="viewLinksinBlue">View links in blue? (Color prints only)</param>
            <param name="hideReforWorkPlanes">Hide ref/work planes?</param>
            <param name="hideUnreferencedViewTags">Hide unreferenced view tags?</param>
            <param name="maskCoincidentLines">Region edges mask coincident lines?</param>
            <param name="hideScopeBoxes">Hide scope boxes?</param>
            <param name="hideCropBoundaries">Hide crop boundaries?</param>
            <param name="replaceHalftoneWithThinLines">Replace halftone with thin lines?</param>
            <param name="createOutputUsing">Create output using: Use vector (false) or raster (true) processing?</param>
            <param name="rasterQuality">Appearance: Raster quality as enumeration type.</param>
            <param name="colorDepth">Appearance: Colors as enumeration type.</param>
            <returns name="ExportSetting">PDF export setting.</returns>
            <search>pdf,export,print,option,edit</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.DeleteSetting(Orchid.Common.PDFexport)">
            <summary>
            Delete pdf export setting.
            </summary>
            <param name="exportSetting">PDF export setting as Orchid/Dynamo type.</param>
            <search>pdf,export,print,setting,delete</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.PaperSize">
            <summary>
            Get PDF export paper sizes.
            </summary>
            <returns name="PaperSize">Paper sizes as string values.</returns>
            <search>pdf,export,print,paper,size</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.ByView(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean,System.String,System.String,Orchid.Common.PDFexport,System.Enum)">
            <summary>
            PDF export by view sheet set. 
            Note. If combined into one file is set to false, 
            then the naming rule set in the "exportSetting" is used.
            </summary>
            <param name="view">View to export as Dynamo type (default: Active View).</param>
            <param name="combine">Combine into one file?</param>
            <param name="fileName">Give a valid file name for the pdf export output.</param>
            <param name="pathName">Give a valid path name for the pdf export output.</param>
            <param name="exportSetting">PDF export setting as Orchid/Dynamo type.</param>
            <param name="exportQuality">enumeration type: Export quality as enumeration type.</param>
            <search>pdf,export,print,view</search>
        </member>
        <member name="M:Orchid.Common.PDFexport.ByViewSheetSet(Revit.Elements.Element,System.Boolean,System.String,System.String,Orchid.Common.PDFexport,System.Enum)">
            <summary>
            PDF export by view sheet set. 
            Note. If combined into one file is set to false, 
            then the naming rule set in the "exportSetting" is used.
            </summary>
            <param name="viewSheetSet">ViewSheetSet to export as Dynamo type.</param>
            <param name="combine">Combine into one file?</param>
            <param name="fileName">Give a valid file name for the pdf export output.</param>
            <param name="pathName">Give a valid path name for the pdf export output.</param>
            <param name="exportSetting">PDF export setting as Orchid/Dynamo type.</param>
            <param name="exportQuality">Appearance: Export quality as Revit enumeration type.</param>
            <search>pdf,export,print,view,sheet</search>
        </member>
        <member name="M:Orchid.Common.Print.DynamoElementToString(System.Object)">
            Try to change this method!!!
            Takes string and Revit.Elements.Element, return string
        </member>
        <member name="M:Orchid.Common.Print.InDocument(Revit.Application.Document)">
            <summary>
            Get printer settings in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="PrintSetting">Print setting as Dynamo type.</returns>
            <search>pdf,export,print,setting</search>
        </member>
        <member name="M:Orchid.Common.Print.PaperSize(System.String)">
            <summary>
            Get printer paper sizes.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <returns name="PaperSize">Paper sizes as string values.</returns>
            <search>print,paper,size</search>
        </member>
        <member name="M:Orchid.Common.Print.ByView(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Enum,System.Collections.Generic.List{Revit.Elements.Element},System.Object)">
            <summary>
            Print by view. --> Note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            Furthermore, if print to file is selected, then please check windows
            printer settings to verify if print to file is supported!
            Adobe PDF is NOT preset to do this!
            </summary>
            <param name="printer">Printer name as string. 
            If value is not set is default printer selected.</param>
            <param name="combine">Combine into one file? (Print to file must be set to true)</param>
            <param name="file">Print to file?</param>
            <param name="fileName">Give a valid path and filename for the print output.
            If value is not set is the user asked later!</param>
            <param name="printRange">Print range as enumeration type.</param>
            <param name="view">View to print as Dynamo type (default: Active View).</param>
            <param name="printSetting">Printer setting as string or Dynamo type.</param>
            <search>print,view</search>
        </member>
        <member name="M:Orchid.Common.Print.ByViewSheetSet(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Revit.Elements.Element,System.Object)">
            <summary>
            Print by view sheet set. --> Note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            Furthermore, if print to file is selected, then please check windows
            printer settings to verify if print to file is supported!
            Adobe PDF is NOT preset to do this!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="combine">Combine into one file? (Print to file must be set to true)</param>
            <param name="file">Print to file?</param>
            <param name="fileName">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="viewSheetSet">ViewSheetSet to print as Dynamo type.</param>
            <param name="printSetting">Printer setting as string or Dynamo type.</param>
            <search>print,view,sheet</search>
        </member>
        <member name="M:Orchid.Common.Print.CreateSetting(System.String,System.String,System.String,System.Enum,System.Enum,System.Enum,System.Double[],System.Enum,System.Int32)">
            <summary>
            Set print setting.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="name">name to create for the print setting.</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as enumeration type.</param>
            <param name="paperPlacement">Paper placement as enumeration type.</param>
            <param name="marginType">Print margin as enumeration type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as enumeration type.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="PrintSetting">Print setting.</returns>
            <search>print,setting,create</search>
        </member>
        <member name="M:Orchid.Common.Print.ChangeSetting(System.String,System.Object,System.String,System.Enum,System.Enum,System.Enum,System.Double[],System.Enum,System.Int32)">
            <summary>
            Change print setting.
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected.</param>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected.</param>
            <param name="pageOrientation">Page orientation as enumeration type.</param>
            <param name="paperPlacement">Paper placement as enumeration type.</param>
            <param name="marginType">Print margin as enumeration type.</param>
            <param name="margin">Print margin value as double.</param>
            <param name="zoomType">Zoom type as enumeration type.</param>
            <param name="zoom">Zoom value as integer.</param>       
            <returns name="PrintSetting">Print setting.</returns>
            <search>print,setting,change</search>
        </member>
        <member name="M:Orchid.Common.Print.DeleteSetting(System.Object)">
            <summary>
            Delete print setting.
            </summary>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
            <search>print,setting,delete</search>
        </member>
        <member name="M:Orchid.Common.Print.SetOptions(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Enum,System.Enum,System.Enum)">
            <summary>
            Set printer options.
            </summary>
            <param name="printSetting">printer setting as string or Dynamo type.</param>
            <param name="viewLinksinBlue">View links in blue? (Color prints only)</param>
            <param name="hideReforWorkPlanes">Hide ref/work planes?</param>
            <param name="hideUnreferencedViewTags">Hide unreferenced view tags?</param>
            <param name="maskCoincidentLines">Region edges mask coincident lines?</param>
            <param name="hideScopeBoxes">Hide scope boxes?</param>
            <param name="hideCropBoundaries">Hide crop boundaries?</param>
            <param name="replaceHalftoneWithThinLines">Replace halftone with thin lines?</param>
            <param name="hiddenLineViews">Hidden line views: Remove lines using vector or raster as enumeration type.</param>
            <param name="rasterQuality">Appearance: Raster quality as enumeration type.</param>
            <param name="colorDepth">Appearance: Colors as enumeration type.</param>
            <returns name="PrintSetting">Print setting.</returns>
            <search>print,option</search>
        </member>
        <member name="P:Orchid.Common.Global.Culture.Name">
            <summary>
            Culture name.
            </summary>
            <returns name="string">String value.</returns>
            <search>culture,language,name</search>
        </member>
        <member name="P:Orchid.Common.Global.Culture.DisplayName">
            <summary>
            Culture display name.
            </summary>
            <returns name="string">String value.</returns>
            <search>culture,language,name,display,show</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="P:Orchid.Common.Global.Culture.Current">
            <summary>
            Get current culture in Windows (.Net) system.
            </summary>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,language,current</search>
        </member>
        <member name="P:Orchid.Common.Global.Culture.Invariant">
            <summary>
            Get invariant culture.
            </summary>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,language,current</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.All">
            <summary>
            Get all culture(s) in Windows (.Net) system.
            </summary>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,language,all,windows,system</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.ByName(System.String)">
            <summary>
            Get culture by name.
            </summary>
            <param name="name">Name of the culture as string.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,language,name,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.Edit(Orchid.Common.Global.Culture)">
            <summary>
            Edit (create) culture for modification(s).
            </summary>
            <param name="culture">Culture as Orchid type.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,language,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetNumber(Orchid.Common.Global.Culture,System.Int32,System.String,System.String)">
            <summary>
            Set number values in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used! 
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="digit">Number of digits, default is two.</param>
            <param name="decimal">Decimal separator.</param>
            <param name="group">Grouping seperator.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,number,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetNumberSymbol(Orchid.Common.Global.Culture,System.String,System.String,System.String)">
            <summary>
            Set number symbols in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="negative">Negative symbol.</param>
            <param name="positiveInfinity">Positive infinity symbol.</param>
            <param name="negativeInfinity">Negative infinity symbol.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,number,edit,create,new,symbol</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetPercentage(Orchid.Common.Global.Culture,System.Int32,System.String,System.String)">
            <summary>
            Set percentage values in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="digit">Number of digits, default is two.</param>
            <param name="decimal">Decimal separator.</param>
            <param name="group">Grouping seperator.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,percentage,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetPercentageSymbol(Orchid.Common.Global.Culture,System.String,System.String)">
            <summary>
            Set percentage symbols in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="percent">Percent symbol.</param>
            <param name="permille">Permille symbol.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,percentage,edit,create,new,symbol</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetCurrency(Orchid.Common.Global.Culture,System.Int32,System.String,System.String)">
            <summary>
            Set currency values in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="digit">Number of digits, default is two.</param>
            <param name="decimal">Decimal separator.</param>
            <param name="group">Grouping seperator.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,currency,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetCurrencySymbol(Orchid.Common.Global.Culture,System.String)">
            <summary>
            Set currency values in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="symbol">Currency symbol.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,currency,edit,create,new,symbol</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetCalendar(Orchid.Common.Global.Culture,System.String,System.String,System.String,System.String)">
            <summary>
            Set calendar in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="firstDay">First day of the week.</param>
            <param name="weekRule">Calendar week rule.</param>
            <param name="monthDay">Month and day pattern.</param>
            <param name="yearMonth">Year and month pattern.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,calendar,edit,create,new,year,month,day</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetDateTime(Orchid.Common.Global.Culture,System.String)">
            <summary>
            Set date and time patterns in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="full">Full date and time pattern.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,date,time,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetDate(Orchid.Common.Global.Culture,System.String,System.String,System.String)">
            <summary>
            Set date patterns in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="separator">Date separator.</param>
            <param name="short">Short date pattern.</param>
            <param name="long">Long date pattern.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,date,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.Culture.SetTime(Orchid.Common.Global.Culture,System.String,System.String,System.String)">
            <summary>
            Set time patterns in given culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            Default culture is also applied as modificable!
            </summary>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="separator">Time separator.</param>
            <param name="short">Short time pattern.</param>
            <param name="long">Long time pattern.</param>
            <returns name="Culture">Culture as Orchid type.</returns>
            <search>culture,time,edit,create,new</search>
        </member>
        <member name="M:Orchid.Common.Global.DateTime.Now(Orchid.Common.Global.Culture)">
            <summary>
            Culture system date and time.
            </summary>
            <param name="culture">Culture as Orchid type, default (null) is current culture.</param>
            <returns name="dateTime">DateTime representing the present time</returns>
            <search>date,time,now</search>
        </member>
        <member name="M:Orchid.Common.Global.DateTime.Today(Orchid.Common.Global.Culture)">
            <summary>
            Culture system date in short form.
            </summary>
            <param name="culture">Culture as Orchid type, default (null) is current culture.</param>
            <returns name="dateTime">DateTime representing today</returns>
            <search>date,time,day,today,now</search>
        </member>
        <member name="M:Orchid.Common.Data.ExportCSV(System.String,System.String,Orchid.Common.Global.Culture,System.Object[][])">
            <summary>
            Write a list of lists, using a selected delimiter, into a file using a CSV format.
            Outer list represents rows, inner lists represent columns. 
            Take value as integer, double and/or string according to the culture.
            Note: Default culture (none provided) is Windows system default culture!
            </summary>
            <param name="filePath">File path to the CSV file.</param>
            <param name="delimiter">Add delimiter character.</param>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="data">List of lists to write into CSV.</param>
            <returns name="Data">Data written to the CSV file.</returns>
            <search>data,csv,comma,write,text,double,integer</search>
        </member>
        <member name="M:Orchid.Common.Data.ImportCSV(System.String,System.String,Orchid.Common.Global.Culture)">
            <summary>
            Imports data from a CSV file, using a selected delimiter and put the items
            into a list and transpose it if needed.
            Return value as integer, double and/or string according to the culture.
            Note: Default culture (none provided) is Windows system default culture!
            </summary>
            <param name="filePath">File path to the CSV file.</param>
            <param name="delimiter">Add delimiter character.</param>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <returns name="Data">Rows of data from the CSV file.</returns>
            <search>data,csv,comma,read,text,double,integer</search>
        </member>
        <member name="M:Orchid.Common.DataStream.Await(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Await a data stream before passing another data stream.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="waitFor">Data object to wait for.</param>
            <returns name="pass">Passed data.</returns>
            <search>data,stream,wait,pass,passthrough</search>
        </member>
        <member name="M:Orchid.Common.DataStream.Circut(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Set a state (true/false) to pass a data stream in a circut.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="state">Set a bool value for the state!</param>
            <returns name="pass">Passed data.</returns>
            <search>data,stream,circut,pass,passthrough</search>
        </member>
        <member name="M:Orchid.Common.DataStream.Timer(System.Collections.IEnumerable,System.Nullable{System.DateTime})">
            <summary>
            Measure the time via passing a data stream to verify computational processing.
            </summary>
            <param name="pass">Data to pass.</param>
            <param name="dateTime">Input date time.</param>
            <returns name="pass">Passed data.</returns>
            <returns name="DateTime">Output date time.</returns>
            <returns name="TimeSpan">Time span (time elapsed).</returns>
            <search>data,stream,timer</search>
        </member>
        <member name="M:Orchid.Common.List.AllTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Verify if all items in the given list has a true value.
            </summary>
            <param name="list">List to be checked whether all items are true!?</param>
            <returns name="boolean">Whether all items are true.</returns>
            <search>list,test,all,true,istrue</search>
        </member>
        <member name="M:Orchid.Common.List.AnyTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Verify if any items in the given list has a true value.
            </summary>
            <param name="list">List to be checked whether any items are true!?</param>
            <returns name="boolean">Whether any items are true.</returns>
            <search>list,test,any,true,istrue</search>
        </member>
        <member name="M:Orchid.Common.List.AllFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Verify if all items in the given list has a false value.
            </summary>
            <param name="list">List to be checked whether all items are false!?</param>
            <returns name="boolean">Whether all items are false.</returns>
            <search>list,test,all,false,isfalse</search>
        </member>
        <member name="M:Orchid.Common.List.AnyFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Verify if any items in the given list has a false value.
            </summary>
            <param name="list">List to be checked whether any items are false!?</param>
            <returns name="boolean">Whether all items are false.</returns>
            <search>list,test,any,false,isfalse</search>
        </member>
        <member name="M:Orchid.Common.List.Search(System.Collections.IEnumerable)">
            Search values, send default if values not exist
        </member>
        <member name="M:Orchid.Common.List.CleanUtil(System.Collections.IList,System.Collections.IList)">
            Cleaning nD list
        </member>
        <member name="M:Orchid.Common.List.ReplaceUtil(System.Collections.IList,System.Collections.IList,System.Object)">
            Replacing nD list
        </member>
        <member name="M:Orchid.Common.List.Clean(System.Collections.IList,System.Collections.IList)">
            <summary>
            Clean nD list.
            </summary>
            <param name="list">List.</param>
            <param name="searchFor">Item(s) to search for.</param>
            <returns name="list">List.</returns>
            <search>list,clean,nD</search>
        </member>
        <member name="M:Orchid.Common.List.Replace(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace item in nD list.
            </summary>
            <param name="list">List.</param>
            <param name="searchFor">Item(s) to search for.</param>
            <param name="replaceWith">Replacement value.</param>
            <returns name="list">List.</returns>
            <search>list,replace,nD</search>
        </member>
        <member name="M:Orchid.Common.List.Sort(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.
            </summary>
            <param name="list">List of values.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List.</returns>
            <search>list,sort,locale,nD</search>
        </member>
        <member name="M:Orchid.Common.List.SortNatural(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.Sort elements in natural
            sort order by splitting digits from string and add leading zeros.
            http://en.wikipedia.org/wiki/Natural_sort_order
            </summary>
            <param name="list">List of values.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List.</returns>
            <search>list,sort,natural,locale,nD</search>
        </member>
        <member name="M:Orchid.Common.List.GroupByKey(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Group items into sublists based on their like sorted key values.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for sorting and grouping the items.</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="groups">List of sublists, with items grouped by like sorted key values.</returns>
            <returns name="unique keys">sorted key value corresponding to each group.</returns>
            <search>list,key,sort,group,sortbykey,groupbykey,order</search>
        </member>
        <member name="M:Orchid.Common.List.GroupBySortedKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Group items and keys into sublists based on their sorted unique key values.
            </summary>
            <param name="items">List of items to group as sublists.</param>
            <param name="keys">List of keys to group as sublists, one key per item in the input list.</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items.</param>
            <returns name="grouped items">List of sublists, with items grouped by the sorted key values.</returns>
            <returns name="grouped keys">List of sublists, with keys grouped by the sorted key values.</returns>
            <search>list,group,sort,key,sorted,groupby,order</search>
        </member>
        <member name="M:Orchid.Common.List.SortGroupByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Sort and group items into sub-lists based on their like key values.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items.</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items by their key.</param>
            <returns name="groups">List of sublists, with items grouped by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list,sort,group,sortbykey,groupbykey,</search>
        </member>
        <member name="M:Orchid.Common.List.IndexOf(System.Collections.IList,System.Object)">
            <summary>
            Returns the index (the full path) of the member in nD list.
            Note: This function works differently than the Dynamo ootb 
            node does, please examine the sample collection for usage!
            </summary>
            <param name="list">List of values.</param>
            <param name="item">the item.</param>
            <returns name="integer">List of indicies.</returns>
            <search>list,index,item,find</search>
        </member>
        <member name="M:Orchid.Common.List.ItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Get an item from the given list that's located at the 
            specified index (the full path) in nD list.
            Note: This function works differently than the Dynamo ootb 
            node does, please examine the sample collection for usage!
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="item">item in the list at the given index.</returns>
            <search>list,index,item,find,nD</search>
        </member>
        <member name="M:Orchid.Common.List.Insert(System.Collections.IList,System.Object,System.Collections.IList)">
            <summary>
            Insert an item from the given list that's located at the 
            specified index (the full path) in nD list.
            Note: This function works differently than the Dynamo ootb 
            node does, please examine the sample collection for usage!
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="item">the item to insert.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="list">List.</returns>
            <search>list,index,insert,nD</search>
        </member>
        <member name="M:Orchid.Common.List.RemoveItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Remove an item from the given list that's located at the 
            specified index (the full path) in nD list.
            Note: This function works differently than the Dynamo ootb 
            node does, please examine the sample collection for usage!
            </summary>
            <param name="list">List to fetch an item from.</param>
            <param name="index">index of the item to be fetched.</param>
            <returns name="list">List.</returns>
            <search>list,index,remove,nD</search>
        </member>
        <member name="M:Orchid.Common.List.ReplaceItemAtIndex(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace an item from the given list that's located at the 
            specified index (the full path) in nD list.
            Note: This function works differently than the Dynamo ootb 
            node does, please examine the sample collection for usage!
            </summary>
            <param name="list">List to replace an item in.</param>
            <param name="index">index of the item to be replaced.</param>
            <param name="item">the item to insert.</param>
            <returns name="list">List.</returns>
            <search>list,index,replace,nD</search>
        </member>
        <member name="M:Orchid.Common.List.FilterByNullMask(System.Collections.IList,System.Collections.IList)">
            <summary>
            Filters a sequence by looking up corresponding indices of null in a separate list.
            </summary>
            <param name="list">List to filter.</param>
            <param name="mask">List of null or value representing a mask.</param>
            <returns name="in">Items whose mask is a value.</returns>
            <returns name="out">Items whose mask is a null.</returns>
            <search>list,filter,in,out,mask,dispatch,bool</search>
        </member>
        <member name="M:Orchid.Common.List.FilterByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Filter two list items based on common key values.
            </summary>
            <param name="list1">Items from list 1.</param>
            <param name="key1">Keys from list 1.</param>
            <param name="list2">Items from list 2.</param>
            <param name="key2">Keys from list 2.</param>
            <returns name="listA">ListA.</returns>
            <returns name="listB">ListB.</returns>
            <returns name="key">Key.</returns>
            <search>list,filter,key</search>
        </member>
        <member name="M:Orchid.Common.List.SummationByKey(System.Collections.IList,System.Collections.IList)">
            <summary>
            Summarize items and group by key values.
            </summary>
            <param name="list">List of items as int and double to group and summarize as sublists.</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items.</param>
            <returns name="summarized groups">List of sublist, with items grouped and summarized by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list,group,summarize,summation,key</search>
        </member>
        <member name="M:Orchid.Common.List.Join(System.Collections.IList[])">
            <summary>
            Concatenates all given nD lists into a joined nD list.
            </summary>
            <param name="lists">Lists to join.</param>
            <returns name="list">Joined list.</returns>
            <search>list,join,merge,concatenate,nD</search>
        </member>
        <member name="M:Orchid.Common.List.GroupByEqual(System.Collections.IList)">
            <summary>
            Group items into sub-lists based on being equal.
            </summary>
            <param name="list">List of items to group as sublists.</param>
            <returns name="groups">List of sublist, with items grouped by like key values.</returns>
            <returns name="unique keys">key value corresponding to each group.</returns>
            <search>list,group,equal,same</search>
        </member>
        <member name="M:Orchid.Common.List.IncrementalCount(System.Collections.IList)">
            <summary>
            Count list items and return a list of incremented integers. 
            Note: The incremental count function does not fail null items
            or empty lists, both will be counted as valid items!
            </summary>
            <param name="list">List of items.</param>
            <returns name="list">List of incremented integers.</returns>
            <search>list,increment,count</search>
        </member>
        <member name="M:Orchid.Common.Math.Random(System.Int32)">
            <summary>
            Generates a random double in the given range (0, x).
            </summary>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">Random number in the given range (0, x).</returns>
            <search>math,random</search>
        </member>
        <member name="M:Orchid.Common.Math.RandomList(System.Int32,System.Int32)">
            <summary>
            Produces a list containing the given amount of random doubles in the given range (0, x).
            </summary>
            <param name="amount">Amount of random numbers the result list will contain.</param>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">List of random numbers in the given range (0, x).</returns>
            <search>math,random,list</search>
        </member>
        <member name="M:Orchid.Common.Math.Addition(System.Double[])">
            <summary>
            Addition of input values.
            </summary>
            <param name="values">value to use.</param>
            <returns name="double">The result.</returns>
            <search>math,opperator,adjustable input,add,plus,addition,+</search>
        </member>
        <member name="M:Orchid.Common.Math.Subtraction(System.Double[])">
            <summary>
            Subtraction of input values.
            </summary>
            <param name="values">value to use.</param>
            <returns name="double">The result.</returns>
            <search>math,opperator,adjustable input,subtraction,sub,subtract,difference,-</search>
        </member>
        <member name="M:Orchid.Common.Math.Multiplication(System.Double[])">
            <summary>
            Multiplication of input values.
            </summary>
            <param name="values">value to use.</param>
            <returns name="double">The result.</returns>
            <search>math,opperator,adjustable input,multiplication,mul,multiply,product,times,*,x</search>
        </member>
        <member name="M:Orchid.Common.Math.Division(System.Double[])">
            <summary>
            Division of input values.
            </summary>
            <param name="values">value to use.</param>
            <returns name="double">The result.</returns>
            <search>math,opperator,adjustable input,division,div,divide,product</search>
        </member>
        <member name="M:Orchid.Common.Number.IsAlmostZero(System.Double)">
            <summary>
            Evaluate if given number is almost zero.
            </summary>
            <param name="number">Number as double.</param>
            <returns name="boolean">Whether number is zero.</returns>
            <search>number,zero,almost,nearly</search>
        </member>
        <member name="M:Orchid.Common.Number.ToDouble(System.Int32)">
            <summary>
            Convert numeric value to double.
            </summary>
            <param name="number">Number as integer.</param>
            <returns name="double">Number as double.</returns>
            <search>number,double,int</search>
        </member>
        <member name="M:Orchid.Common.Number.ToInteger(System.Double)">
            <summary>
            Convert numeric value to integer.
            </summary>
            <param name="number">Number as double.</param>
            <returns name="integer">Number as integer.</returns>
            <search>number,double,int</search>
        </member>
        <member name="M:Orchid.Common.Orchid.EnumByName(System.String,System.String)">
            <summary>
            Get Orchid enumeration value by name and enumeration type.
            </summary>
            <param name="enumType">Name of the Orchid enumeration type.</param>
            <param name="valueName">Name of the enumeration value.</param>
            <returns name="Enum">Orchid enumeration type.</returns>
            <search>enum,enumeration,orchid,type,name</search>
        </member>
        <member name="M:Orchid.Common.Scripting.ScriptFileReader(System.String,System.String,System.Boolean)">
            <summary>
            Read 'script' file content, with refreshing option.
            Note: Do not send a list of paths and/or files as input!
            </summary>
            <param name="path">Path to file.</param>
            <param name="file">Filename including file extension.</param>
            <param name="refresh">Toggle true/false for refreshing!</param>
            <returns name="script">Script.</returns>
            <search>scripting,file,reader,input</search>
        </member>
        <member name="M:Orchid.Common.String.Concat(System.Collections.IList[])">
            <summary>
            Concatenates multiple strings in nD lists into a single string in nD lists.
            </summary>
            <param name="strings">List of strings to concatenate.</param>
            <returns name="string">String made from list of strings.</returns>
            <search>string,format,concatenate,join,combine,nd</search>
        </member>
        <member name="M:Orchid.Common.String.FromList(System.Collections.IList)">
            <summary>
            Concatenates list values to multiple line string.
            </summary>
            <param name="list">List of objects to concatenate.</param>
            <returns name="string">String made from list of strings.</returns>
            <search>string,format,concatenate,join,combine</search>
        </member>
        <member name="M:Orchid.Common.String.Format(System.String,System.Object[])">
            <summary>
            String formater that include item(s) by adding the value from the input port in the
            string. Input must be included using the numeric port value inside curly brackets!
            Example. string = "Hello {0}!", item0 = "World", result = "Hello world!".
            </summary>
            <param name="string">String to include item(s) by input.</param>
            <param name="items">Item to include in the string.</param>
            <returns name="string">The formatted string.</returns>
            <search>string,format,concatenate,join,combine</search>
        </member>
        <member name="M:Orchid.Common.String.Join(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Concatenates list of strings into a single string, inserting the given separator between each string.
            </summary>
            <param name="string">List of strings to join.</param>
            <param name="separator">String to be used as separator.</param>
            <returns name="string">Joined string.</returns>
            <search>string,format,concatenate,join,combine</search>
        </member>
        <member name="M:Orchid.Common.String.Split(System.String,System.String)">
            <summary>
            Divides a single string into a list of strings, with divisions determined by the given separator.
            </summary>
            <param name="string">String to split up.</param>
            <param name="separator">String that determine the end and start of a split.</param>
            <returns name="strings">List of strings made from the input string.</returns>
            <search>string,split,divide</search>
        </member>
        <member name="M:Orchid.Common.String.Replace(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Replaces all occurrences of text in a string with other text.
            </summary>
            <param name="string">String to replace substrings in.</param>
            <param name="searchFor">List of strings to be replaced.</param>
            <param name="replaceWith">List of strings to replace with.</param>
            <returns name="string">String with replacements made.</returns>
            <search>string,replace,overwrite,override,find</search>
        </member>
        <member name="M:Orchid.Common.String.ToType(System.String)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="M:Orchid.Common.String.ToClass(System.String)">
            <summary>
            Returns the class by string input.
            Note: Dynamo type "UnknownElement" cannot be returned as a class.
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="string">A string.</param>
            <returns name="Class">Class as System.RuntimeType.</returns>
            <search>string,class,type,cast</search>
        </member>
        <member name="M:Orchid.Common.String.ToNumber(System.String,Orchid.Common.Global.Culture)">
            <summary>
            Converts a string to an integer or a double, based on the input culture (country).
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            </summary>
            <param name="string">a string to be converted.</param>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <returns name="number">Integer or double numeric value.</returns>
            <search>string,tonumber,2number,stringtonumber,strtonumber,string2number,str2number,int,double,cast</search>
        </member>
        <member name="M:Orchid.Common.String.Contains(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Verify if the given string contains any of the given substrings.
            </summary>
            <param name="string">String to search in.</param>
            <param name="searchFor">List of substring to search for.</param>
            <param name="ignoreCase">Whether or not comparison takes case into account!?</param>
            <returns name="boolean">Whether the string contains any of the given substrings.</returns>
            <search>string,contain,search,in,within,part of</search>
        </member>
        <member name="M:Orchid.Common.String.Substring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from the given string. The substring starts at the
            given start string/character position and ends at the given string/character.
            </summary>
            <param name="string">String to take substring of.</param>
            <param name="startsWith">Substring to search the start for.</param>
            <param name="endsWith">Substring to search the end for.</param>
            <param name="ignoreCase">Whether or not comparison takes case into account!?</param>
            <returns name="substring">Substring made from the original string.</returns>
            <search>string,sub,subset,part</search>
        </member>
        <member name="M:Orchid.Common.String.Capitalize(System.String)">
            <summary>
            Return the string with the first letter of each word capitalized.
            </summary>
            <param name="string">A string.</param>
            <returns name="String">String with the first letter of each word capitalized.</returns>
            <search>string,title,case</search>
        </member>
        <member name="M:Orchid.Common.String.UpperCase(System.String)">
            <summary>
            Return the string in upper cases.
            </summary>
            <param name="string">A string.</param>
            <returns name="String">String in upper cases.</returns>
        </member>
        <member name="M:Orchid.Common.String.LowerCase(System.String)">
            <summary>
            Return the string in lower cases.
            </summary>
            <param name="string">A string.</param>
            <returns name="String">String in lower cases.</returns>
        </member>
        <member name="M:Orchid.Common.String.InvertCase(System.String)">
            <summary>
            Return the string with all letters inverted.
            </summary>
            <param name="string">A string.</param>
            <returns name="String">String with all letters inverted.</returns>
            <search>string,change,case</search>
        </member>
        <member name="M:Orchid.Geometry.BoundingBox.Intersect(Autodesk.DesignScript.Geometry.BoundingBox,System.Double)">
            <summary>
            Get elements intersecting with a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>boundingbox,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.BoundingBox.Intersect(Autodesk.DesignScript.Geometry.BoundingBox,System.Collections.Generic.List{Revit.Elements.Element},System.Double)">
            <summary>
            Filter elements intersecting with a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="element">Element(s) to examine.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>boundingbox,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.BoundingBox.PointInside(Autodesk.DesignScript.Geometry.BoundingBox,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Filter point inside a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <param name="point">Point as Dynamo type.</param>
            <param name="tolerence">Set a tolerence as double value. 
            Positive values gives a gap/margin to the boundingbox, while negative
            values set a overlap/oversize to the boundingbox.</param>
            <returns name="boolean">True if boundingbox contains point.</returns>
            <search>boundingbox,geometry,point,inside</search>
        </member>
        <member name="M:Orchid.Geometry.BoundingBox.Center(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get center point of a boundingbox.
            </summary>
            <param name="boundingBox">BoundingBox as Dynamo type.</param>
            <returns name="Point">Center point as Dynamo type.</returns>
            <search>boundingbox,geometry,center</search>
        </member>
        <member name="M:Orchid.Geometry.Curve.Reference(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Get the curve reference plane.
            </summary>
            <param name="curve">Curve as Dynamo type.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <search>curve,geometry,reference</search>
        </member>
        <member name="T:Orchid.Geometry.AlterDetailCurve">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.Geometry.DetailCurve.ByCurve(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Category)">
            <summary>
            Construct a Revit DetailCurve element by line style from a Dynamo Curve.
            </summary>
            <param name="view"></param>
            <param name="curve">Curve.</param>
            <param name="lineStyle">Line style.</param>
            <returns name="DetailCurve">Model curve.</returns>
            <search>curve,geometry,detail</search>
        </member>
        <member name="M:Orchid.Geometry.DetailCurve.SetLineStyle(System.Collections.Generic.List{Revit.Elements.DetailCurve},Revit.Elements.Category)">
            <summary>
            Set detail curve line style.
            </summary>
            <param name="detailCurve">Detail curve.</param>
            <param name="lineStyle">Line style.</param>
            <returns name="DetailCurve">Detail curve.</returns>
            <search>curve,geometry,detail,line,style</search>
        </member>
        <member name="M:Orchid.Geometry.Form.Solid(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get Dynamo solid from solid and void form.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Solid">Solid element as Dynamo type.</returns>
            <search>form,geometry,solid</search>
        </member>
        <member name="M:Orchid.Geometry.Form.OcSolid(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get Orchid solid from solid and void form.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="OcSolid">Solid element as Orchid type.</returns>
            <search>form,geometry,solid,orchid</search>
        </member>
        <member name="M:Orchid.Geometry.Form.Get(System.Boolean)">
            <summary>
            Get Form element in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Form">Form element as Dynamo type.</returns>
            <search>form,geometry</search>
        </member>
        <member name="M:Orchid.Geometry.Form.Get(Revit.Application.Document,System.Boolean)">
            <summary>
            Get Form element in document.
            </summary>
            <param name="document">Document.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Form">Form element as Dynamo type.</returns>
            <search>form,geometry</search>
        </member>
        <member name="M:Orchid.Geometry.Form.Intersect(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get elements intersecting with a solid.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>form,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Form.Intersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Filter elements intersecting with a solid.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>form,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Form.DoesIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Verify if form has intersecting element.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>form,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Form.DoesIntersect(Revit.Elements.Element,System.Object)">
            <summary>
            Verify if form intersect other form.
            </summary>
            <param name="form">Form element as Dynamo type.</param>
            <param name="other">Other form element as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>form,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.LinePattern.InDocument(Revit.Application.Document)">
            <summary>
            All line pattern(s) in document
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="LinePattern">Line pattern.</returns>
            <search>line,geometry,pattern,all</search>
        </member>
        <member name="M:Orchid.Geometry.LinePattern.Purge(Revit.Application.Document)">
            <summary>
            Purge line pattern(s) in document.
            Note: This function may take a while since it is evaluating every view
            if an element has any graphical override that concerns line patterns!
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>line,geometry,pattern,purge</search>
        </member>
        <member name="M:Orchid.Geometry.LineStyle.InDocument(Revit.Application.Document)">
            <summary>
            All line style(s) in document.
            Note: Line style is also a subcategory og the "Lines" category!
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="LineStyle">Line style.</returns>
            <search>line,geometry,style,all</search>
        </member>
        <member name="M:Orchid.Geometry.LineStyle.ByName(System.String)">
            <summary>
            Line style ny name.
            Note: Line style is also a subcategory og the "Lines" category!
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="LineStyle">Line style.</returns>
            <search>line,geometry,style,name</search>
        </member>
        <member name="M:Orchid.Geometry.LineStyle.Purge(Revit.Application.Document)">
            <summary>
            Purge line style(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>line,geometry,style,purge</search>
        </member>
        <member name="T:Orchid.Geometry.AlterModelCurve">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.Geometry.ModelCurve.ByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Category)">
            <summary>
            Construct a Revit ModelCurve element by line style from a Dynamo Curve.
            </summary>
            <param name="curve">Curve.</param>
            <param name="lineStyle">Line style.</param>
            <returns name="ModelCurve">Model curve.</returns>
            <search>curve,geometry,model</search>
        </member>
        <member name="M:Orchid.Geometry.ModelCurve.SetLineStyle(System.Collections.Generic.List{Revit.Elements.ModelCurve},Revit.Elements.Category)">
            <summary>
            Set model curve line style.
            </summary>
            <param name="modelCurve">Model curve.</param>
            <param name="lineStyle">Line style.</param>
            <returns name="ModelCurve">Model curve.</returns>
            <search>curve,geometry,model,line,style</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.ToString">
            <summary>
            Wrapped string override.
            </summary>
            <returns></returns>
            <search>face,geometry,orchid</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.ToDynamoType(Orchid.Geometry.OcFace)">
            <summary>
            Convert OcSolid (Orchid type) to Solid (Dynamo type)
            </summary>
            <param name="ocFace">Face as Orchid type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>face,geometry,orchid,convert,dynamo</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Reference(Orchid.Geometry.OcFace)">
            <summary>
            Get OcFace reference plane.
            </summary>
            <param name="ocFace">OcFace as Dynamo type.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <search>face,geometry,orchid,reference</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Curve(Orchid.Geometry.OcFace)">
            <summary>
            Get OcFace curve and reference plane.
            </summary>
            <param name="ocFace">OcFace as Dynamo type.</param>
            <returns name="Curve">Curve as Dynamo type.</returns>
            <returns name="Reference">Reference as Orchid type.</returns>
            <search>face,geometry,orchid,curve</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Horizontal(System.Collections.Generic.List{Orchid.Geometry.OcFace})">
            <summary>
            Get horizontal OcFace.
            </summary>
            <param name="ocFace">OcFace as Orchid type.</param>
            <returns name="OcFace">OcFace as Orchid type.</returns>
            <search>face,geometry,orchid,horizontal</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Vertical(System.Collections.Generic.List{Orchid.Geometry.OcFace})">
            <summary>
            Get vertical OcFace.
            </summary>
            <param name="ocFace">OcFace as Orchid type.</param>
            <returns name="OcFace">OcFace as Orchid type.</returns>
            <search>face,geometry,orchid,vertical</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Upward(System.Collections.Generic.List{Orchid.Geometry.OcFace})">
            <summary>
            Get (horizontal) OcFace facing upwards.
            </summary>
            <param name="ocFace">OcFace as Orchid type.</param>
            <returns name="OcFace">OcFace as Orchid type.</returns>
            <search>face,geometry,orchidhorizontal,up</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.Downward(System.Collections.Generic.List{Orchid.Geometry.OcFace})">
            <summary>
            Get (horizontal) OcFace facing downwards.
            </summary>
            <param name="ocFace">OcFace as Orchid type.</param>
            <returns name="OcFace">OcFace as Orchid type.</returns>
            <search>face,geometry,orchidhorizontal,down</search>
        </member>
        <member name="M:Orchid.Geometry.OcFace.AtDirection(System.Collections.Generic.List{Orchid.Geometry.OcFace},Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Get OcFace facing towards direction.
            </summary>
            <param name="ocFace">OcFace as Orchid type.</param>
            <param name="direction">Direction vector as Dynamo type.</param>
            <returns name="OcFace">OcFace as Orchid type.</returns>
            <search>face,geometry,orchid,direction</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.ToDynamoType(Orchid.Geometry.OcSolid)">
            <summary>
            Convert OcSolid (Orchid type) to Solid (Dynamo type)
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="Solid">Solid as Dynamo type.</returns>
            <search>solid,geometry,orchid,convert,dynamo</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.Area(Orchid.Geometry.OcSolid)">
            <summary>
            The total surface area of the OcSolid. Sum of all the areas of all faces.
            Note: The value is returned by the Revit unit settings
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="double">Value as a double according to the Revit unit settings.</returns>
            <search>solid,geometry,orchid,area</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.Volumne(Orchid.Geometry.OcSolid)">
            <summary>
            The total volumne of the OcSolid.
            Note: The value is returned by the Revit unit settings
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="double">Value as a double according to the Revit unit settings.</returns>
            <search>solid,geometry,orchid,volumne</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.OcFace(Orchid.Geometry.OcSolid)">
            <summary>
            Get OcFaces from a OcSolid.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="ocFace">OcFace as Dynamo type.</returns>
            <search>solid,geometry,orchid,face</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.Union(System.Collections.Generic.List{Orchid.Geometry.OcSolid})">
            <summary>
            Union list of forms to one form.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <returns name="OcSolid">Solid as Dynamo type.</returns>
            <search>solid,geometry,orchid,union,combine</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.Intersect(Orchid.Geometry.OcSolid,System.Boolean)">
            <summary>
            Get elements intersecting with a OcSolid.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>solid,geometry,orchid,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.Intersect(Orchid.Geometry.OcSolid,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Filter elements intersecting with a form.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <param name="elements">Elements to examine.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>solid,geometry,orchid,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.DoesIntersect(Orchid.Geometry.OcSolid,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Verify if solid has intersecting element.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>solid,geometry,orchid,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.OcSolid.DoesIntersect(Orchid.Geometry.OcSolid,Orchid.Geometry.OcSolid)">
            <summary>
            Verify if solid intersect other solid.
            </summary>
            <param name="ocSolid">Solid as Orchid type.</param>
            <param name="other">Other solid as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>solid,geometry,orchid,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Point.Reverse(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Get the reverse of the point. 
            Essentially this negates the X, Y, and Z components of the Point.
            </summary>
            <param name="point">Point as Dynamo type.</param>
            <returns name="Point">Point as Dynamo type.</returns>
            <search>point,geometry,reverse,negate</search>
        </member>
        <member name="M:Orchid.Geometry.Point.Closest(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Boolean)">
            <summary>
            Find the closest point to the next point in the list.
            </summary>
            <param name="point">Point as Dynamo type.</param>
            <param name="sort">Sort given values by the minimum XYZ value?</param>
            <returns name="Point">Point as Dynamo type.</returns>
            <search>point,geometry,closest,nearest</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.ToRevitType(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Convert Autodesk Revit solid to Dynamo Revit solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="Solid">Solid as Revit type.</returns>
            <search>solid,geometry,convert,dynamo,revit</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.ToDynamoType(Autodesk.Revit.DB.Solid)">
            <summary>
            Convert Dynamo Revit solid to Autodesk Revit solid.
            </summary>
            <param name="solid">Solid as Revit type.</param>
            <returns name="Solid">Solid as Dynamo type.</returns>
            <search>solid,geometry,convert,dynamo,revit</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.ToOrchidType(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Convert Solid (Dynamo type) to OcSolid (Orchid type)
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="OcSolid">Solid as Orchid type.</returns>
            <search>solid,geometry,convert,dynamo,orchid,revit</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.ByCoherency(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Solid},System.Double)">
            <summary>
            Creates new corherent solid, if distance between provided solids are lower than the input.
            </summary>
            <param name="solids">List of solids as Dynamo type.</param>
            <param name="distance"></param>
            <returns name="Solid">New coherent solids where distance is lower that input value.</returns>
            <returns name="boolean">Whether the solid is a new coherent solid or not!</returns>
            <search>solid,geometry,corherent,intersect,union</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.Copy(Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Copy solid, by cloning source solid faces into new solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <returns name="Solid">Copied Solid as Dynamo type.</returns>
            <search>solid,geometry,copy</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.Copy(Autodesk.DesignScript.Geometry.Solid,System.Int32)">
            <summary>
            Copy amount of solid, by cloning source solid faces into new solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="amount">Amount og solids to copy</param>
            <returns name="Solid">List of copied solids as Dynamo type.</returns>
            <search>solid,geometry,copy</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.Intersect(Autodesk.DesignScript.Geometry.Solid,System.Boolean)">
            <summary>
            Get elements intersecting with a solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>solid,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.Intersect(Autodesk.DesignScript.Geometry.Solid,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Filter elements intersecting with a solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element as Dynamo type.</returns>
            <search>solid,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.DoesIntersect(Autodesk.DesignScript.Geometry.Solid,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Verify if solid has intersecting element.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>solid,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Solid.DoesIntersect(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Solid)">
            <summary>
            Verify if solid intersect other solid.
            </summary>
            <param name="solid">Solid as Dynamo type.</param>
            <param name="other">Other solid as Dynamo type.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>solid,geometry,intersect</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.Reference(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Get surface reference.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <search>surface,geometry,reference</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.Horizontal(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface})">
            <summary>
            Get horizontal surface.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>surface,geometry,horizontal</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.Vertical(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface})">
            <summary>
            Get vertical surface.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>surface,geometry,vertical</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.Upward(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface})">
            <summary>
            Get (horizontal) surface facing upwards.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>surface,geometry,horizontal,up</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.Downward(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface})">
            <summary>
            Get (horizontal) surface facing downwards.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>surface,geometry,horizontal,down</search>
        </member>
        <member name="M:Orchid.Geometry.Surface.AtDirection(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface},Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Get surface facing towards direction.
            </summary>
            <param name="surface">Surface as Dynamo type.</param>
            <param name="direction">Direction vector as Dynamo type.</param>
            <returns name="Surface">Surface as Dynamo type.</returns>
            <search>surface,geometry,direction</search>
        </member>
        <member name="M:Orchid.Internals.HideWarning.PreprocessFailures(Autodesk.Revit.DB.FailuresAccessor)">
            Implementation of the IFailuresPreprocessor.
        </member>
        <member name="M:Orchid.Internals.GroupTypes.ToParameterGroup(System.String)">
            <summary>
            Converts string from GroupTypeId to BuiltInParameterGroup.
            </summary>
            <param name="groupType">GroupTypeId as string value.</param>
        </member>
        <member name="M:Orchid.Internals.GroupTypes.ToGroupType(System.String)">
            <summary>
            Converts string from BuiltInParameterGroup to GroupTypeId.
            </summary>
            <param name="parameterGroup">BuiltInParameterGroup as string value.</param>
        </member>
        <member name="M:Orchid.Internals.GroupTypes.FromGroupTypeLabel(System.String)">
            <summary>
            Converts string from (Dynamo) GroupType label to GroupType name.
            </summary>
            <param name="label">GroupType label as string value.</param>
        </member>
        <member name="M:Orchid.Internals.Specimens.ToInternalUnits(System.String,Orchid.Internals.ConvertBy)">
            <summary>
            Converts to internal units by string using SpecTypeId/UnitTypeId
            (after Revit 2020) or UnitType/DisplayUnitType (to Revit 2020).
            </summary>
            <param name="unitType">String value represents SpecTypeId/UnitTypeId or UnitType/DisplayUnitType.</param>
            <param name="type">Convert by using SpecTypeId or UnitTypeId.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.Specimens.ToInternalUnits(Autodesk.Revit.DB.Definition)">
            <summary>
            Converts to internal units by Definition using SpecTypeId
            (after Revit 2020) or UnitType (to Revit 2020).
            </summary>
            <param name="definition">Definition.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.Specimens.FromInternalUnits(System.String,Orchid.Internals.ConvertBy)">
            <summary>
            Converts from internal units by string using SpecTypeId/UnitTypeId
            (after Revit 2020) or UnitType/DisplayUnitType (to Revit 2020).
            </summary>
            <param name="unitType">String value represents SpecTypeId/UnitTypeId or UnitType/DisplayUnitType.</param>
            <param name="type">Convert by using SpecTypeId or UnitTypeId.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.Specimens.FromInternalUnits(Autodesk.Revit.DB.Definition)">
            <summary>
            Converts from internal units by Definition using SpecTypeId
            (after Revit 2020) or UnitType (to Revit 2020).
            </summary>
            <param name="definition">Definition.</param>
            <returns></returns>
        </member>
        <member name="M:Orchid.Internals.SpecTypes.SpecialSpecType(System.String)">
            <summary>
            Converts string to special SpecTypeId.
            </summary>
            <param name="type">Special spec type as string value.</param>
        </member>
        <member name="M:Orchid.Internals.SpecTypes.ToUnitType(System.String)">
            <summary>
            Converts string from SpecTypeId to UnitType.
            </summary>
            <param name="specType">SpecTypeId as string value.</param>
        </member>
        <member name="M:Orchid.Internals.SpecTypes.ToSpecType(System.String)">
            <summary>
            Converts string from UnitType to SpecTypeId.
            </summary>
            <param name="unitType">UnitType as string value.</param>
        </member>
        <member name="M:Orchid.Internals.SpecTypes.FromSpecTypeLabel(System.String)">
            <summary>
            Converts string from (Dynamo) SpecType to SpecType name.
            </summary>
            <param name="label">SpecType label as string value.</param>
        </member>
        <member name="M:Orchid.Internals.UnitTypes.ToDisplayUnitType(System.String)">
            <summary>
            Converts string from UnitTypeId to DisplayUnitType.
            </summary>
            <param name="unitType">UnitTypeId as string value.</param>
        </member>
        <member name="M:Orchid.Internals.UnitTypes.ToUnitType(System.String)">
            <summary>
            Converts string from DisplayUnitType to UnitTypeId.
            </summary>
            <param name="displayUnitType">DisplayUnitType as string value.</param>
        </member>
        <member name="F:Orchid.Internals.Purge.PurgeGuid">
            The guid of the "Project contains unused families and types" PerformanceAdviserRuleId.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPerformanceAdvisorRuleId(System.String,Autodesk.Revit.DB.PerformanceAdviserRuleId@)">
            Find a PerformanceAdviserRuleId with a guid that matches a supplied guid.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPurgeableElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId}@)">
            Get all purgeable elements.
            Intended for Revit 2017+ as versions up to and including Revit 2016 throw an InternalException.
        </member>
        <member name="F:Orchid.Internals.Purge.bips">
            BuiltInParameter Enumeration
            http://www.revitapidocs.com/2017/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
            http://www.revitapidocs.com/2018.1/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
        </member>
        <member name="F:Orchid.Internals.Purge.types">
            Type elements (element class)
            http://www.revitapidocs.com/2017/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
            http://www.revitapidocs.com/2018.1/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
        </member>
        <member name="M:Orchid.Internals.Services.TransactionEnsure(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Ensure transaction in the document.
            </summary>
            <param name="document">The Revit document.</param>
            <param name="transactionName">The transaction name.</param>
        </member>
        <member name="M:Orchid.Internals.Services.TransactionDone">
            <summary>
            Mark the transaction done in the document.
            </summary>
        </member>
        <member name="M:Orchid.Internals.Services.TransactionClose">
            <summary>
            Force close the transaction in the document.
            </summary>
        </member>
        <member name="M:Orchid.Internals.Services.TransactionEnd(Revit.Application.Document)">
            <summary>
            If function support multiple document, and a document
            is send to it, then force close the transaction! 
            Otherwise mark the transaction as done.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Orchid.Internals.Services.KillTransactionManager">
            <summary>
            Kill the Dynamo TransactionManager.
            This method is alike with TransactionClose.
            </summary>
        </member>
        <member name="T:Orchid.Internals.ObjectComparer">
            this method is forked from Dynamo
            
            Implements Compare function for two objects using following rule.
            1. Numbers are assumed to be smallest, then bool, string and pointers.
            2. If the two objects are IComparable and of the same type, then use it's native comparison mechanism.
            3. If both inputs are value type, but one of them is bool, bool is bigger
            4. Otherwise Convert them all to double and compare.
            5. Else If only one is value type, then value type object is smaller
            6. Else If only one is string, then the string is smaller than other
            7. Else don't know how to compare, so best campare them based on HashCode.
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ToOrchidType(Autodesk.Revit.DB.Definition,System.Boolean)">
            <summary>
            Convert Autodesk Revit definition to Orchid definition.
            </summary>
            <param name="definition">Definition as Revit type.</param>
            <param name="isExternalDefinition">Add boolean value, default is false!</param>
            <returns name="Workset">Definition as Orchid type.</returns>
            <search>family,definition,convert,revit,orchid</search>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ToRevitType(Orchid.RevitFamily.Definition)">
            <summary>
            Convert Orchid definition to Autodesk Revit definition.
            </summary>
            <param name="definition">Definition as Orchid type.</param>
            <returns name="Workset">Definition as Revit type.</returns>
            <search>family,definition,convert,revit,orchid</search>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ByName(System.String)">
            <summary>
            Get parameter definition by name.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
            <search>family,definition,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.ByParameter(Revit.Elements.FamilyParameter)">
            <summary>
            Get parameter definition by parameter.
            </summary>
            <param name="parameter">Parameter as Dynamo type.</param>
            <returns name="Definition">The parameter definition.</returns>
            <search>family,definition</search>
        </member>
        <member name="M:Orchid.RevitFamily.Definition.External(System.String)">
            <summary>
            Get shared parameter definition by name from the current shared parameter file.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The shared parameter definition.</returns>
            <search>family,definition,parameter,file,external</search>
        </member>
        <member name="M:Orchid.RevitFamily.Dimension.ByReference(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Curve,System.Collections.Generic.List{Orchid.RevitProject.Datums.Reference},Revit.Elements.Element)">
            <summary>
            Creates a linear dimension from two references. 
            Note: This function only works for family files, see 
            project nodes for similar function for project files! 
            </summary>
            <param name="view">View as dynamo type.</param>
            <param name="line">Line as Dynamo type.</param>
            <param name="reference">Reference as Orchid type.</param>
            <param name="dimensionType">linear dimension type as Dynamo type.</param>
            <returns name="Dimension">Dimension as Dynamo type.</returns>
            <search>family,dimension,reference</search>
        </member>
        <member name="M:Orchid.RevitFamily.Family.Nested(Revit.Application.Document,System.Boolean)">
            <summary>
            Get nested family in the family document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Family">Family.</returns>
            <returns name="Category">Category.</returns>
            <search>family,nested</search>
        </member>
        <member name="M:Orchid.RevitFamily.Family.NestedByName(Revit.Application.Document,System.String)">
            <summary>
            Get nested family by name in the family document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="name">Name as string value.</param>
            <returns name="Family">Family.</returns>
            <search>family,nested,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.Family.NestedByCategory(Revit.Application.Document,Revit.Elements.Category,System.Boolean)">
            <summary>
            Get all nested family by category in the family document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="category">Category as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Family">Family.</returns>
            <search>family,nested,category</search>
        </member>
        <member name="M:Orchid.RevitFamily.Family.Load(Revit.Elements.Family)">
            <summary>
            Load family, existing family will be overwritten.
            </summary>
            <param name="family">Family.</param>
            <returns name="Family">Family.</returns>
            <search>family,load</search>
        </member>
        <member name="M:Orchid.RevitFamily.Family.Load(Revit.Application.Document)">
            <summary>
            Load family by family document, existing family will be overwritten.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="Family">Family.</returns>
            <search>family,document,load</search>
        </member>
        <member name="T:Orchid.RevitFamily.AlterFamilyDocument">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.InitFamilyDocument(Revit.Application.Document)">
            <summary>
            Initiate document and safe cast to Revit document, including family file test.
            </summary>
        </member>
        <member name="P:Orchid.RevitFamily.FamilyDocument.Current">
            <summary>
            Get current (family) document. If you need a project document instead, 
            please find the node "Document.Current"!
            </summary>
            <returns name="FamilyDocument">Family document (rfa).</returns>
            <search>family,document,current</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.NewFamily(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create new family by name.
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path.</param>
            <param name="template">Family template(s) incl. path.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>family,document,create,new</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.AddLookupTable(Revit.Application.Document,System.String)">
            <summary>
            Load lookup file by name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="file">Lookup file (path) to load.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>family,document,lookup,table</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.Category(Revit.Application.Document)">
            <summary>
            Get the family document category.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="Category">Category.</returns>
            <search>family,document,category</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.SetCategory(Revit.Application.Document,Revit.Elements.Category)">
            <summary>
            Set the family document category.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="category">Category.</param>
            <returns name="Category">Category.</returns>
            <search>family,document</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.Purge(Revit.Application.Document,System.Boolean)">
            <summary>
            Purge family document. Set "completely" to true for a comprehensive purge!
            Note: "Completely" purges parameters, line styles/patterns, and imported categories.
            Furthermore, materials and materials assets are purged that are used in
            "peripheral" elements and settings.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="completely">Includes purging for a comprehensive purge!</param>
            <search>family,document,project,purge</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.Parameters(Revit.Application.Document,System.Boolean)">
            <summary>
            Obtain all the parameters from the family document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameters.</returns>
            <search>family,document,parameter</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.SharedParameters(Revit.Application.Document,System.Boolean)">
            <summary>
            Obtain all the SharedParameters from the family document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Parameter">Family parameter.</returns>
            <search>family,document,parameter,share</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyDocument.Associated(Revit.Application.Document,System.Boolean)">
            <summary>
            Get family document parameter there has an associated element and its associated parameter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Parameter">Family parameter.</returns>
            <returns name="Element">Associated element in the document.</returns>
            <returns name="elementParameter">Associated element parameter in the document.</returns>
            <search>family,document,associate</search>
        </member>
        <member name="T:Orchid.RevitFamily.AlterFamilyParameter">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Create(Revit.Application.Document,System.Collections.Generic.List{System.String},Revit.Elements.SpecType,Revit.Elements.GroupType,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create family parameter by name and by type.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to add (create).</param>
            <param name="specType">Spectype as Dynamo type.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,create</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Create(Revit.Application.Document,System.Collections.Generic.List{System.String},Revit.Elements.Category,Revit.Elements.GroupType,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create family parameter by name and by category.
            This is similar to the Revit type attachment &lt;Family Type&gt;.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to add (create).</param>
            <param name="category">Category for the &lt;Family Type&gt; as Dynamo type.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,create</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ById(System.Int32)">
            <summary>
            Get family parameter by id in current document.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,id,elementid</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ById(Revit.Application.Document,System.Int32)">
            <summary>
            Get family parameter by id.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="id">Id as integer value.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,id,elementid</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ByName(System.String)">
            <summary>
            Get family parameter by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get family parameter by name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="name">Name as string value.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Value(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Get family parameter value by parameter name
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="parameterName">The name of the family parameter to get.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="valueByType">Value by familyType.</returns>
            <returns name="valueByParameter">Value by parameterName.</returns>
            <search>family,parameter,result</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetValue(Revit.Application.Document,Orchid.RevitFamily.FamilyType,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Set family parameter value by parameter name.
            Provided values must comply with the number of family types!
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="parameterName">The name of the family parameter to set.</param>
            <param name="value">The value to set.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,add</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Rename(Revit.Application.Document,System.String,System.String)">
            <summary>
            Rename family parameter by parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="sourceName">The name of the source family parameter.</param>
            <param name="targetName">The name of the target family parameter.</param>
            <returns name="boolean">Boolean value if parameter is renamed (if parameter existed).</returns>
            <search>family,parameter,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Reorder(Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.FamilyParameter})">
            <summary>
            Reorder family parameters.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyParameter">Ordered list of family parameters.</param>
            <returns name="boolean">Boolean value if reordering succeded.</returns>
            <search>family,parameter,order</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Delete(Revit.Application.Document,System.String)">
            <summary>
            Delete family parameter by parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to delete.</param>
            <returns name="boolean">Boolean value if parameter is deleted.</returns>
            <search>family,parameter,delete</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ToggleFamilyShared(Revit.Application.Document,Revit.Elements.FamilyParameter,System.Boolean)">
            <summary>
            Toggle if the parameter is family or shared.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameter">The family parameter.</param>
            <param name="shared">Set (true) as shared parameter?, otherwise (false) it's a family parameter!</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,,toggle,family,share</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ToggleInstanceType(Revit.Application.Document,Revit.Elements.FamilyParameter,System.Boolean)">
            <summary>
            Toggle if the family parameter is instance or type.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameter">The family parameter.</param>
            <param name="instance">Set (true) as instance parameter?, otherwise (false) it's a type parameter!</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,toggle,instance,type</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.ChangeGroup(Revit.Application.Document,Revit.Elements.FamilyParameter,Revit.Elements.GroupType)">
            <summary>
            Change the parameter group.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameter">The family parameter.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,,change,group</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.IsReporting(Revit.Application.Document,System.String)">
            <summary>
            Verify if family parameter is a reporting parameter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to verify.</param>
            <returns name="boolean">Boolean value if parameter is a reporting parameter.</returns>
            <search>family,parameter,reporting</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Associate(Revit.Application.Document,System.String,Revit.Elements.Element,System.String)">
            <summary>
            Associate document family parameter with element parameter (e.g. nested family)  
            Note: An element to associate may be an internal geometry element in the family
            or a loaded nested family. The latter is denoted FamilySymbol and is the same
            as a FamilyType in a project document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The family parameter name to associate.</param>
            <param name="element">Element as Dynamo type to associate.</param>
            <param name="elementParameter">The element parameter name to associate.</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,associate</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.HasAssociated(Revit.Application.Document,System.String)">
            <summary>
            Verify if family parameter has associated elements.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to verify.</param>
            <returns name="boolean">Boolean value if parameter has associated elements.</returns>
            <search>family,parameter,associate</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Associated(Revit.Application.Document,System.String)">
            <summary>
            Get associated element and its associated parameter by family parameter name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter.</param>
            <returns name="Element">Associated element in the document.</returns>
            <returns name="elementParameter">Associated element parameter in the document.</returns>
            <search>family,parameter,associate</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Convert(Revit.Application.Document,Orchid.RevitFamily.Definition,System.Boolean)">
            <summary>
            Convert family parameter to shared (family) parameter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="definition">The shared parameter external definition.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <returns name="FamilyParameter">Family parameter.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.Purge(Revit.Application.Document)">
            <summary>
            Purge parameter(s) in document.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>parameter,purge</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightDimmingColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light dimming color name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Name">The dimming color name.</returns>
            <search>family,parameter,lightDimmingColor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightColorFilter(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light color filter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Color">Color as dynamo type.</returns>
            <search>family,parameter,lightColorFilter</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightShape(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light shape style, that is either Point, Line, Rectangle or Circle style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Style">The light shape style, either as
                Point, Line, Rectangle or Circle.</returns>
            <returns name="Value">Depending on the style is this value either 
                emit length, emit width/length, emit diameter or no value.</returns>
            <search>family,parameter,lightShape</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightDistribution(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light distribution style, that is either Spherical, 
            Hemispherical, Spot or PhotometricWeb style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Style">The light distribution style, either as  
                Spherical, Hemispherical, Spot or PhotometricWeb style.</returns>
            <returns name="Value">Depending on the style is this value either 
                Spot beam angle/Spot field angle/Tilt angle, 
                Photometric web file/Tilt angle or no value.</returns>
            <search>family,parameter,lightDistribution</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light initial color, that is either Preset colors or a Custom color value.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Style">The initial color style, either as
                PresetColor or CustomColor style.</returns>
            <returns name="Value">Depending on the style is this value either 
                preset color name and/or temperature.</returns>
            <search>family,parameter,lightColor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light initial intensity, that is either Flux, Luminous, Illuminance or Wattage intensity.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Style">The initial intensity, either as
                Flux, Luminous, Illuminance or Wattage.</returns>
            <returns name="Value">Depending on the style is this value either 
                Flux, Luminosity, Illuminance/Distance or Wattage/Efficacy.</returns>
            <search>family,parameter,lightIntensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.LightLossFactor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType})">
            <summary>
            Get light loss factor, that is either basic or advanved loss factor.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="Style">The loss factor either as Basic or Advanced style.</returns>
            <returns name="Value">Depending on the style is this value either Basic loss factor or
                Temperature/Voltage/Ballast/Lamp tilt/Surface depreciation/
                Lamp lumen depreciation/Luminaire dirt depreciation/
                calculated loss factor.</returns>
            <search>family,parameter,lightLossFactor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightDimmingColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Enum)">
            <summary>
            Set light dimming color by name.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="color">Light dimming color as Revit enumeration type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,dimming,color</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightColorFilter(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},DSCore.Color)">
            <summary>
            Set light color filter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="color">Color as dynamo type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,color,filter</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightShape(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Enum)">
            <summary>
            Set light shape style, using either Point, Line, Rectangle or Circle style.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="style">Light shape style as Revit enumeration type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,shape</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightDistribution(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Enum)">
            <summary>
            Set light distribution style, using either Spherical, 
            Hemispherical, Spot or PhotometricWeb style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="style">Light distribution style as Revit enumeration type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,distribution</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Object,System.Enum,System.Double)">
            <summary>
            Set light initial color, using either Preset colors or a Custom color value.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="style">Initial color style as Orchid enumeration type.</param>
            <param name="color">Preset initial color (if preset color style) as Revit enumeration type.</param>
            <param name="value">Temperature value (if custom color style).</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,color</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Object,System.Double,System.Double)">
            <summary>
            Set light initial intensity, using either Flux, Luminous, Illuminance or Wattage intensity.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="style">Light initial intensity as Orchid enumeration type.</param>
            <param name="valueA">Depending on the style is this value either for
                flux, luminous, illuminance, or wattage.</param>
            <param name="valueB">Depending on the style is this value either for 
                distance, efficacy, or has no value.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,intensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightLossFactor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set light loss factor, using either basic or advanved loss factor.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="style">Loss factor as Orchid enumeration type.</param>
            <param name="value">Basic loss factor value (0.0 - 4.0).</param>
            <param name="temperature">Advanced loss factor, value for the temperature (-2.0 - 2.0).</param>
            <param name="voltage">Advanced loss factor, value for the voltage (-2.0 - 2.0).</param>
            <param name="ballast">Advanced loss factor, value for the ballast (0.0 - 1.0).</param>
            <param name="tilt">Advanced loss factor, value for the lamp tilt (0.0 - 1.0).</param>
            <param name="surface">Advanced loss factor, value for the 
                surface depreciation (0.0 - 1.0).</param>
            <param name="lumen">Advanced loss factor, value for the 
                lamp lumen depreciation (0.0 - 1.0).</param>
            <param name="luminaire">Advanced loss factor, value for the 
                luminaire dirt depreciation (0.0 - 1.0).</param>
            <returns name="FamilyType">Family type.</returns>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightPresetColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Enum)">
            <summary>
            Set light (Preset) initial color.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="color">Preset initial color as Revit enumeration type.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,preset,color</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightCustomColor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double)">
            <summary>
            Set light (Custom) initial color.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="value">Value for the custom initial color.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,custom,color</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightFluxIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double)">
            <summary>
            Set light (Flux) initial intensity.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="value">Flux value for the initial intensity.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,flux,intensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightLuminousIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double)">
            <summary>
            Set light (Luminous) initial intensity.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="value">Value for the initial intensity.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,luminous,intensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightIlluminanceIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double,System.Double)">
            <summary>
            Set light (Illuminance) initial intensity.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="illuminance">Illuminance value for the initial intensity.</param>
            <param name="distance">Distance Value for the initial intensity.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,illuminance,intensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetLightWattageIntensity(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double,System.Double)">
            <summary>
            Set light (Wattage) initial intensity.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="wattage">Wattage value for the initial intensity.</param>
            <param name="efficacy">Efficacy Value for the initial intensity.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,light,wattage,intensity</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetBasicLossFactor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double)">
            <summary>
            Set light (Basic) loss factor.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="value">Value for the loss factor.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyParameter.SetAdvancedLossFactor(Revit.Application.Document,System.Collections.Generic.List{Orchid.RevitFamily.FamilyType},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set light (Advanced) loss factor.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <param name="temperature">Temperature value for the loss factor (-2.0 - 2.0).</param>
            <param name="voltage">Voltage value for the loss factor (-2.0 - 2.0).</param>
            <param name="ballast">Ballast value for the loss factor (0.0 - 1.0).</param>
            <param name="tilt">Lamp tilt value for the loss factor (0.0 - 1.0).</param>
            <param name="surface">Surface depreciation value for the loss factor (0.0 - 1.0).</param>
            <param name="lumen">Lamp lumen depreciation value for the loss factor (0.0 - 1.0).</param>
            <param name="luminaire">Luminaire dirt depreciation value for the loss factor (0.0 - 1.0).</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,parameter,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.VerifyIsFamily(Autodesk.Revit.DB.Document)">
            verify that it is a family document
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.VerifyIsLightingFixtures(Autodesk.Revit.DB.Document)">
            verify that it is a Lighting Fixtures
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.CleanFamilyTypes(Autodesk.Revit.DB.Document)">
            The "input" value is the counted value of ex. new or existing types
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.PresetParameterFile(Autodesk.Revit.DB.Document,System.Boolean,System.String)">
            <summary>
            Store current shared parameter file and/or set a temporary file.
            </summary>
            <param name="document">Family document (rfa).</param>
            <param name="embedded">Use an embedded file?</param>
            <param name="file">Provided shared parameter file or null.</param>
            <returns name = "PresetFile">Preset parameter file to be restorred.</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.ResetParameterFile(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            reset to point of departure, apply old shared parameter file if changed.
            </summary>
            <param name="document">Family document (rfa).</param>
            <param name="presetFile">Preset parameter file to be restorred.</param>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.InternalParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Family document (rfa).</param>
            <param name="parameterName">Parameter name.</param>
            <param name="typeCat">Type or Category input.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="reporting">Is reporting parameter?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.EditableParameterFile(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.String,System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Family document (rfa).</param>
            <param name="parameterName">Parameter name.</param>
            <param name="groupName">Parameter group name.</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="reporting">Is reporting parameter?</param>
            <param name="create">Create value in shared parameter?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyServices.FixedParameterFile(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Family document (rfa).</param>
            <param name="file">Shared parameter file.</param>
            <param name="parameterName">Parameter name.</param>
            <param name="groupName">Parameter group name.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="reporting">Is reporting parameter?</param>
            <param name="embedded">Use embedded resource file?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:Orchid.RevitFamily.FamilyType.Name">
            <summary>
            FamilyType name.
            </summary>
            <returns name="string">Name as string.</returns>
            <search>family,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ToString">
            <summary>
            FamilyType string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Create(Revit.Application.Document,System.String)">
            <summary>
            Create family type by name.
            Note: If no input to name is provided (default as null), then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="name">The family type name.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,create</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current">
            <summary>
            Get the current family type.
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,current</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current(Revit.Application.Document)">
            <summary>
            Get the current family type in the familyDocument. 
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,current</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.InDocument">
            <summary>
            Get all family types.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,all</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.InDocument(Revit.Application.Document)">
            <summary>
            Get all family types in the familyDocument.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,all</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ByName(System.String)">
            <summary>
            Get family type by name in current document.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Rename(Revit.Application.Document,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Rename family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="sourceName">The name of the source family type.</param>
            <param name="targetName">The name of the target family type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyType">FamilyType as Orchid type.</returns>
            <search>family,rename</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Delete(Revit.Application.Document,Orchid.RevitFamily.FamilyType)">
            <summary>
            Delete family type by name.
            Note: FamilyType in a family document and a project document is NOT the same! 
            FamilyType in a project document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="familyType">FamilyType as Orchid type.</param>
            <returns name="boolean">Boolean value if family type is deleted (if family type existed).</returns>
            <search>family,delete</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Nested(Revit.Application.Document,System.Boolean)">
            <summary>
            Get nested family type (FamilySymbol) in the family document.
            Note: Nested families in a family document and in a project
            document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyType">Nested family type (FamilySymbol) as Dynamo type.</returns>
            <search>family,nested</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.NestedByName(Revit.Application.Document,System.String)">
            <summary>
            Get nested family type (FamilySymbol) in the family document.
            Note: Nested families in a family document and in a project
            document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="name">Name as string value.</param>
            <returns name="FamilyType">Nested family type (FamilySymbol) as Dynamo type.</returns>
            <search>family,nested,name</search>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.NestedByCategory(Revit.Application.Document,Revit.Elements.Category,System.Boolean)">
            <summary>
            Get nested family type (FamilySymbol) by category in the family document.
            Note: Nested families in a family document and in a project
            document is denoted FamilySymbol in the Autodesk Revit API!
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="category">Category as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyType">Nested family type (FamilySymbol) as Dynamo type.</returns>
            <search>family,nested,category</search>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Value(Revit.Application.Document,System.String)">
            <summary>
            Get family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the parameter to get.</param>
            <returns name="Formula">Formula as string.</returns>
            <search>family,parameter,formula,result</search>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Input(Revit.Application.Document,System.String,System.String)">
            <summary>
            Set family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the parameter to set.</param>
            <param name="value">The value.</param>
            <returns name="Formula">Formula as string.</returns>
            <search>family,parameter,formula,add</search>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Remove(Revit.Application.Document,System.String)">
            <summary>
            Remove family formula value by name
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the parameter to remove formula.</param>
            <returns name="boolean">Boolean value if formula is deleted (if formula existed).</returns>
            <search>family,parameter,formula,remove</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Create(Revit.Application.Document,System.Collections.Generic.List{System.String},System.String,Revit.Elements.SpecType,Revit.Elements.GroupType,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create shared (family) parameter by name. 
            If the parameter not exists in the shared parameter file is it being created.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to create.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="specType">Spectype as Dynamo type.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,share</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Add(Revit.Application.Document,System.Collections.Generic.List{System.String},System.String,Revit.Elements.GroupType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add shared (family) parameter by name, from current loaded shared parameter file.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to add.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="reporting">Is reporting parameter? 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,share</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddByGroup(System.Collections.Generic.List{Revit.Application.Document},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.GroupType},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Boolean)">
            <summary>
            Add shared (family) parameter by groupName, from current loaded shared parameter file.
            Parameters are set with the same settings pr. provided group.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="groupName">Group of the parameter to add from the file. 
            If no group is supplied, all possible groups are selected.</param>
            <param name="groupType">Grouptype as Dynamo type to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="reporting">Is reporting parameter? Boolean value must be set pr. provided group. 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <returns name="GroupName">Group name.</returns>
            <search>family,parameter,share,group</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddByFile(System.Collections.Generic.List{Revit.Application.Document},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.GroupType},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Boolean)">
            <summary>
            Add shared (family) parameter by groupName, by the provided shared parameter file. 
            Parameters are set with the same settings pr. provided group.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="file">Shared Parameter file incl. file extension.</param>
            <param name="groupName">Group of the parameter to add from the file. 
            If no group is supplied, all possible groups are selected.</param>
            <param name="groupType">Grouptype as Dynamo type to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="reporting">Is reporting parameter? Boolean value must be set pr. provided group. 
            Is only available to Length and Angle parameters!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <returns name="GroupName">Group name.</returns>
            <search>family,parameter,share,file</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.AddIFC(System.Collections.Generic.IEnumerable{Revit.Application.Document},System.Boolean)">
            <summary>
            Add basic IFC type and instance shared (family) parameters 
            (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer).
            Parameters are set with the same settings pr. group.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyParameter">Family parameter.</returns>
            <search>family,parameter,share,ifc</search>
        </member>
        <member name="M:Orchid.RevitFamily.SharedParameter.Convert(Revit.Application.Document,System.String,System.Boolean)">
            <summary>
            Convert shared (family) parameter to family parameter.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <param name="parameterName">The name of the family parameter to convert.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <returns name="FamilyParameter">Family parameter.</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.Create(System.String,Orchid.RevitMaterial.Visual.Asset)">
            <summary>
            Create appearance by asset.
            Note: If the appearance exists it is being replaced!
            </summary>
            <param name="name">Name as string value.</param>
            <param name="asset">Asset as Orchid type.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,schema,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.Create(System.String,System.String)">
            <summary>
            Create appearance by schema (default).
            Note: If the appearance exists it is being replaced!
            </summary>
            <param name="name">Name as string value.</param>
            <param name="schema">Schema as string value.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,schema,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="name">Name for the duplicated appearance.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,duplicate,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.ByName(System.String)">
            <summary>
            Get appearance asset by name.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,name</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetAsset(Revit.Elements.Element,Orchid.RevitMaterial.Visual.Asset)">
            <summary>
            Set rendering asset.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="asset">Asset as Orchid type.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,asset</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetInformation(Revit.Elements.Element,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="description">Description as string value.</param>
            <param name="keyword">Keyword(s) as string value.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetGeneric(Revit.Elements.Element,DSCore.Color,Orchid.RevitMaterial.Visual.Texture,System.Double,Orchid.RevitMaterial.Visual.Texture,System.Boolean)">
            <summary>
            Set generic appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="color">Color as Dynamo type.</param>
            <param name="texture">Texture as Orchid type.</param>
            <param name="imageFade">Image fade as double value.</param>
            <param name="glossiness">Glossiness (Texture) as Orchid type.</param>
            <param name="highlights">Highlights as boolean value.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,generic</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetReflectivity(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set reflectivity appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="direct">Direct as double value.</param>
            <param name="oblique">Oblique as double value.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,reflect</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetTransparency(Revit.Elements.Element,System.Double,Orchid.RevitMaterial.Visual.Texture,System.Double,Orchid.RevitMaterial.Visual.Texture,System.Double)">
            <summary>
            Set transparency appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="amount">Amount as double value.</param>
            <param name="texture">Texture as Orchid type.</param>
            <param name="imageFade">Image fade as double value.</param>
            <param name="translucency">Translucency (Texture) as Orchid type.</param>
            <param name="refraction">Refraction value as double.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,transparen</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetCutouts(Revit.Elements.Element,Orchid.RevitMaterial.Visual.Texture)">
            <summary>
            Set cutouts appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="texture">Texture (render) handler.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,cutout</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetSelfIllumination(Revit.Elements.Element,Orchid.RevitMaterial.Visual.Texture,System.Double,System.Double)">
            <summary>
            Set self illumination appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="texture">Texture as Orchid type.</param>
            <param name="luminance">Luminance value as double.</param>
            <param name="colorTemperature">Color temperature value as double.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,illumination</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetBump(Revit.Elements.Element,Orchid.RevitMaterial.Visual.Texture,Orchid.RevitMaterial.Visual.Texture)">
            <summary>
            Set bump appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="texture">Texture as Orchid type.</param>
            <param name="amount">Amount (Texture) as Orchid type.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,bump</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.SetTint(Revit.Elements.Element,DSCore.Color)">
            <summary>
            Set tint appearance.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <param name="color">Color as Dynamo type.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,tint</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.InDocument">
            <summary>
            Get all appearance assets in document.
            </summary>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance,all</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.Asset(Revit.Elements.Element)">
            <summary>
            Get rendering asset.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <returns name="Asset">Asset as Orchid type.</returns>
            <search>material,appearance,render,asset</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Appearance.Information(Revit.Elements.Element)">
            <summary>
            Get information.
            </summary>
            <param name="appearance">Appearance as Dynamo type.</param>
            <returns name="description">Description as string value.</returns>
            <returns name="keyword">Keyword(s) as string value.</returns>
            <search>material,appearance,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetRenderAppearance(Revit.Elements.Material,System.Boolean)">
            <summary>
            Set render appearance.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="useRenderAppearance">Use render appearance?</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,render</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShadingColor(Revit.Elements.Material,DSCore.Color)">
            <summary>
            Set shading color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,shading,shade,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetTransparency(Revit.Elements.Material,System.Int32)">
            <summary>
            Set transparency.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="transparency">Transparency as integer.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,transparen</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSmoothness(Revit.Elements.Material,System.Int32)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="smoothness">Smoothness as integer.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShininess(Revit.Elements.Material,System.Int32)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="shininess">Shininess as integer.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,shininess</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Input(Revit.Elements.Material,System.Boolean,DSCore.Color,System.Int32,Revit.Elements.Element,DSCore.Color,Revit.Elements.Element,DSCore.Color,Revit.Elements.Element,DSCore.Color,Revit.Elements.Element,DSCore.Color)">
            <summary>
            Set material graphics.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="useRenderAppearance">Use render appearance?</param>
            <param name="shadingColor">Color as list of integer or object.</param>
            <param name="transparency">Transparency as integer.</param>
            <param name="surfaceForegroundPattern">Pattern as Dynamo type.</param>
            <param name="surfaceForegroundPatternColor">Color as list of integer or object.</param>
            <param name="surfaceBackgroundPattern">Pattern as Dynamo type.</param>
            <param name="surfaceBackgroundPatternColor">Color as list of integer or object.</param>
            <param name="cutForegroundPattern">Pattern as Dynamo type.</param>
            <param name="cutForegroundPatternColor">Color as list of integer or object.</param>
            <param name="cutBackgroundPattern">Pattern as Dynamo type.</param>
            <param name="cutBackgroundPatternColor">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,surface,cut</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPattern(Revit.Elements.Material,Revit.Elements.Element)">
            <summary>
            Set surface foreground pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="pattern">Pattern as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,surface,foreground,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPatternColor(Revit.Elements.Material,DSCore.Color)">
            <summary>
            Set surface foreground pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,surface,foreground,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPattern(Revit.Elements.Material,Revit.Elements.Element)">
            <summary>
            Set surface background pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="pattern">Pattern as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,surface,foreground,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPatternColor(Revit.Elements.Material,DSCore.Color)">
            <summary>
            Set surface background pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,surface,foreground,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPattern(Revit.Elements.Material,Revit.Elements.Element)">
            <summary>
            Set cut foreground pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="pattern">Pattern as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,cut,foreground,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPatternColor(Revit.Elements.Material,DSCore.Color)">
            <summary>
            Set cut foreground pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,cut,background,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPattern(Revit.Elements.Material,Revit.Elements.Element)">
            <summary>
            Set cut background pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="pattern">Pattern as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,cut,background,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPatternColor(Revit.Elements.Material,DSCore.Color)">
            <summary>
            Set cut background pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="color">Color as list of integer or object.</param>
            <returns name="Material">Material.</returns>
            <search>material,graphic,cut,background,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.RenderAppearance(Revit.Elements.Material)">
            <summary>
            Get render appearance.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="boolean">Whether render appearance is used.</returns>
            <search>material,graphic,render</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.ShadingColor(Revit.Elements.Material)">
            <summary>
            Get shading color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Color">Color.</returns>
            <search>material,graphic,shading,shade,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Transparency(Revit.Elements.Material)">
            <summary>
            Get transparency.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="integer">Transparency as integer.</returns>
            <search>material,graphic,transparen</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Smoothness(Revit.Elements.Material)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="integer">Smoothness as integer.</returns>
            <search>material,graphic,smoothness</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Shininess(Revit.Elements.Material)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="integer">Shininess as integer.</returns>
            <search>material,graphic,shininess</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Value(Revit.Elements.Material)">
            <summary>
            Get material graphics.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="UseRenderAppearance">Whether render appearance is used?</returns>
            <returns name="ShadingColor">Color.</returns>
            <returns name="Transparency">Transparency as integer.</returns>
            <returns name="surfaceForegroundPattern">Pattern.</returns>
            <returns name="surfaceForegroundPatternColor">Color.</returns>
            <returns name="surfaceBackgroundPattern">Pattern.</returns>
            <returns name="surfaceBackgroundPatternColor">Color.</returns>
            <returns name="cutForegroundPattern">Pattern.</returns>
            <returns name="cutForegroundPatternColor">Color.</returns>
            <returns name="cutBackgroundPattern">Pattern.</returns>
            <returns name="cutBackgroundPatternColor">Color.</returns>
            <search>material,graphic,surface,cut</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SurfaceForegroundPattern(Revit.Elements.Material)">
            <summary>
            Get surface foreground pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Pattern">Pattern.</returns>
            <search>material,graphic,surface,foreground,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SurfaceForegroundPatternColor(Revit.Elements.Material)">
            <summary>
            Get surface foreground pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Color">Color.</returns>
            <search>material,graphic,surface,foreground,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SurfaceBackgroundPattern(Revit.Elements.Material)">
            <summary>
            Get surface background pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Pattern">Pattern.</returns>
            <search>material,graphic,surface,foreground,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SurfaceBackgroundPatternColor(Revit.Elements.Material)">
            <summary>
            Get surface background pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Color">Color.</returns>
            <search>material,graphic,surface,foreground,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.CutForegroundPattern(Revit.Elements.Material)">
            <summary>
            Get cut foreground pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Pattern">Pattern.</returns>
            <search>material,graphic,foreground,cut,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.CutForegroundPatternColor(Revit.Elements.Material)">
            <summary>
            Get cut foreground pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Color">Color.</returns>
            <search>material,graphic,cut,background,pattern,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.CutBackgroundPattern(Revit.Elements.Material)">
            <summary>
            Get cut background pattern.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Pattern">Pattern.</returns>
            <search>material,graphic,cut,background,pattern</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.CutBackgroundPatternColor(Revit.Elements.Material)">
            <summary>
            Get cut background pattern color.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Color">Color.</returns>
            <search>material,graphic,cut,background,color</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Create(System.String)">
            <summary>
            Create material.
            Note: If the material exists it is being replaced!
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="Material">Material.</returns>
            <search>material,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Duplicate(Revit.Elements.Material,System.String)">
            <summary>
            Duplicate material.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="name">Name for the duplicated Material.</param>
            <returns name="Material">Material.</returns>
            <search>material,duplicate</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetAppearance(Revit.Elements.Material,Revit.Elements.Element)">
            <summary>
            Set appearance.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="appearance">Appearance as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,appearance</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetPhysical(Revit.Elements.Material,System.Enum,Revit.Elements.Element)">
            <summary>
            Set physical property.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="aspect">Material aspect as enumeration type.</param>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,physical,property</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetThermal(Revit.Elements.Material,System.Enum,Revit.Elements.Element)">
            <summary>
            Set thermal property.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="aspect">Material aspect as enumeration type.</param>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="Material">Material.</returns>
            <search>material,thermal,property</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetCategory(Revit.Elements.Material,System.String)">
            <summary>
            Set material category.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="name">The material category name to set.</param>
            <returns name="Material">Material.</returns>
            <search>material,category</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetClass(Revit.Elements.Material,System.String)">
            <summary>
            Set material class.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <param name="name">The material class name to set.</param>
            <returns name="Material">Material.</returns>
            <search>material,class</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Purge(Revit.Application.Document)">
            <summary>
            Purge material(s) in document.
            </summary>
            <returns name="watch">Add a watch node!</returns>
            <search>material,purge</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Category(Revit.Elements.Material)">
            <summary>
            Get material category.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="string">The material category name.</returns>
            <search>material,category</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Class(Revit.Elements.Material)">
            <summary>
            Get material class.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="string">The material class name.</returns>
            <search>material,class</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.InDocument">
            <summary>
            Get all materials in document.
            </summary>
            <returns name="Material">Material.</returns>
            <search>material,all</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.InDocument(Revit.Application.Document)">
            <summary>
            Get all materials in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="Material">Material.</returns>
            <search>material,all</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Properties(Revit.Elements.Material)">
            <summary>
            Get material properties.
            Note: If the property dosnt exist null is returned.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Appearance">Appearance property.</returns>
            <returns name="Physical">Physical property.</returns>
            <returns name="Thermal">Thermal property.</returns>
            <search>material,property,properties</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.PropertyParameter(Revit.Elements.Material)">
            <summary>
            Get material property parameters.
            Note: If the parameter dosnt exist null is returned.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="AppearanceParameter">Appearance property parameter.</returns>
            <returns name="PhysicalParameter">Physical property parameter.</returns>
            <returns name="ThermalParameter">Thermal property parameter.</returns>
            <search>material,property,parameter</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Appearance(Revit.Elements.Material)">
            <summary>
            Get material appearance.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Appearance">Appearance.</returns>
            <search>material,appearance</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Physical(Revit.Elements.Material)">
            <summary>
            Get material physical.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Thermal(Revit.Elements.Material)">
            <summary>
            Get material thermal.
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Parameter(Revit.Elements.Material)">
            <summary>
            Get material parameters.
            Note: this function will try to return Dynamo Parameter. However, 
            if that fails, then will a string value of the parameter be returned!
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Parameter">Parameter.</returns>
            <search>material,parameter</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Density(Revit.Elements.Material)">
            <summary>
            Get material asset as physical and thermal density in SI unit (kg/m3).
            </summary>
            <param name="material">Material as Dynamo type.</param>
            <returns name="Physical">List of physical density.</returns>
            <returns name="Thermal">List of thermal density.</returns>
            <search>material,asset,density</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Create(System.String,System.Enum)">
            <summary>
            Create physical property set.
            Note: If a thermal property exists it is being replaced!
            </summary>
            <param name="name">Name as string value.</param>
            <param name="type">Physical (structural) type as enumeration type.</param>
            <returns name="PropertySet">Physical (structural) property set.</returns>
            <search>material,physical,property,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate physical property set (asset).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="name">Name for the duplicated physical property set.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,property,duplicate</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.ByName(System.String)">
            <summary>
            Get physical property set (asset) by name.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,appearance,name</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetInformation(Revit.Elements.Element,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="description">Description.</param>
            <param name="keywords">Keywords.</param>
            <param name="subclass">Subclass.</param>
            <param name="source">Source.</param>
            <param name="sourceUrl">Source Url.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetBehavior(Revit.Elements.Element,System.Enum)">
            <summary>
            Set behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="behavior">Physical behavior as enumeration type.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,behavior</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetBasicThermal(Revit.Elements.Element,System.Double)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="expansionCoefficient">Expansion coefficient.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetBasicThermalByXYZ(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="expansionCoefficient">XYZ as Dynamo point.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,thermal</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetMechanical(Revit.Elements.Element,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="density">Density.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetMechanical(Revit.Elements.Element,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="youngModulus">Young modulus.</param>
            <param name="poissonRatio">Poisson ratio.</param>
            <param name="shearModulus">Shear modulus.</param>
            <param name="density">Density.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetMechanicalByXYZ(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="youngModulus">XYZ as Dynamo point.</param>
            <param name="poissonRatio">XYZ as Dynamo point.</param>
            <param name="shearModulus">XYZ as Dynamo point.</param>
            <param name="density">Density.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetStrength(Revit.Elements.Element,System.Double,System.Double,System.Boolean)">
            <summary>
            Set strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="yieldStress">Yield stress.</param>
            <param name="tensileStrength">Tensile strength.</param>
            <param name="thermalTreated">Thermal treated.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,strength</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetStrengthExtended(Revit.Elements.Element,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Set strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="species">Species.</param>
            <param name="grade">Grade.</param>
            <param name="bending">Bending.</param>
            <param name="parallelCompression">Parallel compression.</param>
            <param name="perpendicularCompression">Perpendicular compression.</param>
            <param name="parallelShear">Parallel shear.</param>
            <param name="tensionParallel">Tension parallel.</param>
            <param name="tensionPerpendicular">Tension perpendicular.</param>
            <param name="averageModulus">Average modulus.</param>
            <param name="construction">Construction.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,strength</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.SetConcrete(Revit.Elements.Element,System.Double,System.Double,System.Boolean)">
            <summary>
            Set concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <param name="compression">Compression.</param>
            <param name="shearStrengthReduction">Shear etrength reduction.</param>
            <param name="lightweight">Light weight.</param>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,concrete</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.InDocument">
            <summary>
            Get all physical property set (asset).
            </summary>
            <returns name="PropertySet">Physical property set.</returns>
            <search>material,physical,property,all</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Information(Revit.Elements.Element)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Description">Description.</returns>
            <returns name="Keywords">Keywords.</returns>
            <returns name="Subclass">Subclass.</returns>
            <returns name="Source">Source.</returns>
            <returns name="SourceUrl">Source Url.</returns>
            <search>material,physical,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Behavior(Revit.Elements.Element)">
            <summary>
            Get behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Behavior">Behavior as Revit enumeration type.</returns>
            <search>material,physical,behavior</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.ExpansionCoefficient(Revit.Elements.Element)">
            <summary>
            Get expansion coefficient (basic thermal).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="ExpansionCoefficient">Expansion coefficient.</returns>
            <returns name="ExpansionCoefficientX">Expansion coefficient X.</returns>
            <returns name="ExpansionCoefficientY">Expansion coefficient Y.</returns>
            <returns name="ExpansionCoefficientZ">Expansion coefficient Z.</returns>
            <returns name="ExpansionCoefficient1">Expansion coefficient 1.</returns>
            <returns name="ExpansionCoefficient2">Expansion coefficient 2.</returns>
            <search>material,physical,expansion,coefficient,thermal</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Density(Revit.Elements.Element)">
            <summary>
            Get density (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Density">Density.</returns>
            <search>material,physical,density,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.YoungModulus(Revit.Elements.Element)">
            <summary>
            Get young modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="YoungModulus">Young modulus.</returns>
            <returns name="YoungModulusX">Young modulus X.</returns>
            <returns name="YoungModulusY">Young modulus Y.</returns>
            <returns name="YoungModulusZ">Young modulus Z.</returns>
            <returns name="YoungModulus1">Young modulus 1.</returns>
            <returns name="YoungModulus2">Young modulus 2.</returns>
            <search>material,physical,young,modulu,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.PoissonRatio(Revit.Elements.Element)">
            <summary>
            Get poisson ratio (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="PoissonRatio">Poisson ratio.</returns>
            <returns name="PoissonRatioX">Poisson ratio X.</returns>
            <returns name="PoissonRatioY">Poisson ratio Y.</returns>
            <returns name="PoissonRatioZ">Poisson ratio Z.</returns>
            <returns name="PoissonRatio12">Poisson ratio 12.</returns>
            <returns name="PoissonRatio23">Poisson ratio 23.</returns>
            <search>material,physical,poisson,ratio,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.ShearModulus(Revit.Elements.Element)">
            <summary>
            Get shear modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="ShearModulus">Shear modulus.</returns>
            <returns name="ShearModulusX">Shear modulus X.</returns>
            <returns name="ShearModulusY">Shear modulus Y.</returns>
            <returns name="ShearModulusZ">Shear modulus Z.</returns>
            <returns name="ShearModulus12">Shear modulus 12.</returns>
            <search>material,physical,shear,modulu,mechanical</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Strength(Revit.Elements.Element)">
            <summary>
            Get strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="YieldStress">Yield stress.</returns>
            <returns name="TensileStrength">Tensile strength.</returns>
            <returns name="ThermalTreated">Thermal treated.</returns>
            <search>material,physical,strength</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.StrengthExtended(Revit.Elements.Element)">
            <summary>
            Get strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Species">Species.</returns>
            <returns name="Grade">Grade.</returns>
            <returns name="Bending">Bending.</returns>
            <returns name="ParallelCompression">Parallel compression.</returns>
            <returns name="PerpendicularCompression">Perpendicular compression.</returns>
            <returns name="ParallelShear">Parallel shear.</returns>
            <returns name="TensionParallel">Tension parallel.</returns>
            <returns name="TensionPerpendicular">Tension perpendicular.</returns>
            <returns name="AverageModulus">Average modulus.</returns>
            <returns name="Construction">Construction.</returns>
            <search>material,physical,strength</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Physical.Concrete(Revit.Elements.Element)">
            <summary>
            Get concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type.</param>
            <returns name="Compression">Compression.</returns>
            <returns name="ShearStrengthReduction">Shear strength reduction.</returns>
            <returns name="Lightweight">Light weight.</returns>
            <search>material,physical,concrete</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.Create(System.String,System.Enum)">
            <summary>
            Create thermal property set. 
            Note: If a thermal property exists it is being replaced!
            </summary>
            <param name="name">Name as string value.</param>
            <param name="type">Thermal type as enumeration type.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal,create</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate thermal property set (asset).
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="name">Name for the duplicated thermal property set.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal,duplicate</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.ByName(System.String)">
            <summary>
            Get thermal property set (asset) by name.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,appearance,name</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.SetInformation(Revit.Elements.Element,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="description">Description.</param>
            <param name="keywords">Keywords.</param>
            <param name="subclass">Subclass.</param>
            <param name="source">Source.</param>
            <param name="sourceUrl">Source Url.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.SetProperties(Revit.Elements.Element,System.Boolean,System.Enum,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set properties. Note: Can only be used for the thermal type Solid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="transmitsLight">Transmits light.</param>
            <param name="behavior">Thermal behavior as enumeration type.</param>
            <param name="thermalConductivity">Thermal conductivity.</param>
            <param name="specificHeat">Specific heat.</param>
            <param name="density">Density.</param>
            <param name="emissivity">Emissivity.</param>
            <param name="permeability">Permeability.</param>
            <param name="porosity">Porosity.</param>
            <param name="reflectivity">Reflectivity.</param>
            <param name="electricalResistivity">Electrical resistivity.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal,property,properties</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.SetBasicThermal(Revit.Elements.Element,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set basic thermal. Note: Can only be used for the thermal type Gas or Liquid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <param name="thermalConductivity">Thermal conductivity.</param>
            <param name="specificHeat">Specific heat.</param>
            <param name="density">Density.</param>
            <param name="emissivity">Emissivity.</param>
            <param name="gasViscosity">Gas viscosity.</param>
            <param name="compressibility">Compressibility.</param>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.InDocument">
            <summary>
            Get all thermal property set (asset).
            </summary>
            <returns name="PropertySet">Thermal property set.</returns>
            <search>material,thermal,all</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.Information(Revit.Elements.Element)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="Description">Description.</returns>
            <returns name="Keywords">Keywords.</returns>
            <returns name="Subclass">Subclass.</returns>
            <returns name="Source">Source.</returns>
            <returns name="SourceUrl">Source Url.</returns>
            <search>material,thermal,information</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.Properties(Revit.Elements.Element)">
            <summary>
            Get properties.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="TransmitsLight">Transmits light.</returns>
            <returns name="Behavior">Behavior.</returns>
            <returns name="ThermalConductivity">Thermal conductivity.</returns>
            <returns name="SpecificHeat">Specific heat.</returns>
            <returns name="Density">Density.</returns>
            <returns name="Emissivity">Emissivity.</returns>
            <returns name="Permeability">Permeability.</returns>
            <returns name="Porosity">Porosity.</returns>
            <returns name="Reflectivity">Reflectivity.</returns>
            <returns name="ElectricalResistivity">Electrical resistivity.</returns>
            <search>material,thermal,property,properties</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Thermal.BasicThermal(Revit.Elements.Element)">
            <summary>
            Get basic thermal.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type.</param>
            <returns name="ThermalConductivity">Thermal conductivity.</returns>
            <returns name="SpecificHeat">Specific heat.</returns>
            <returns name="Density">Density.</returns>
            <returns name="Emissivity">Emissivity.</returns>
            <returns name="GasViscosity">Gas viscosity.</returns>
            <returns name="Compressibility">Compressibility.</returns>
            <search>material,thermal</search>
        </member>
        <member name="P:Orchid.RevitMaterial.Visual.Asset.Category">
            <summary>
            The category of the asset.
            </summary>
            <returns name="string">String value.</returns>
            <search>material,asset,category</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Asset.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Asset.Purge(Revit.Application.Document)">
            <summary>
            Purge asset(s) in document.
            </summary>
            <returns name="watch">Add a watch node!</returns>
            <search>material,asset,purge</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Asset.ByCategory(System.String)">
            <summary>
            Get asset by category.
            </summary>
            <param name="category">Category as string value.</param>
            <returns name="Asset">Asset as Orchid type.</returns>
            <search>material,asset,category</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Asset.BySchema(System.String,System.Boolean)">
            <summary>
            Get asset(s) by schema, return distinct category.
            </summary>
            <param name="schema">Schema as string value.</param>
            <param name="default">Get the default asset?</param>
            <returns name="Asset">Asset (by distinct category) as Orchid type.</returns>
            <search>material,asset,schema,category</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.ToString">
            <summary>
            Wrapped string override.
            </summary>
            <returns></returns>
            <search>material,texture,</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Image(System.String)">
            <summary>
            Texture for an image input.
            </summary>
            <param name="path"></param>
            <returns name ="Texture">Image texture as Orchid type.</returns>
            <search>material,texture,image</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Checker">
            <summary>
            Texture for a checker input.
            </summary>
            <returns name ="Texture">Checker texture as Orchid type.</returns>
            <search>material,texture,checker</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Gradient">
            <summary>
            Texture for a gradient input.
            </summary>
            <returns name ="Texture">Gradient texture as Orchid type.</returns>
            <search>material,texture,gradient</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Marble">
            <summary>
            Texture for a marble input.
            </summary>
            <returns name ="Texture">Marble texture as Orchid type.</returns>
            <search>material,texture,marble</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Noise">
            <summary>
            Texture for a noise input.
            </summary>
            <returns name ="Texture">Noise texture as Orchid type.</returns>
            <search>material,texture,noise</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Speckle">
            <summary>
            Texture for a speckle input.
            </summary>
            <returns name ="Texture">Speckle texture as Orchid type.</returns>
            <search>material,texture,speckle</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Tiles">
            <summary>
            Texture for a tiles input.
            </summary>
            <returns name ="Texture">Tiles texture as Orchid type.</returns>
            <search>material,texture,tile</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Waves">
            <summary>
            Texture for a waves input.
            </summary>
            <returns name ="Texture">Waves texture as Orchid type.</returns>
            <search>material,texture,wave</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Wood">
            <summary>
            Texture for a wood input.
            </summary>
            <returns name ="Texture">Wood texture as Orchid type.</returns>
            <search>material,texture,wood</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Slider(System.Double)">
            <summary>
            Texture for a slider (double) input
            </summary>
            <param name="value">Value as double.</param>
            <returns name ="Texture">Slider texture as Orchid type.</returns>
            <search>material,texture,slider</search>
        </member>
        <member name="M:Orchid.RevitMaterial.Visual.Texture.Color(DSCore.Color)">
            <summary>
            Texture for a dynamo color input.
            </summary>
            <param name="color">Color as Dynamo type.</param>
            <returns name ="Texture">Color texture as Orchid type.</returns>
            <search>material,texture,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Dimension.ByReference(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Curve,System.Collections.Generic.List{Orchid.RevitProject.Datums.Reference},Revit.Elements.Element)">
            <summary>
            Creates a linear dimension from two references. 
            Note: This function only works for project files, see 
            family nodes for similar function for family files! 
            </summary>
            <param name="view">View.</param>
            <param name="line">Line.</param>
            <param name="reference">Reference as Orchid type.</param>
            <param name="dimensionType">linear dimension type.</param>
            <returns name="Dimension">Dimension.</returns>
            <search>dimension,reference</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Dimension.Reference(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the dimension reference plane(s).
            </summary>
            <param name="dimension">Dimension.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="Plane">Plane.</returns>
            <search>dimension,reference</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.DimensionType.InDocument(System.Boolean)">
            <summary>
            Get all dimension type in document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Type">Dimensiontype.</returns>
            <search>dimension,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.DimensionType.Style(Revit.Elements.Element)">
            <summary>
            Get the dimension type style.
            </summary>
            <returns name="Style">Dimensiontype.</returns>
            <search>dimension,style</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElement(Revit.Elements.Views.View,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at the element center point.
            </summary>
            <param name="view">View to tag.</param>
            <param name="element">Element to tag.</param>
            <param name="tagType">Tag type to use.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <param name="allowMultiple">Allow multiple tagging of the same element?</param>
            <returns name="Tag">Tag.</returns>
            <search>tag,element,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElementAndLocation(Revit.Elements.Views.View,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at a specified location point.
            </summary>
            <param name="view">View to tag.</param>
            <param name="element">Element to tag.</param>
            <param name="tagType">Tag type to use.</param>
            <param name="location">Location point, default set to null -> element center.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <param name="allowMultiple">Allow multiple tagging of the same element?</param>
            <returns name="Tag">Tag.</returns>
            <search>tag element,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.MoveToHostLocation(Revit.Elements.Element,System.Boolean)">
            <summary>
            Move tag to the host (element) location point.
            </summary>
            <param name="tag">Tag.</param>
            <param name="leader">Turn potential leader on/off (true/false).</param>
            <returns name="Tag">Tag.</returns>
            <search>tag,move,host</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.MoveToHostLocation(Revit.Elements.Element,Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Move tag in a specific view to the host (element) location point.
            </summary>
            <param name="tag">Tag.</param>
            <param name="view">View, if none provided the activeview is used.</param>
            <param name="leader">Turn potential leader on/off (true/false).</param>
            <returns name="Tag">Tag.</returns>
            <search>tag,move,host</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElement(Revit.Elements.Views.View,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at the element center point.
            </summary>
            <param name="view">View to tag.</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area).</param>
            <param name="tagType">Tag type to use.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <param name="allowMultiple">Allow multiple tagging of the same element?</param>
            <returns name="Tag">Tag.</returns>
            <search>tag,room,space,area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElementAndLocation(Revit.Elements.Views.View,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at a specified location point.
            </summary>
            <param name="view">View to tag.</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area).</param>
            <param name="tagType">Tag type to use.</param>
            <param name="location">Location point, default set to null -> element center.</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults set to true!</param>
            <param name="addLeader">Optional: Add a leader, defaults set to false!</param>
            <param name="allowMultiple">Allow multiple tagging of the same element?</param>
            <returns name="Tag">Tag.</returns>
            <search>tag,room,space,area,annotate,documentation</search>
        </member>
        <member name="T:Orchid.RevitProject.Categories.AlterCategory">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.ToCategory(System.Object)">
            <summary>
            convert object to Category, either by from string or Revit.Elements.Category.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.GetOverrides(Autodesk.Revit.DB.Document)">
            <summary>
            Get category override settings in document
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.AllCategories(Autodesk.Revit.DB.Document)">
            <summary>
            Get a CategorySet for all categories.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.ToCategorySet(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Revit.Elements.Category})">
            <summary>
            Convert a list of categories to a category set.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.Purge(Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Purge category element(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="category">Category to purge.</param>
            <search>document,project,category,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.InDocument(Revit.Application.Document)">
            <summary>
            Get all categories (BuiltInCategory) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Category">Category.</returns>
            <search>category,BuiltInCategory,BIC,document</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.MaterialHostable(Revit.Application.Document)">
            <summary>
            Get all categories in document that are material hostable.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Category">Category.</returns>
            <search>material,category,document</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.ByCategoryType(System.Enum)">
            <summary>
            Get all categories by category (Autodesk.Revit) ennumeration type.
            </summary>
            <param name="categoryType">CategoryType as enumeration type.</param>
            <returns name="Category">Category.</returns>
            <search>category,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.CategoryType(System.Object)">
            <summary>
            Get the category type.
            </summary>
            <param name="category">Category.</param>
            <returns name="CategoryType">CategoryType as string.</returns>
            <search>category,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.Imported(Revit.Application.Document)">
            <summary>
            Imported category(ies) in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <returns name="Category">Category.</returns>
            <search>category,import</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.Category.DeleteImported(Revit.Application.Document)">
            <summary>
            Delete imported category(ies) in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>category,import,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Architecture(System.Boolean)">
            <summary>
            Get architecture filtered categories in current document.
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,architect</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Structure(System.Boolean)">
            <summary>
            Get structure filtered categories in current document.
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,structure</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Mechanical(System.Boolean)">
            <summary>
            Get mechanical filtered categories in current document.
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,mechanical</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Electrical(System.Boolean)">
            <summary>
            Get electrical filtered categories in current document.
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,electrical</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Piping(System.Boolean)">
            <summary>
            Get piping filtered categories in current document.
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,pipe</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.CategorySet.Infrastructure(System.Boolean)">
            <summary>
            Get infrastructure filtered categories in current document. 
            </summary>
            <param name="instance">Choose if type (true) or instance (false) parameter is needed!?</param>
            <returns name="Category">Category.</returns>
            <search>category,architect</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.Create(System.Object,System.String)">
            <summary>
            Create subcategory by category in document.
            </summary>
            <param name="category">Category.</param>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Subcategory.</returns>
            <search>category,sub,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.Delete(System.Object,System.Object)">
            <summary>
            Delete subcategory by category in document.
            </summary>
            <param name="category">Category.</param>
            <param name="subCategory">The subcategory as string or category.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>category,sub,delete,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.ByCategory(Revit.Application.Document,System.Object)">
            <summary>
            Get sub categories by category in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="category">Category.</param>
            <returns name="SubCategory">Subcategory.</returns>
            <search>category,sub</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.ByName(System.Object,System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="category">Category.</param>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Subcategory.</returns>
            <search>category,sub,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.ByName(System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="name">Name of the subcategory.</param>
            <returns name="SubCategory">Subcategory.</returns>
            <search>category,sub,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Categories.SubCategory.ById(System.Int32)">
            <summary>
             Get subcategory by by id (integer value) in document.
            </summary>
            <param name="id">Integer value for the subcategory.</param>
            <returns name="SubCategory">Subcategory.</returns>
            <search>category,sub,id</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Attribute.InDocument">
            <summary>
            Get all document attribute system familes in current project.
            </summary>
            <returns name="ElementType">ElementType.</returns>
            <returns name="FamilyName">Family name as string.</returns>
            <search>document,attribute,system,family,tag,elevation,section,level,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Attribute.InDocument(Revit.Application.Document)">
            <summary>
            Get all document attribute system familes.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="FamilyName">Family name as string.</returns>
            <search>document,attribute,system,family,tag,elevation,section,level,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Attribute.ByName(System.String)">
            <summary>
            Get document attribute system family by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="ElementType">ElementType.</returns>
            <search>document,attribute,system,family,tag,elevation,section,level,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Attribute.ByFamilyName(System.String)">
            <summary>
            Get document attribute system family by family name in current document.
            </summary>
            <param name="name">FamilyName as string value.</param>
            <returns name="ElementType">ElementType.</returns>
            <search>document,attribute,system,family,tag,elevation,section,level,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.InDocument">
            <summary>
            Get all design option in current project.
            </summary>
            <returns name="DesignOption">Design option.</returns>
            <search>design,option,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.InDocument(Revit.Application.Document)">
            <summary>
            Get all design option in project.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="DesignOption">Design option.</returns>
            <search>design,option,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ByDesignOptionSet(Revit.Elements.Element)">
            <summary>
            Get design option(s) by design option set in current document.
            </summary>
            <param name="designOptionSet">Design option set.</param>
            <returns name="designOption">Design option.</returns>
            <search>design,option,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ByName(System.String)">
            <summary>
            Get design option by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="DesignOption">Design option.</returns>
            <search>design,option,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get design option by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string value.</param>
            <returns name="DesignOption">Design option.</returns>
            <search>design,option,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.Element(Revit.Elements.Element)">
            <summary>
            Get element(s) in a design option.
            </summary>
            <param name="designOption">Design option.</param>
            <returns name="Element">Element(s).</returns>
            <search>design,option,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.ElementInPrimary">
            <summary>
            Get element(s) in primary design option.
            </summary>
            <returns name="Element">Element(s).</returns>
            <search>design,option,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOption.IsPrimary(Revit.Elements.Element)">
            <summary>
            Verify if design option is primary.
            </summary>
            <param name="designOption">Design option.</param>
            <returns name="boolean">True if design option is primary.</returns>
            <search>design,option,primary</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.InDocument">
            <summary>
            Get all design option set in current project.
            </summary>
            <returns name="DesignOptionSet">Design option set.</returns>
            <search>design,option,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.InDocument(Revit.Application.Document)">
            <summary>
            Get all design option set in project.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="DesignOptionSet">Design option set.</returns>
            <search>design,option,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ByDesignOption(Revit.Elements.Element)">
            <summary>
            Get design option set by design option.
            </summary>
            <param name="designOption">Design option.</param>
            <returns name="DesignOptionSet">Design option set.</returns>
            <search>design,option,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ByName(System.String)">
            <summary>
            Get design option by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="DesignOptionSet">Design option set.</returns>
            <search>design,option,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get design option by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string value.</param>
            <returns name="DesignOptionSet">Design option set.</returns>
            <search>design,option,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.DesignOptionSet.ElementInPrimary(Revit.Elements.Element)">
            <summary>
            Get element(s) in primary design option.
            </summary>
            <param name="designOptionSet">Design option set.</param>
            <returns name="Element">Element(s).</returns>
            <search>design,option,element</search>
        </member>
        <member name="T:Orchid.RevitProject.Common.AlterDocument">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.InitGenericDocument(Revit.Application.Document)">
            <summary>
            Initiate document and safe cast to Revit document, including project file test.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.InitProjectDocument(Revit.Application.Document)">
            <summary>
            Initiate document and safe cast to Revit document, including project file test.
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Common.Document.Current">
            <summary>
            Get current (project) document. If you need a family document instead, 
            please find the node "FamilyDocument.Current"!
            </summary>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,current</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Name(Revit.Application.Document,System.Boolean)">
            <summary>
            Get the current document name.
            </summary>
            <param name="document">Project document (rvt).</param>
             <param name="withExtension">Include extension? default is set to false!</param>
            <returns name="string">The name of the document.</returns>
            <search>document,project,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.BackgroundOpen(System.String)">
            <summary>
            Open documents in background.
            </summary>
            <param name="file">File (path) to open in the background.</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,open,background</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.BackgroundOpen(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Open documents in background.
            </summary>
            <param name="file">File (path) to open in the background.</param>
            <param name="detachFromCentral">Detach from central?</param>
            <param name="discardWorksets">Discard worksets?</param>
            <param name="audit">Audit the document?</param>
            <param name="unload">Force unload of Revit document link?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,open,background</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Close(Revit.Application.Document,System.Boolean)">
            <summary>
            Close document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="save">Save opened document?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,close</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Opened">
            <summary>
            Get background opened documents.
            </summary>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,open</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Save(Revit.Application.Document,System.Boolean)">
            <summary>
            Save document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="compact">Save using compact mode?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,save</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SaveAs(Revit.Application.Document,System.String,System.Boolean)">
            <summary>
            SaveAs document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name for the document incl. path.</param>
            <param name="overwrite">Overwrite existing document?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,save</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SaveAs(Revit.Application.Document,System.String,System.Boolean,System.Boolean)">
            <summary>
            SaveAs document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name for the document incl. path.</param>
            <param name="overwrite">Overwrite existing document?</param>
            <param name="saveAsCentral">SaveAs central document?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>document,project,save</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.LoadFamily(System.Collections.Generic.List{Revit.Application.Document},System.Collections.Generic.List{System.String})">
            <summary>
            Load family by file name into document(s), existing family will be overwritten.
            However, do consider to use "Family.Load" instead!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="familyFile">Path to the family file(s).</param>
            <returns name="Document">Document (project or family).</returns>
            <search>document,project,load,family</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.NewProject(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create new project by name.
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path.</param>
            <param name="template">Project template(s) incl. path.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,new,project,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ImportImage(System.String,System.Boolean)">
            <summary>
            Import Image into document.
            </summary>
            <param name="path">Image path including file name and extension.</param>
            <param name="overwrite">Overwrite existing images?</param>
            <returns name="ImageType">ImageType.</returns>
            <search>document,project,import,image</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Directory(Revit.Application.Document)">
            <summary>
            Get the directory of the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Directory">Directory as string.</returns>
            <search>document,project,directory</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Path(Revit.Application.Document,System.Boolean)">
            <summary>
            Get the full path of the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="withExtension">Include extension? default is set to true!</param>
            <returns name="string">Full path of the document.</returns>
            <search>document,project,path</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Unit(Revit.Application.Document)">
            <summary>
            Get the display unit of the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="string">The display unit of the document.</returns>
            <search>document,project,unit</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Info(Revit.Application.Document)">
            <summary>
            Get the document info.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="info">Document info.</returns>
            <search>document,project,info</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.EnableWorksharing(Revit.Application.Document,System.String)">
            <summary>
            Enable worksharing in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name for the user workset, if none is provided is the default name set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,work,shar</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.VolumeComputation(Revit.Application.Document,System.Boolean)">
            <summary>
            Compute volumes of spatial element in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="state">State for computation.</param>
            <search>document,project,comput,volum</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.Purge(Revit.Application.Document,System.Boolean)">
            <summary>
            Purge document. Set "completely" to true for a comprehensive purge!
            Note: "Completely" purges view templates, parameters, parameter filters
            and line styles/patterns.
            Furthermore, materials and materials assets are purged that are used in
            "peripheral" elements and settings.
            This function(completely) may take a while since it is evaluating many
            objects in the document!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="completely">Includes purging for a comprehensive purge!</param>
            <search>document,project,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ProjectParameters(Revit.Application.Document,System.Boolean)">
            <summary>
            Get all project parameter elements in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="onlyDocument">Get only the document project parameters? e.g. do not include parameters used in MEP systems!</param>
            <returns name="ParameterElement">List of parameter elements.</returns>
            <returns name="Definition">List of definitions.</returns>
            <search>document,project,parameter,project</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.GlobalParameters(Revit.Application.Document)">
            <summary>
            Get all global parameter elements in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="ParameterElement">List of parameter elements.</returns>
            <returns name="Definition">List of definitions.</returns>
            <search>document,project,parameter,global</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SharedParameters(Revit.Application.Document,System.Boolean,System.Boolean)">
            <summary>
            Get all shared parameter elements in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="onlyDocument">Get only the document shared parameters? e.g. do not include shared parameters hosted in families!</param>
            <param name="onlyVisible">Get only visible shared parameters?</param>
            <returns name="ParameterElement">List of parameter elements.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
            <search>document,project,parameter,share</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ContainCategory(System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Does document contain category?
            </summary>
            <param name="category">Category to validate is contained in the document.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>document,project,contain,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ContainType(System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            Does document contain type?
            </summary>
            <param name="type">Type to validate is contained in the document.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>document,project,contain,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ExportDWG(Revit.Application.Document,Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Views.View},System.String,System.Boolean)">
            <summary>
            Export to DWG.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">Export option.</param>
            <param name="view">View as Dynamo type.</param>
            <param name="file">The export file name excl. extension and incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,export,dwg</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ExportDXF(Revit.Application.Document,Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Views.View},System.String,System.Boolean)">
            <summary>
            Export to DXF.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">Export option.</param>
            <param name="view">View as Dynamo type.</param>
            <param name="file">The export file name excl. extension and incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,export,dxf</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ExportDGN(Revit.Application.Document,Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Views.View},System.String,System.Boolean)">
            <summary>
            Export to DGN.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">Export option.</param>
            <param name="view">View as Dynamo type.</param>
            <param name="file">The export file name excl. extension and incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,export,dgn</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ExportDWF(Revit.Application.Document,System.Object,System.Collections.Generic.List{Revit.Elements.Views.View},System.String,System.Boolean)">
            <summary>
            Export to DWF.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">Export option.</param>
            <param name="view">View as Dynamo type.</param>
            <param name="file">The export file name excl. extension and incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,export,dwf</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopyDraftingView(Revit.Application.Document,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy drafting view from source document to target document
            If drafting view exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="draftingView">Drafting view to copy.</param>
            <returns name="DraftingView">Copied drafting view.</returns>
            <search>document,project,copy,drafting,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopyElement(Revit.Application.Document,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy element from source document to target document
            If element exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="element">Element to copy.</param>
            <returns name="Element">Copied element.</returns>
            <search>document,project,copy,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.CopySchedule(Revit.Application.Document,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy schedule from source document to target document
            If schedule exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="schedule">Schedule to copy.</param>
            <returns name="Schedule">Copied schedule.</returns>
            <search>document,project,copy,schedule</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByCategory(Revit.Application.Document,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Transfer project standards by category from source document to target document.
            If elements exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="category">Category as string or Dynamo type.</param>
            <param name="append">Append only new elements or add new duplicate elements?</param>
            <returns name="Element">Transfered element.</returns>
            <search>document,project,transfer,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByElementType(Revit.Application.Document,Revit.Application.Document,System.Object,System.Boolean)">
            <summary>
            Transfer ElementType from source document to target document.
            If ElementType exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="elementType">Type as string or Dynamo type.</param>
            <param name="append">Append only new elements or add new duplicate elements?</param>
            <returns name="ElementType">Transfered element type.</returns>
            <search>document,project,transfer,element,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferByFamily(Revit.Application.Document,Revit.Application.Document,System.Object,System.Boolean)">
            <summary>
            Transfer Family from source document to target document.
            If Family members exist will a duplicate be created!?
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="family">Family as string or Dynamo type.</param>
            <param name="append">Append to Family members or add new duplicate Family?</param>
            <returns name="Family">Transfered family.</returns>
            <search>document,project,transfer,family</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.TransferSubCategory(Revit.Application.Document,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Transfer subcategory from source document to target document.
            If overwrite is set to true is existing category being overwritten!
            </summary>
            <param name="source">Source as Document.</param>
            <param name="target">Target as Document.</param>
            <param name="subCategory">Subcategory as Dynamo type.</param>
            <param name="overwrite">Overwrite existing categories?</param>
            <returns name="SubCategory">Transfered subcategory.</returns>
            <search>document,project,transfer,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.ActiveView(Revit.Application.Document)">
            <summary>
            Get the active view in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="View">The active view.</returns>
            <search>document,project,active,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.OpenView(Revit.Elements.Views.View)">
            <summary>
            Open view in the active document.
            </summary>
            <param name="view">View to open.</param>
            <returns name="View">New active view.</returns>
            <search>document,project,open,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.SetStartingView(Revit.Application.Document,Revit.Elements.Views.View)">
            <summary>
            Set the starting view in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="view">The view to set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>document,project,starting,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Document.StartingView(Revit.Application.Document)">
            <summary>
            Get the starting view in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="View">View.</returns>
            <search>document,project,starting,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateAcadOption(Revit.Application.Document,System.String,System.Enum,System.String)">
            <summary>
            Create DWG/DXF export option.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DWG/DXF export option name.</param>
            <param name="propOverride">Property overrides as enumeration type. Default value is according to the Revit localization.</param>
            <param name="layerMapping">Layer mapping file name. Default value is according to the Revit localization.</param>
            <returns name="Option">DWG/DXF export option.</returns>
            <search>export,option,acad,dwg,dxf,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.AcadOptionSettings(Revit.Application.Document,Revit.Elements.Element,System.Enum,System.String,System.String,DSCore.Color,System.Enum,System.Enum,System.Enum,System.Enum,System.Boolean)">
            <summary>
            Set Lines, Patterns, Text &amp; Fonts, Colors, Solids, 
            and Units &amp; Coordinates in DWG/DXF export option.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">DWG/DXF export option.</param>
            <param name="lineScaling">The scaling mode for the line type as Revit enumeration type.</param>
            <param name="linetypesFile">Path to linetypes file.</param>
            <param name="hatchPatternsFile">Path to hatch patterns file.</param>
            <param name="hatchBackgroundColor">Set hatch background color. Default is white.</param>
            <param name="textTreatment">Text behavior when exported as enumeration type.</param>
            <param name="colorMode">Export colors as enumeration type.</param>
            <param name="exportOfSolids">Export of solids as enumeration type.</param>
            <param name="targetUnit">Target unit as enumeration type.</param>
            <param name="sharedCoordinate"></param>
            <returns name="Option">DWG/DXF export option.</returns>
            <search>export,option,acad,dwg,dxf</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.AcadOptionGenerel(Revit.Application.Document,Revit.Elements.Element,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Enum)">
            <summary>
            Set General in DWG/DXF export option.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="option">DWG/DXF export option.</param>
            <param name="exportingAreas"></param>
            <param name="nonplotSuffix"></param>
            <param name="hideScopeBox"></param>
            <param name="hideReferencePlane"></param>
            <param name="hideUnreferenceViewTags"></param>
            <param name="preserveCoincidentLines"></param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs). Default value is false for mergedViews.</param>
            <param name="fileVersion">ACAD version as Revit enumeration type.</param>
            <returns name="Option">DWG/DXF export option.</returns>
            <search>export,option,acad,dwg,dxf,generel</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.AcadOptions">
            <summary>
            Get all DWG/DXF export option.
            </summary>
            <returns name="Option">DWG/DXF export option.</returns>
            <search>export,option,acad,dwg,dxf</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.AcadByName(Revit.Application.Document,System.String)">
            <summary>
            Get DWG/DXF export option by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Export option name.</param>
            <returns name="Option">Export option.</returns>
            <search>export,option,acad,dwg,dxf,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDGNOption(Revit.Application.Document,System.String,System.Boolean,System.Enum)">
            <summary>
            Create dgn export option.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DGN export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs). Default value is false for mergedViews.</param>
            <param name="fileVersion">DGN file format as Revit enumeration type.</param>
            <returns name="Option">DGN export option.</returns>
            <search>export,option,dgn,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDGNOption(Revit.Application.Document,System.String,System.Boolean,System.Enum,System.String,System.String,System.String)">
            <summary>
            Create dgn export option.
            LayerMapping builtin values. DGNV7, AIA, CP83, BS1192, and ISO13567.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DGN export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs). Default value is false for mergedViews.</param>
            <param name="fileVersion">DGN file format as Revit enumeration type.</param>
            <param name="layerMapping">Layer mapping file name. Default value is according to the Revit localization.</param>
            <param name="seedName">The name of the DGN seed. Default value of seedName is empty.</param>
            <param name="hatchPatternsFile">Path to hatch patterns file.</param>
            <returns name="Option">DGN export option.</returns>
            <search>export,option,dgn,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.DGNOptions">
            <summary>
            Get all dgn export option.
            </summary>
            <returns name="Option">DGN export option.</returns>
            <search>export,option,dgn</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.DGNByName(Revit.Application.Document,System.String)">
            <summary>
            Get dgn export option by name in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DGN export option name.</param>
            <returns name="Option">DGN export option.</returns>
            <search>export,option,dgn,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDWFOption(System.Boolean)">
            <summary>
            Create dwf export option.
            </summary>
            <param name="mergedViews">Merge views into combined file?</param>
            <returns name="Option">DWF export option.</returns>
            <search>export,option,dwf,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDWFxOption(System.Boolean)">
            <summary>
            Create dwfx export option.
            </summary>
            <param name="mergedViews">Merge views into combined file?</param>
            <returns name="Option">DWF export option.</returns>
            <search>export,option,dwf,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDWGOption(Revit.Application.Document,System.String,System.Boolean,System.Enum)">
            <summary>
            Create dwg export option.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DWG export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs). Default value is false for mergedViews.</param>
            <param name="fileVersion">ACAD version as Revit enumeration type.</param>
            <returns name="Option">DWG export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDWGOption(Revit.Application.Document,System.String,System.Boolean,System.Enum,System.Enum,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create dwg export option.
            LayerMapping builtin values. AIA, CP83, BS1192, and ISO13567.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DWG export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs)? Default value is false!</param>
            <param name="fileVersion">ACAD version as Revit enumeration type.</param>
            <param name="lineScaling">The scaling mode for the line type as Revit enumeration type.</param>
            <param name="layerMapping">Layer mapping file name. Default value is according to the Revit localization.</param>
            <param name="linetypesFile">Path to linetypes file.</param>
            <param name="hatchPatternsFile">Path to hatch patterns file.</param>
            <param name="sharedCoordinate">Export using shared coordinate? Default value is false!</param>
            <returns name="Option">DWG export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDXFOption(Revit.Application.Document,System.String,System.Boolean,System.Enum)">
            <summary>
            Create dxf export option.
            Note: the dxf export option will be returned as a
            "ExportDWGSetting" due to the Revit API!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DXF export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs). Default value is false for mergedViews.</param>
            <param name="fileVersion">ACAD version as Revit enumeration type.</param>
            <returns name="Option">DXF export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.CreateDXFOption(Revit.Application.Document,System.String,System.Boolean,System.Enum,System.Enum,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create dxf export option.
            Note: the dxf export option will be returned as a
            "ExportDWGSetting" due to the Revit API!
            LayerMapping builtin values. AIA, CP83, BS1192, and ISO13567.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DXF export option name.</param>
            <param name="mergedViews">Whether to merge all views in one file (via XRefs)? Default value is false!</param>
            <param name="fileVersion">ACAD version as Revit enumeration type.</param>
            <param name="lineScaling">The scaling mode for the line type as Revit enumeration type.</param>
            <param name="layerMapping">Layer mapping file name. Default value is according to the Revit localization.</param>
            <param name="linetypesFile">Path to linetypes file.</param>
            <param name="hatchPatternsFile">Path to hatch patterns file.</param>
            <param name="sharedCoordinate">Export using shared coordinate? Default value is false!</param>
            <returns name="Option">DXF export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.DWG">
            <summary>
            Get all dwg and dxf export option.
            </summary>
            <returns name="Option">DWG/DXF export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.ExportOption.DWGByName(Revit.Application.Document,System.String)">
            <summary>
            Get dwg and dxf export option by name in the document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">DWG/DXF export option name.</param>
            <returns name="Option">DWG/DXF export option.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Common.IFC.About">
            <summary>
            About using the IfxExport nodes.
            </summary>
            <returns name="watch">Add a watch node!</returns>
            <search>ifc,about</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Imports.InDocument(Revit.Application.Document,System.Boolean)">
            <summary>
            Get imported item(s) in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>import,item,cad</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Imports.Purge(Revit.Application.Document)">
            <summary>
            Purge imported item(s) in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>import,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetRevitFile(Revit.Application.Document,System.String,System.Enum,System.Boolean,Autodesk.DesignScript.Geometry.Point,System.Enum,System.Enum)">
            <summary>
            Link external revit file in document.
            Note: Cloud links cant be created!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="file">File (path) to link.</param>
            <param name="positioning">Link positioning as Revit enumeration type.</param>
            <param name="atBasePoint">Link revit file at base point?</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="attachmentType">Link AttachmentType as Revit enumeration type.</param>
            <param name="pathType">Link PathType as Revit enumeration type.</param>
            <returns name="Instance">External link instance.</returns>
            <returns name="Link">Revit external link.</returns>
            <returns></returns>
            <search>link,revit,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetCadFile(Revit.Application.Document,System.String,Autodesk.DesignScript.Geometry.Point,System.Boolean,Revit.Elements.Views.View,System.Boolean,System.Boolean)">
            <summary>
            Link external cad file in document. 
            Defaults: positioning set to Origin, unit set to Default,
            colorMode set to Preserved!
            Note: Cloud links cant be created!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="file">File (path) to link.</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="visibleLayersOnly">Link to the visible layers only?</param>
            <param name="view">Place the link at view (if orient to view is set to true).</param>
            <param name="orientToView">Orient the link to view?</param>
            <param name="thisViewOnly">Link to this view only?</param>
            <returns name="Instance">External link instance.</returns>
            <returns name="Link">CAD external link.</returns>
            <returns></returns>
            <search>link,cad,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetCadFile(Revit.Application.Document,System.String,System.Enum,System.Enum,System.Enum,Autodesk.DesignScript.Geometry.Point,System.Boolean,Revit.Elements.Views.View,System.Boolean,System.Boolean)">
            <summary>
            Link external cad file in document.
            Note: Cloud links cant be created!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="file">File (path) to link.</param>
            <param name="positioning">Link positioning.</param>
            <param name="unit">Link unit.</param>
            <param name="colorMode">Link color mode.</param>
            <param name="referencePoint">Reference point for the file.</param>
            <param name="visibleLayersOnly">Link to the visible layers only?</param>
            <param name="view">Place the link at view (if orient to view is set to true).</param>
            <param name="orientToView">Orient the link to view?</param>
            <param name="thisViewOnly">Link to this view only?</param>
            <returns name="Instance">External link instance.</returns>
            <returns name="Link">CAD external link.</returns>
            <returns></returns>
            <search>link,cad,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.ConvertToLink(Revit.Application.Document,Revit.Elements.Element)">
            <summary>
            Convert link instance to link type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="instance">External link instance.</param>
            <returns name="Link">External link.</returns>
            <search>link,convert,instance,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Reload(Revit.Application.Document,Revit.Elements.Element,System.Enum)">
            <summary>
            Reload external linked file in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="link">External link.</param>
            <param name="pathType">Link PathType as Revit enumeration type.</param>
            <returns name="Link">External link.</returns>
            <search>link,load</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Unload(Revit.Elements.Element)">
            <summary>
            Unload external linked file in document.
            </summary>
            <param name="link">External link.</param>
            <returns name="Link">External link.</returns>
            <search>link,load</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Repath(Revit.Application.Document,Revit.Elements.Element,System.String,System.Enum)">
            <summary>
            Repath external linked file in document.
            Note: Cloud path cant be used! ...and if Cloud path is being
            replaced by a local path, the document might need to be
            saved and reopened before link are visible.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="link">External link.</param>
            <param name="file">File (path) to set (repath).</param>
            <param name="pathType">Link PathType as Revit enumeration type.</param>
            <returns name="Link">External link.</returns>
            <search>link,path</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.AttachmentType(Revit.Application.Document,Revit.Elements.Element,System.Enum)">
            <summary>
            Set the link attachment type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="link">External link.</param>
            <param name="attachmentType">Link AttachmentType as Revit enumeration type.</param>
            <returns name="Link">External link.</returns>
            <search>link,attachment,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.PathType(Revit.Application.Document,Revit.Elements.Element,System.Enum)">
            <summary>
            Set the link path type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="link">External link.</param>
            <param name="pathType">Link PathType as Revit enumeration type.</param>
            <returns name="Link">External link.</returns>
            <search>link,path,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.CopyElement(Revit.Elements.Element,Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy element from link element to target document
            If element exist will a duplicate be created!?
            </summary>
            <param name="instance">External link instance.</param>
            <param name="target">Target as Document of Revit type.</param>
            <param name="element">Element to copy.</param>
            <returns name="Element">Copied element.</returns>
            <search>link,copy,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.SetLocation(Revit.Application.Document,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Update an linked instance location.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="instance">External link.</param>
            <param name="referencePoint">Reference point for the link.</param>
            <search>link,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get external link in document by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name of the link.</param>
            <returns name="Link">External link.</returns>
            <returns name="Type">External link type.</returns>
            <search>link,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Document(Revit.Elements.Element)">
            <summary>
            Get instance document.
            </summary>
            <param name="instance">External link instance.</param>
            <returns name="Document">Document.</returns>
            <search>link,instance,document</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Instance(Revit.Elements.Element)">
            <summary>
            Get link instance from link in document. 
            Note: If link is not loaded is null returned!
            </summary>
            <param name="link">External link.</param>
            <returns name="Instance">External Link instance.</returns>
            <search>link,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Info(Revit.Elements.Element)">
            <summary>
            Get external link informations.
            </summary>
            <param name="link">External link.</param>
            <returns name="Name">Name of the linked document.</returns>
            <returns name="Status">Status of the linked document.</returns>
            <returns name="ReferenceType">Reference type of the linked document.</returns>
            <returns name="Path">Path of the linked document.</returns>
            <returns name="PathType">Path type of the linked document.</returns>
            <search>link,manage,status,reference,type,path</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.IsLoaded(Revit.Elements.Element)">
            <summary>
            Verify if Revit link is loaded or not.
            </summary>
            <param name="link">External link.</param>
            <returns name="boolean">Whether link is loaded or not.</returns>
            <search>link,load</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Location(Revit.Elements.Element)">
            <summary>
            Get copy monitored element in document.
            </summary>
            <param name="instance">External link.</param>
            <returns name="Point">Point.</returns>
            <search>link,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.LinkByType(Revit.Application.Document,System.String,System.Boolean)">
            <summary>
            Get external link in document by link type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="linkType">Type of link as string</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Link">External link.</returns>
            <search>link,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.Indocument(Revit.Application.Document,System.Boolean)">
            <summary>
            Get external link in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Link">External link.</returns>
            <returns name="Type">External link type.</returns>
            <search>link,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.RevitLink(Revit.Application.Document,System.Boolean)">
            <summary>
            Get external revit link in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Link">Revit external link.</returns>
            <search>link,revit,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Link.CadLink(Revit.Application.Document,System.Boolean)">
            <summary>
            Get external cad link in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Link">CAD external link.</returns>
            <search>link,cad,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Dulicate a project location and set its name.
            </summary>
            <param name="location">Project location.</param>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
            <search>location,duplicate,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Set(Revit.Elements.Element)">
            <summary>
            Set project location.
            </summary>
            <param name="location">Project location.</param>
            <returns name="Location">Project location.</returns>
            <search>location,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SetName(Revit.Elements.Element,System.String)">
            <summary>
            Set the name for the project location.
            </summary>
            <param name="location">Project location.</param>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
            <search>location,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Current">
            <summary>
            Get current project location.
            </summary>
            <returns name="Location">Project location.</returns>
            <search>location,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ByName(System.String)">
            <summary>
            Get project location by name in current document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
            <search>location,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get project location by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string value.</param>
            <returns name="Location">Project location.</returns>
            <search>location,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.InDocument">
            <summary>
            Get current project locations.
            </summary>
            <returns name="Location">Project locations.</returns>
            <search>location,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.InDocument(Revit.Application.Document)">
            <summary>
            Get project locations.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Location">Project locations.</returns>
            <search>location,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.Rotation(Revit.Application.Document)">
            <summary>
            Get current rotation by document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="double">Rotation angle.</returns>
            <search>location, rotation, angle</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.InternalOrigin(Revit.Application.Document,System.Boolean)">
            <summary>
            Get internal origin by document, in relation to byOrigin selection.
            Note. The returned value is the negated value of the project position!
            Furthermore, It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="Point">Point.</returns>
            <search>location, internal, origin, point</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.BasePoint(Revit.Application.Document,System.Boolean)">
            <summary>
            Get current project base point by document, in relation to byOrigin selection.
            Note. The returned value is the negated value of the project position!
            Furthermore, It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="Point">Point, is the negated value of the project position!</returns>
            <search>location, project, base, point</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SurveyPoint(Revit.Application.Document,System.Boolean)">
            <summary>
            Get current survey point by document, in relation to byOrigin selection.
            Note. The returned value is the negated value of the project position!
            Furthermore, It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="Point">Point, is the negated value of the project position!</returns>
            <search>location, survey, point</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SetProjectPosition(Revit.Application.Document,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the active project position, in relation to byOrigin selection.
            Note. It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <param name="northSouth">North/South offset.</param>
            <param name="eastWest">East/West offset.</param>
            <param name="elevation">Elevation according to ground level.</param>
            <param name="angle">Angle from True North.</param>
            <search>location,project,position</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SetProjectPosition(Revit.Elements.Element,System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the project position by element or location, in relation to byOrigin selection.
            This is similar to the Revit command "Specify Coordinates at Point".
            Note. It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="element">Element  or location.</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <param name="northSouth">North/South offset.</param>
            <param name="eastWest">East/West offset.</param>
            <param name="elevation">Elevation according to ground level.</param>
            <param name="angle">Angle from True North.</param>
            <search>location,project,position</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ProjectPoint(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the project point by location, in relation to byOrigin selection.
            Note. The returned value is the negated value of the project position!
            Furthermore, It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="location">Project location.</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="Point">Point, is the negated value of the project position!</returns>
            <search>location, point</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ProjectPosition(Revit.Application.Document,System.Boolean)">
            <summary>
            Get the project position by document, in relation to byOrigin selection.
            Note. It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="NorthSouth">North/South offset.</returns>
            <returns name="EastWest">East/West offset.</returns>
            <returns name="Elevation">Elevation according to ground level.</returns>
            <returns name="Angle">Angle from True North.</returns>
            <search>location,project,position</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.ProjectPosition(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the project position by element or location, in relation to byOrigin selection.
            This is similar to the Revit command "Report Shared Coordinates".
            Note. It is extremely bad NOT to have Internal Origin and Project Base Point as the exact same point!
            </summary>
            <param name="element">Element or location.</param>
            <param name="byOrigin">Boolean value if point should be by internal origin (true) or by project base point (false)?</param>
            <returns name="NorthSouth">North/South offset.</returns>
            <returns name="EastWest">East/West offset.</returns>
            <returns name="Elevation">Elevation according to ground level.</returns>
            <returns name="Angle">Angle from True North.</returns>
            <search>location,project,position</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Location.SiteLocation">
            <summary>
            Get the site location properties.
            </summary>
            <returns name="Latitude">The latitude of the site location.</returns>
            <returns name="Longitude">The longitude of the site location.</returns>
            <search>location,site</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Phase.ByName(System.String)">
            <summary>
            Get phase by name.
            </summary>
            <param name="name">Phase name as string.</param>
            <returns name="Phase">Phase.</returns>
            <search>phase,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.PostCommand.AppDialogShowing(System.Object,Autodesk.Revit.UI.Events.DialogBoxShowingEventArgs)">
            The DialogBoxShowing event handler
        </member>
        <member name="M:Orchid.RevitProject.Common.PostCommand.Purge(System.Boolean)">
            <summary>
            Purge document using Post Command.
            Post commands can only take the current document to be run once. Re-run the
            graph to re-activate the post command. To get back the "Purge" window inside
            Revit, set the "activate" value to "false" and re-run the graph once more!
            </summary>
            <param name="activate">Set to true to activate! (and false to deactivate).</param>
            <search>post,command,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.PostCommand.PostCommandPurge(System.Boolean)">
            <summary>
            purge all by PostCommand
            </summary>
            <param name="activate"></param>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.InDocument">
            <summary>
            Get all revisions.
            </summary>
            <returns name="Revision">The list of revisions.</returns>
            <search>revision,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Create(System.String,System.String,System.Boolean,System.String,System.String,System.String,Revit.Elements.Element)">
            <summary>
            Create a new revision.
            </summary>
            <param name="revDate">Revision date.</param>
            <param name="description">Revision description.</param>
            <param name="issued">Issuing status.</param>
            <param name="issuedTo">Issued to.</param>
            <param name="issuedBy">Issued by.</param>
            <param name="visibility">Revision visibility (show).</param>
            <param name="numbering">Revision numbering.</param>
            <returns name="Revision">The revision.</returns>
            <search>revision,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Input(Revit.Elements.Revision,System.String,System.String,System.Boolean,System.String,System.String,System.String,Revit.Elements.Element)">
            <summary>
            Revision input data.
            </summary>
            <param name="revision">Revision.</param>
            <param name="revDate">Revision date.</param>
            <param name="description">Revision description.</param>
            <param name="issued">Issued.</param>
            <param name="issuedTo">IssuedTo.</param>
            <param name="issuedBy">IssuedBy.</param>
            <param name="visibility">Revision visibility (show).</param>
            <param name="numbering">Revision numbering.</param>
            <returns name="Revision">The revision.</returns>
            <search>revision,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Value(Revit.Elements.Revision)">
            <summary>
            Revision content data.
            </summary>
            <param name="revision">Revision.</param>
            <returns name="Sequence">Sequence.</returns>
            <returns name="RevNumber">Revision number --> NaN if Revision Numbering is Per Sheet.</returns>
            <returns name="RevDate">Revision date.</returns>
            <returns name="Description">Revision description.</returns>
            <returns name="Issued">Issued.</returns>
            <returns name="IssuedTo">IssuedTo.</returns>
            <returns name="IssuedBy">IssuedBy.</returns>
            <returns name="Visibility">Revision visibility (show).</returns>
            <returns name="Numbering">Revision numbering.</returns>
            <search>revision,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Numbering">
            <summary>
            Get revision numbering method.
            </summary>
            <returns name="Numbering">Revision numbering.</returns>
            <search>revision,number</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.SetNumbering(System.String)">
            <summary>
            Set revision numbering method.
            </summary>
            <param name="numbering">Revision numbering to set.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>revision,number</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.Delete(Revit.Elements.Revision)">
            <summary>
            Delete revisions, in a document.
            Note: At least one revison must be present in the document!
            </summary>
            <param name="revision">Revision.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>revision,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.DeleteAll">
            <summary>
            Delete all revisions.
            </summary>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>revision,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.AddToSheet(Revit.Elements.Views.Sheet,Revit.Elements.Revision)">
            <summary>
            Add revision to sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name="revision">Revision.</param>
            <returns name="Sheet">Sheet.</returns>
            <search>revision,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Revision.RemoveFromSheet(Revit.Elements.Views.Sheet,Revit.Elements.Revision)">
            <summary>
            Remove revision from sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name="revision">Revision.</param>
            <returns name="Sheet">Sheet.</returns>
            <search>revision,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.InDocument">
            <summary>
            Get all revision clouds in the current document.
            </summary>
            <returns name="RevisionCloud">The list of revision clouds.</returns>
            <search>revision,cloud,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.Delete(Revit.Elements.RevisionCloud)">
            <summary>
            Delete revision cloud.
            </summary>
            <param name="revisionCloud">RevisionCloud.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>revision,cloud,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionCloud.DeleteAll">
            <summary>
            Delete all revision clouds.
            </summary>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>revision,cloud,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionNumbering.InDocument">
            <summary>
            Get all revision numberings.
            </summary>
            <returns name="Revision">The list of revision numberings.</returns>
            <search>revision,number,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.RevisionNumbering.Create(System.String,System.String)">
            <summary>
            Create a new revision numbering sequence by name.
            </summary>
            <param name="name">Name for the numbering sequence.</param>
            <param name="numberType">Revision numbering type.</param>
            <returns name="Numbering">Revision numbering.</returns>
            <search>revision,number,create</search>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.Name">
            <summary>
            Workset name.
            </summary>
            <returns name="string">Name as string.</returns>
            <search>workset,name</search>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.Id">
            <summary>
            Workset Id.
            </summary>
            <returns name="integer">Id as integer value.</returns>
            <search>workset,id,integer,element</search>
        </member>
        <member name="P:Orchid.RevitProject.Common.Workset.UniqueId">
            <summary>
            Workset UniqueId.
            </summary>
            <returns name="string">UniqueId as string.</returns>
            <search>workset,id,unique</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ToString">
            <summary>
            Workset string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.Create(System.String)">
            <summary>
            Create Workset by name.
            </summary>
            <param name="name">The name of the workset.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>workset,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.SetOwner(System.Collections.Generic.List{Orchid.RevitProject.Common.Workset})">
            <summary>
            Set current user as owner of workset(s) in the current document.
            </summary>
            <param name="workset">Workset as Orchid type.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>workset,owner</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.Relinquish(System.Collections.IList)">
            <summary>
            Relinquish all workset(s) owned by the current user in the current document.
            Note: This does not include newly created workset(s)!
            </summary>
            <param name="waitFor">Data object to wait for before this function is ativated.</param>
            <search>workset,relinquish</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.InDocument">
            <summary>
            Get all workset in the current document.
            </summary>
            <returns name="Workset">The list of workset.</returns>
            <search>workset,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.UserWorkset">
            <summary>
            Get all user workset in the current document.
            </summary>
            <returns name="Workset">The list of workset.</returns>
            <search>workset,user,workset</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.Active">
            <summary>
            Get active workset in the current document.
            </summary>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>workset,active</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ByName(System.String)">
            <summary>
            Get Workset by name.
            </summary>
            <param name="name">The name of the workset.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>workset,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.ById(System.Int32)">
            <summary>
            Get Workset by Id.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>workset,id,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.GlobalVisibility(Revit.Application.Document)">
            <summary>
            Get workset global visibility setting in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <returns name="boolean">Whether workset default setting is visible.</returns>
            <search>default,global,setting,workset,visibility</search>
        </member>
        <member name="M:Orchid.RevitProject.Common.Workset.SetGlobalVisibility(Revit.Application.Document,Orchid.RevitProject.Common.Workset,System.Boolean)">
            <summary>
            Set workset global visibility setting in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="workset">Workset as Orchid type.</param>
            <param name="visibility">Visibility as boolean value.</param>
            <search>default,global,setting,workset,visibility</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.IsVisibleInView(Revit.Elements.Element,Revit.Elements.Views.View)">
            <summary>
            Verify if datum element is visible in view.
            </summary>
            <param name="element">Datum element.</param>
            <param name="view">View.</param>
            <returns name="boolean">Whether datum element is visible in view or not.</returns>
            <search>datum,visib,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.PropagationView(Revit.Elements.Element,Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get propagation view for datum element. 
            Note: Null is returned if datum element is not
            visible in view and/or no views were found!
            </summary>
            <param name="element">Datum element.</param>
            <param name="view">View.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>datum,propagation,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Datum.SetPropagationView(Revit.Elements.Element,Revit.Elements.Views.View,System.Collections.IEnumerable)">
            <summary>
            Set propagation view to datum element.
            </summary>
            <param name="element">Datum element.</param>
            <param name="view">View.</param>
            <param name="target">Target view.</param>
            <returns name="boolean">Whether datum element is propagated to target view or not.</returns>
            <search>datum,propagation,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.InDocument(System.Boolean)">
            <summary>
            Get all grid in the document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Grid">Grid.</returns>
            <search>grid,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.VerticalExtents(Revit.Elements.Element)">
            <summary>
            Get grid vertical extents.
            </summary>
            <param name="grid">Grid.</param>
            <returns name="Grid">Grid.</returns>
            <returns name="TopExtent">Value as double.</returns>
            <returns name="BottomExtent">Value as double.</returns>
            <search>grid,vertical,extent</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.SetVerticalExtents(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set grid vertical extents.
            </summary>
            <param name="grid">Grid.</param>
            <param name="topExtent">Value as double.</param>
            <param name="bottomExtent">Value as double.</param>
            <returns name="Grid">Grid.</returns>
            <search>grid,vertical,extent</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Grid.MoveVerticalExtents(Revit.Elements.Element,System.Double)">
            <summary>
            Move grid vertical extents.
            </summary>
            <param name="grid">Grid.</param>
            <param name="distance">Value as double.</param>
            <returns name="Grid">Grid.</returns>
            <search>grid,move,vertical,extent</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.InDocument">
            <summary>
            Get all levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
            <search>level,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.Structural">
            <summary>
            Get all structural levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
            <search>level,structural</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.BuildingStory">
            <summary>
            Get all building story levels.
            </summary>
            <returns name="Level">The list of levels.</returns>
            <search>level,building,story</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.ByName(System.String)">
            <summary>
            Get level by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="Level">Level.</returns>
            <search>level,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.IsStructural(Revit.Elements.Element)">
            <summary>
            Verify if level is structural.
            </summary>
            <param name="level">Level.</param>
            <returns name="boolean">Whether the level is structural.</returns>
            <search>level,structural</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.IsBuildingStory(Revit.Elements.Element)">
            <summary>
            Verify if level is building story.
            </summary>
            <param name="level">Level.</param>
            <returns name="boolean">Whether the level is building story.</returns>
            <search>level,building,story</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.AssociatedFloorPlan(Revit.Elements.Element)">
            <summary>
            Get associated floor plan view. 
            Note: Either the first associated floor or structural view is returned.
            </summary>
            <param name="level">Level.</param>
            <returns name="View">View.</returns>
            <search>level,associat,plan,view,floor,plan</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.AssociatedPlans(Revit.Elements.Element)">
            <summary>
            Get associated plan views. 
            </summary>
            <param name="level">Level.</param>
            <returns name="View">List of views.</returns>
            <search>level,associat,plan,view,plan</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.AllAssociatedPlans(Revit.Elements.Element)">
            <summary>
            Get all associated plan views.
            </summary>
            <param name="level">Level.</param>
            <returns name="View">List of views.</returns>
            <search>level,associat,plan,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.Elevation(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get level elevation.
            </summary>
            <param name="level">Level.</param>
            <param name="origin">Get the elevation relative to the Project origin?</param>
            <returns name="double">Elevation as double.</returns>
            <search>level,elevation</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.SetElevation(Revit.Elements.Element,System.Double)">
            <summary>
            Set level elevation.
            </summary>
            <param name="level">Level.</param>
            <param name="value">Double value for the elevation.</param>
            <returns name="Level">Level.</returns>
            <search>level,elevation</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.ComputationHeight(Revit.Elements.Element)">
            <summary>
            Get level computation height for spatial element (Room/Space).
            </summary>
            <param name="level">Level.</param>
            <returns name="double">Double value for the computation height.</returns>
            <search>level,computation,height</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Level.SetComputationHeight(Revit.Elements.Element,System.Double)">
            <summary>
            Set level computation height for spatial element (Room/Space).
            </summary>
            <param name="level">Level.</param>
            <param name="value">Double value for the computation height.</param>
            <returns name="Level">Level.</returns>
            <search>level,computation,height</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Reference.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Datums.Reference.GlobalPoint(Orchid.RevitProject.Datums.Reference)">
            <summary>
            Get global point of the reference.
            </summary>
            <param name="element">Element.</param>
            <returns name="Point">Point.</returns>
            <search>reference,global,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.ReferencePlane.InDocument">
            <summary>
            Get all reference plane.
            </summary>
            <returns name="ReferencePlane">The list of reference planes.</returns>
            <search>reference,plane,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.ReferencePlane.ByName(System.String)">
            <summary>
            Get reference plane by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="ReferencePlane">Reference plane.</returns>
            <search>reference,plane,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.ReferencePlane.Reference(Revit.Elements.Element)">
            <summary>
            Get the dimension reference plane(s).
            </summary>
            <param name="referencePlane">Dimension.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="Plane">Plane as DS type.</returns>
            <search>reference,plane,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.SketchPlane.InDocument">
            <summary>
            Get all sketch plane.
            </summary>
            <returns name="SketchPlane">The list of sketch planes.</returns>
            <search>sketch,plane,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Datums.SketchPlane.ByName(System.String)">
            <summary>
            Get sketch planes by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="SketchPlane">Sketch plane.</returns>
            <search>sketch,plane,name</search>
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.SeparateElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find separate elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.MatchElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find matching elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ,System.Boolean)">
            Transfer a set of elements across documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferLinkedElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.RevitLinkInstance,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            Transfer a set of elements across linked documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferDetalingElements(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            Transfer all view-specific elements from source view to target view.
        </member>
        <member name="M:Orchid.RevitProject.Elements.Assembly.Members(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the assembly member(s).
            </summary>
            <param name="assembly">Assembly.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>assembly,member</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Class.ByName(System.String)">
            <summary>
            Get a class from the Revit assembly (Autodesk.Revit.DB.x) by name.
            Note: From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="name">The name of the Revit assembly (Autodesk.Revit.DB.x) class.</param>
            <returns name="Class">Class from the Revit assembly (Autodesk.Revit.DB.x).</returns>
            <search>class,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Class.Name(System.Type)">
            <summary>
            Get the name from the Revit assembly (Autodesk.Revit.DB.x) class.
            Note: From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="class">Class from the Revit assembly (Autodesk.Revit.DB.x).</param>
            <returns name="string">The name of the Revit assembly (Autodesk.Revit.DB.x) class.</returns>
            <search>class,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.InDocument(System.Boolean)">
            <summary>
            All curtain wall panel in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Curtain panel element.</returns>
            <search>curtain,panel,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.FamilyInstances(System.Boolean)">
            <summary>
            All curtain wall panel of family type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Family instance element.</returns>
            <returns name="Category">Family instance element.</returns>
            <search>curtain,panel,family,instance,panel</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Doors(System.Boolean)">
            <summary>
            All curtain wall panel of door type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Door element.</returns>
            <search>curtain,panel,door</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Windows(System.Boolean)">
            <summary>
            All curtain wall panel of window type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Window element.</returns>
            <search>curtain,panel,window</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.CurtainPanel.Walls(System.Boolean)">
            <summary>
            All curtain wall panel of wall type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Family instance element.</returns>
            <search>curtain,panel,wall</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ClassOf(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            Returns the class from the Revit assembly (Autodesk.Revit.DB.x).
            Note: From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="element">Element.</param>
            <param name="class">Class from the Revit assembly (Autodesk.Revit.DB.x).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,class,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OfClass(Revit.Application.Document,System.Type)">
            <summary>
            Get all elements of the specified class from from the Revit assembly (Autodesk.Revit.DB.x) in the document.
            Note: From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
            <param name="document">Document (project or family).</param>
            <param name="class">Class from the Revit assembly (Autodesk.Revit.DB.x).</param>
            <returns name="Element">Element and/or ElementType.</returns>
            <search>element,class,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ById(System.Int64)">
            <summary>
            Get element by id in current document.
            </summary>
            <param name="id">Id as integer value.</param>
            <returns name="Element">Element.</returns>
            <search>element,id,elementid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ById(Revit.Application.Document,System.Int64)">
            <summary>
            Get element by id.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="id">Id as integer value.</param>
            <returns name="Element">Element.</returns>
            <search>element,id,elementid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByName(System.String)">
            <summary>
            Get element by name in current document.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="Element">Element.</returns>
            <search>element,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get element by name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string.</param>
            <returns name="Element">Element.</returns>
            <search>element,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element family name.
            </summary>
            <param name="element">Element.</param>
            <returns name="string">Family name as string.</returns>
            <search>element,family,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Document(Revit.Elements.Element)">
            <summary>
            Get the element hosting document.
            </summary>
            <param name="element">Element.</param>
            <returns name="Document">Document.</returns>
            <search>element,document,hoste</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ModelElement(Revit.Application.Document,System.Boolean)">
            <summary>
            Get all model elements in document, return element grouped by category.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <search>selection,element,model</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasMaterial(Revit.Application.Document,System.Boolean)">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <search>selection,element,material</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByCategory(Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
             Get all elements by category in document, return element grouped by category.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="category">Category.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <search>selection,element,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByCategory(Revit.Elements.Category,System.Boolean)">
            <summary>
            Get all element by category.
            </summary>
            <param name="category">Category as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByCategoryType(Revit.Application.Document,System.Enum,System.Boolean)">
            <summary>
            Get all elements by category (Autodesk.Revit) ennumeration type in document, 
            return element grouped by category and category (Autodesk.Revit) ennumeration type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="categoryType">CategoryType as enumeration type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <returns name="CategoryType">CategoryType as enumeration type.</returns>
            <search>selection,element,category,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByLevel(Revit.Elements.Element,System.Collections.Generic.List{System.Enum},System.Boolean,System.Boolean)">
            <summary>
            Get elements by level, return element grouped by category.
            </summary>
            <param name="level">Level to collect elements from.</param>
            <param name="categoryType">CategoryType as enumeration type.</param>
            <param name="spatial">Include spatial elements?</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <search>element,level,dependen,host,constraint</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByFamily(Revit.Elements.Family)">
            <summary>
            Get all elements of the specified family in the document.
            </summary>
            <param name="family">The Family.</param>
            <returns name="Element">The list of elements matching the query.</returns>
            <search>selection,element,family</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetName(Revit.Elements.Element,System.String)">
            <summary>
            set element name.
            </summary>
            <param name="element">Element.</param>
            <param name="name">Name as string.</param>
            <returns name="Element">Element.</returns>
            <search>element,set,change</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Info(Revit.Elements.Element)">
            <summary>
            Get element info.
            </summary>
            <param name="element">Element.</param>
            <returns name="Owner">Owner.</returns>
            <returns name="Creator">Creator.</returns>
            <returns name="LastChangedBy">LastChangedBy.</returns>
            <returns name="RequestedBy">RequestedBy.</returns>
            <search>element,information</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ElementType(Revit.Elements.Element)">
            <summary>
            Returns the ElementType for this Element. Returns null if the Element cannot have a ElementType assigned.
            </summary>
            <param name="element">Element.</param>
            <returns name="ElementType">Element Type or Null.</returns>
            <search>element,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Delete(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Delete elements.
            Note: If a wall element is a member of a stacked wall, this will lead
            to the stacked wall will be deleted. Furthermore, note that all fully
            depended elements of the element will also be deleted!
            </summary>
            <param name="element">Element.</param>
            <returns name="int">Integer value of the deleted element.</returns>
            <search>element,delete,erase</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.RoomBounding(Revit.Elements.Element,System.Boolean)">
            <summary>
            Set element room bounding parameter by boolean value.
            </summary>
            <param name="element">Element.</param>
            <param name="boolean">True if element should be room bounding.</param>
            <returns name="Element">Element.</returns>
            <search>element,room,bounary</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasLocation(Revit.Elements.Element)">
            <summary>
            Verify if element has location.
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">True if element has location.</returns>
            <search>element,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OrderByPoints(System.Collections.IList,System.Collections.IList)">
            <summary>
            Order elements by ordered points.
            </summary>
            <param name="element">List of element.</param>
            <param name="points">Ordered points.</param>
            <returns name="element">List of element.</returns>
            <search>element,list,sort,element,point,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Solid(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get Dynamo solid from Revit solid and void geometry.
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Solid">Solid element.</returns>
            <search>element,solid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OcSolid(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get Orchid solid element from Revit solid and void geometry.
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="OcSolid">Solid element as Orchid type.</returns>
            <search>element,solid,orchid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Reference(Revit.Elements.Element)">
            <summary>
            Get the element reference plane(s).
            </summary>
            <param name="element">Element.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <search>element,reference</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ReferenceType">
            <summary>
            Element reference type.
            </summary>
            <returns name="ReferenceType">Reference type.</returns>
            <search>element,reference,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ReferenceTypeByName(System.String)">
            <summary>
            Element reference type by name.
            </summary>
            <param name="name">The name of the reference type</param>
            <returns name="ReferenceType">Reference type.</returns>
            <search>element,reference,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Intersect(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get intersecting element.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element.</returns>
            <search>element,intersect</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Intersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Get intersecting element.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element.</param>
            <param name="elements">Elements to examine.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element.</returns>
            <search>element,intersect</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IntersectCategory(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Get intersecting element. Output is filtered if category is provided.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element.</param>
            <param name="category">Category, default is set to all catgories in document.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Intersecting element.</returns>
            <search>element,intersect,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.DoesIntersectOther(Revit.Elements.Element)">
            <summary>
            Verify if element has intersecting element.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>element,intersect</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.DoesIntersect(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Verify if element has intersecting element.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element.</param>
            <param name="elements">Elements to examine.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>element,intersect</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLocation(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Vector,System.Boolean)">
            <summary>
            Copy element to location by vector.
            </summary>
            <param name="element">Element.</param>
            <param name="vector">Translation vector.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,copy,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLocation(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point,System.Boolean)">
            <summary>
            Copy element to location by point.
            </summary>
            <param name="element">Element.</param>
            <param name="point">Translation point.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,copy,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyToLevel(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Level,System.Boolean)">
            <summary>
            Copy element by level (translation).
            </summary>
            <param name="element">Element.</param>
            <param name="level">Translation vector.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,copy,level</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Move(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move Revit Element by point.
            </summary>
            <param name="element">Element.</param>
            <param name="point">Translation point.</param>
            <returns name="Element">Element.</returns>
            <search>element,move</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Rotate(System.Collections.Generic.List{Revit.Elements.Element},Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Rotate Revit Element around point by Angle.
            </summary>
            <param name="element">Element.</param>
            <param name="point">Rotate point.</param>
            <param name="angle">Angle.</param>
            <returns name="Element">Element.</returns>
            <search>element,rotate</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ByView(Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get element by view.
            </summary>
            <param name="view">View.</param>
            <param name="hidden">Get hidden elements?</param>
            <returns name="Element">Element, ordered by type.</returns>
            <search>element,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsVisibleInView(Revit.Elements.Element,Revit.Elements.Views.View)">
            <summary>
            Verify if element is visible in view.
            </summary>
            <param name="element">Element.</param>
            <param name="view">View.</param>
            <returns name="boolean">Whether element is visible in view or not.</returns>
            <search>element,view,visible</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OwnerView(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located.
            </summary>
            <param name="element">Element.</param>
            <returns name="View">View.</returns>
            <search>element,view,owner</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OwnerViewType(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located as string.
            </summary>
            <param name="element">Element.</param>
            <returns name="ViewType">ViewType as string.</returns>
            <search>element,view,type,owner</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsPinned(Revit.Elements.Element)">
            <summary>
            Verify if element is pinned.
            Note: Element included into a group will return as false value!
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">True if element is pinned.</returns>
            <search>element,pin</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Pin(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Pin element.
            </summary>
            <param name="element">Element.</param>
            <returns name="Element">Element.</returns>
            <search>element,pin</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.UnPin(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            UnPin element.
            </summary>
            <param name="element">Element.</param>
            <returns name="Element">Element.</returns>
            <search>element,pin</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsGroupMember(Revit.Elements.Element)">
            <summary>
            Verify if element is a group member.
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">True if element is a group member.</returns>
            <search>element,group,member</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Group(Revit.Elements.Element)">
            <summary>
            Get group if element is a group member.
            </summary>
            <param name="element">Element.</param>
            <returns name="Group">Group.</returns>
            <search>element,group</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsValid(Revit.Elements.Element)">
            <summary>
            Verify if element is valid, output as boolean
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>element,valid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Valid(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Filter list for valid elements.
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>element,valid</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CanBeHost(Revit.Elements.Element)">
            <summary>
            Verify if element can be host for other objects, output as boolean
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>element,host</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.MoveTagToLocation(Revit.Elements.Element,Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Move potential tag in a specific view to the host (element) location point.
            </summary>
            <param name="element">Element who is hosting a tag.</param>
            <param name="view">View.</param>
            <param name="leader">Turn potential leader on/off (true/false).</param>
            <returns name="Element">Element.</returns>
            <search>element,tag,move,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Tag(Revit.Elements.Element,Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get a element tag in a view.
            </summary>
            <param name="element">Element who is hosting a tag.</param>
            <param name="view">View.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Tag">Tag.</returns>
            <search>element,tag,elementtag,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Phase(Revit.Elements.Element)">
            <summary>
            Get the phase of the element. 
            Note: An element that might be collected could be temporarily created by Revit
            to handle phasing. These elements should not be used in data processing, they
            should be left to Revit to handle!
            </summary>
            <param name="element">Element.</param>
            <returns name="Created">Phase created.</returns>
            <returns name="Demolished">Phase demolished.</returns>
            <returns name="Temporary">Temporary phasing element handled by Revit.</returns>
            <search>element,phase</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetPhase(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set the phase of the element.
            Note: Room and space elements can't change phase, new elements has to be created!
            </summary>
            <param name="element">Element.</param>
            <param name="created">Phase created.</param>
            <param name="demolished">Phase demolished.</param>
            <returns name="Element">Element.</returns>
            <search>element,phase</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Relinquish(System.Collections.IList)">
            <summary>
            Relinquish all element(s) owned by the current user in the current document.
            Note: This does not include newly created element(s)!
            </summary>
            <param name="waitFor">Data object to wait for before this function is ativated.</param>
            <search>element,relinquish</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetWorkset(Revit.Elements.Element,Orchid.RevitProject.Common.Workset)">
            <summary>
            Set the workset of the element.
            </summary>
            <param name="element">Element.</param>
            <param name="workset">Workset as Orchid type.</param>
            <returns name="Element">Element.</returns>
            <search>element,workset</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Workset(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the workset of the element.
            </summary>
            <param name="element">Element.</param>
            <param name="UserWorkset">If UserWorkset is set to true, then only UserWorkset will be collected!</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <search>element,workset</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.DesignOption(Revit.Elements.Element)">
            <summary>
            Get the element design option, null value is returned if element belong to main model.
            </summary>
            <param name="element">Element.</param>
            <returns name="DesignOption">Design option, null if element belong to main model.</returns>
            <search>element,design,option</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HasDesignOption(Revit.Elements.Element)">
            <summary>
            Verify if element belong to a design option.
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">Boolean value if element belong to a design option.</returns>
            <search>element,design,option</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.CopyMonitorInstance(Revit.Elements.Element)">
            <summary>
            Get copy/monitor link instance.
            </summary>
            <param name="element">Element.</param>
            <returns name="Instance">Link instance.</returns>
            <search>element,copy,monitored,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsCopyMonitored(Revit.Elements.Element)">
            <summary>
            Verify if element is copy/monitored.
            </summary>
            <param name="element">Element.</param>
            <returns name="boolean">Boolean value if element is copy/monitored.</returns>
            <search>element,copy,monitored</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.TypeOf(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.OfType(Revit.Application.Document,System.Type)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="T:Orchid.RevitProject.Elements.AlterElement">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementServices.GetOverrides(Autodesk.Revit.DB.Document)">
            <summary>
            Get element override settings in document
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Name(Revit.Elements.Element)">
            <summary>
            Get element type name.
            </summary>
            <param name="elementType">Element type.</param>
            <returns name="string">Name as string.</returns>
            <search>element,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get element type by name in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string.</param>
            <returns name="ElementType">Element type.</returns>
            <search>element,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element type family name.
            </summary>
            <param name="elementType">Element type.</param>
            <returns name="string">Family name as string.</returns>
            <search>element,type,family,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.HasMaterial(Revit.Application.Document,System.Boolean)">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
            <search>selection,element,material,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByCategory(Revit.Application.Document,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Get all elements by category in document, 
            return element grouped by category.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="category">Category.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
            <search>selection,element,category,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByCategory(Revit.Elements.Category,System.Boolean)">
            <summary>
            Get all element types by category.
            </summary>
            <param name="category">Category as Dynamo type.</param>
            <param name="condense??">Condense to shortest feasible output?</param>
            <returns name="ElementType">Element type.</returns>
            <search>element,type,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.ByCategoryType(Revit.Application.Document,System.Enum,System.Boolean)">
            <summary>
            Get all elements by category in document, 
            return element grouped by category and category type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="categoryType">CategoryType as enumeration type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ElementType">ElementType.</returns>
            <returns name="Category">Category.</returns>
            <returns name="CategoryType">CategoryType as enumeration type.</returns>
            <search>selection,element,category,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate the element type.
            </summary>
            <param name="elementType">Element type.</param>
            <param name="name">Name for the duplicated element type.</param>
            <returns name="ElementType">Element type.</returns>
            <search>element,type,duplicate,copy</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.InDocument">
            <summary>
            Get all family in current document.
            </summary>
            <returns name="Family">Family.</returns>
            <returns name="Category">Category.</returns>
            <search>family,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get family by name in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string.</param>
            <returns name="Family">Family.</returns>
            <search>family,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.ByCategory(System.Object,System.Boolean)">
            <summary>
            Get all family by category.
            </summary>
            <param name="category">Category as string or Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Family">Family.</returns>
            <search>family,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Edit(System.Collections.Generic.List{Revit.Elements.Family},System.Boolean)">
            <summary>
            Edit family document.
            </summary>
            <param name="family">List of families.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>family,document,open,edit</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Load(Revit.Elements.Family)">
            <summary>
            Load family, existing family will be overwritten.
            </summary>
            <param name="family">Family.</param>
            <returns name="Family">Family.</returns>
            <search>family,load</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Load(Revit.Application.Document)">
            <summary>
            Load family by family document, existing family will be overwritten.
            </summary>
            <param name="familyDocument">Family document (rfa).</param>
            <returns name="Family">Family.</returns>
            <search>family,load</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.Save(System.Collections.Generic.List{Revit.Elements.Family},System.String,System.Boolean,System.Boolean)">
            <summary>
            Save family as file to path.
            </summary>
            <param name="family">Family to be saved.</param>
            <param name="path">Path to save file(s).</param>
            <param name="subfolder">Create subfolder by category?</param>
            <param name="overwrite">Overwrite existing families?</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>family,save</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.HasAssociated(Revit.Elements.Family)">
            <summary>
            Verify if family has associated elements.
            </summary>
            <param name="family">Family.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>family,associat</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.HasSpatialCalculationPoint(Revit.Elements.Family)">
            <summary>
            Verify if family has spatial calculation point.
            </summary>
            <param name="family">Family.</param>
            <returns name="boolean">True if element has spatial calculation point.</returns>
            <search>family,spatial,calculation,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.IsTypeOf(Revit.Elements.Element)">
            <summary>
            Verify if is a family instance.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>family,instance,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByLineReference(Revit.Elements.FamilyType,Revit.Elements.Level,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Place a line based family instance given the FamilyType (denoted as FamilySymbol in the Revit API) 
            on a level and a curve derived from the point location and the reference direction.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="level">Level to place the family.</param>
            <param name="point">Point as startpoint for the curve.</param>
            <param name="direction">A vector that defines the direction of the curve.</param>
            <returns name="FamilyInstance">Family instance.</returns>
            <search>family,instance,line,reference,point,direction</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByHostAndPoint(Revit.Elements.FamilyType,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Place a family instance given the FamilyType (denoted as FamilySymbol in the Revit API) 
            on a host element by the given point location.
            Note: The FamilyType should be face based. The reference direction defines the rotation
            of the instance on the reference, and thus cannot be perpendicular to the face.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="host">Hosting element for the instance.</param>
            <param name="point">Point location where the instance is to be placed.</param>
            <returns name="FamilyInstance">Family instance.</returns>
            <search>family,instance,host,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByHostAndReference(Revit.Elements.FamilyType,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Place a family instance given the FamilyType (denoted as FamilySymbol in the Revit API) 
            on a host element by the given point location, and a reference direction.
            Note: The FamilyType should be face based. The reference direction defines the rotation
            of the instance on the reference, and thus cannot be perpendicular to the face.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="host">Hosting element for the instance.</param>
            <param name="point">Point location where the instance is to be placed.</param>
            <param name="direction">Direction as vector.</param>
            <returns name="FamilyInstance">Family instance.</returns>
            <search>family,instance,host,reference</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByHostFace(Revit.Elements.FamilyType,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Place a family instance given the FamilyType (denoted as FamilySymbol in the Revit API) 
            on a face derived from the given host element by the intersecting given point, and a 
            reference direction.
            Note: The FamilyType should be face based. The reference direction defines the rotation
            of the instance on the reference, and thus cannot be perpendicular to the face.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="host">Element face derived from intersection with the point.</param>
            <param name="point">Point on the face where the instance is to be placed.</param>
            <param name="direction">A vector that defines the direction of placement of the family instance.</param>
            <returns name="FamilyInstance">Family instance.</returns>
            <search>family,instance,host,face</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.IsHandFlipped(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Get the family instance hand flip condition, output as boolean.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>family,instance,flip,hand</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.IsFaceFlipped(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Get the family instance face flip condition, output as boolean.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>family,instance,flip,face</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.Reference(Revit.Elements.AbstractFamilyInstance,System.Boolean)">
            <summary>
            Get the family instance reference plane(s).
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="ReferenceName">Reference name as string.</returns>
            <returns name="Plane">Plane.</returns>
            <search>family,instance,reference</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByReferenceName(Revit.Elements.AbstractFamilyInstance,System.String,System.Boolean)">
            <summary>
            Get the family instance reference plane by name.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="referenceName">The name og the reference</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="Plane">Plane.</returns>
            <search>family,instance,reference,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ByReferenceType(Revit.Elements.AbstractFamilyInstance,System.Object,System.Boolean)">
            <summary>
            Get the family instance reference plane by name.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="referenceType">Reference type as string</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="Plane">Plane.</returns>
            <search>family,instance,reference,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ReferenceOrigin(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Family instance reference origin.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="Reference">Reference as Orchid type.</returns>
            <returns name="Point">Point.</returns>
            <search>family,instance,reference,origin</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ReferenceType">
            <summary>
            Family instance reference type.
            </summary>
            <returns name="ReferenceType">Reference type.</returns>
            <search>family,instance,reference,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.ReferenceTypeByName(System.String)">
            <summary>
            Family instance reference type by name.
            </summary>
            <param name="name">The name of the reference type</param>
            <returns name="ReferenceType">Reference type.</returns>
            <search>family,instance,reference,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HasSpatialCalculationPoint(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Verify if family instance has spatial calculation point.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="boolean">True if element has spatial calculation point.</returns>
            <search>family,instance,spatial,calculation,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HasFromToCalculationPoints(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Verify if family instance has spatial from/to calculation point.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="boolean">True if element has spatial from/to calculation point.</returns>
            <search>family,instance,from,to,calculation,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.SpatialCalculationPoint(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Get family instance spatial calculation point.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="Point">Point.</returns>
            <search>family,instance,spatial,calculation,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.FromToCalculationPoints(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Get family instance spatial from/to calculation point. 
            First point given is the "from" location, last point given is the "to" location.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="Point">Points.</returns>
            <search>family,instance,from,to,calculation,point</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.NestedComponent(System.Collections.Generic.List{Revit.Elements.AbstractFamilyInstance})">
            <summary>
            Get nested component in the family instance.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="Element">Element.</returns>
            <search>family,instance,nested,component</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.SetType(Revit.Elements.AbstractFamilyInstance,Revit.Elements.FamilyType)">
            <summary>
            Set family instance by family type.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="familyType">Family type.</param>
            <returns name="FamilyInstance">Family instance.</returns>
            <search>family,instance,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HandFlipped(System.Collections.Generic.List{Revit.Elements.AbstractFamilyInstance})">
            <summary>
            Get the family instance hand flip condition, output as element.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
            <search>family,instance,flip,hand</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.FaceFlipped(System.Collections.Generic.List{Revit.Elements.AbstractFamilyInstance})">
            <summary>
            Get the family instance face flip condition, output as element.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
            <search>family,instance,flip,face</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyInstance.HandOrientation(Revit.Elements.AbstractFamilyInstance)">
            <summary>
            Get the family instance hand orientation, output as vector.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <returns name="Vector">Vector.</returns>
            <search>family,instance,orientation</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.InDocument">
            <summary>
            Get all family types in current document.
            </summary>
            <returns name="FamilyType">Family type.</returns>
            <returns name="Category">Category.</returns>
            <search>family,type,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.ByName(Revit.Application.Document,System.String)">
            <summary>
            Get family by name in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name as string.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.ByCategory(Revit.Elements.Category,System.Boolean)">
            <summary>
            Get all family types by category.
            </summary>
            <param name="category">Category as Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.Edit(System.Collections.Generic.List{Revit.Elements.FamilyType},System.Boolean)">
            <summary>
            Edit family document by family type.
            </summary>
            <param name="familyType">FamilyType.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Document">Project document (rvt).</returns>
            <search>family,type,document,open,edit</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.HasAssociated(Revit.Elements.FamilyType)">
            <summary>
            Verify if family type has associated elements.
            </summary>
            <param name="familyType">FamilyType.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>family,type,associat</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.VerifyIsLightingFixtures(Autodesk.Revit.DB.FamilySymbol)">
            verify that it is a Lighting Fixtures
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.GetLightData(Autodesk.Revit.DB.FamilySymbol)">
            get document and light data
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightDimmingColor(Revit.Elements.FamilyType)">
            <summary>
            Get light dimming color name.
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Name">The dimming color name.</returns>
            <search>family,type,light,dimming,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightColorFilter(Revit.Elements.FamilyType)">
            <summary>
            Get light color filter.
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Color">Color as dynamo type.</returns>
            <search>family,type,light,color,filter</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightShape(Revit.Elements.FamilyType)">
            <summary>
            Get light shape style, that is either Point, Line, Rectangle or Circle style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Style">The light shape style, either as
                Point, Line, Rectangle or Circle.</returns>
            <returns name="Value">Depending on the style is this value either 
                emit length, emit width/length, emit diameter or no value.</returns>
            <search>family,type,light,shape</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightDistribution(Revit.Elements.FamilyType)">
            <summary>
            Get light distribution style, that is either Spherical, 
            Hemispherical, Spot or PhotometricWeb style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Style">The light distribution style, either as  
                Spherical, Hemispherical, Spot or PhotometricWeb style.</returns>
            <returns name="Value">Depending on the style is this value either 
                Spot beam angle/Spot field angle/Tilt angle, 
                Photometric web file/Tilt angle or no value.</returns>
            <search>family,type,light,distribution</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightColor(Revit.Elements.FamilyType)">
            <summary>
            Get light initial color, that is either Preset colors or a Custom color value.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Style">The initial color style, either as
                PresetColor or CustomColor style.</returns>
            <returns name="Value">Depending on the style is this value either 
                preset color name and/or temperature.</returns>
            <search>family,type,light,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightIntensity(Revit.Elements.FamilyType)">
            <summary>
            Get light initial intensity, that is either Flux, Luminous, Illuminance or Wattage intensity.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Style">The initial intensity, either as
                Flux, Luminous, Illuminance or Wattage.</returns>
            <returns name="Value">Depending on the style is this value either 
                Flux, Luminosity, Illuminance/Distance or Wattage/Efficacy.</returns>
            <search>family,type,light,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.LightLossFactor(Revit.Elements.FamilyType)">
            <summary>
            Get light loss factor, that is either basic or advanved loss factor.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <returns name="Style">The loss factor either as Basic or Advanced style.</returns>
            <returns name="Value">Depending on the style is this value either Basic loss factor or
                Temperature/Voltage/Ballast/Lamp tilt/Surface depreciation/
                Lamp lumen depreciation/Luminaire dirt depreciation/
                calculated loss factor.</returns>
            <search>family,type,light,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightDimmingColor(Revit.Elements.FamilyType,System.Enum)">
            <summary>
            Set light dimming color by name.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="color">Light dimming color as Revit enumeration type.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,dimming,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightColorFilter(Revit.Elements.FamilyType,DSCore.Color)">
            <summary>
            Set light color filter.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="color">Color as dynamo type.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,color,filter</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightShape(Revit.Elements.FamilyType,System.Enum)">
            <summary>
            Set light shape style, using either Point, Line, Rectangle or Circle style.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="style">Light shape style as Revit enumeration type.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,shape</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightDistribution(Revit.Elements.FamilyType,System.Enum)">
            <summary>
            Set light distribution style, using either Spherical, 
            Hemispherical, Spot or PhotometricWeb style.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <param name="style">Light distribution style as Revit enumeration type.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,distribution</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightColor(Revit.Elements.FamilyType,System.Object,System.Enum,System.Double)">
            <summary>
            Set light initial color, using either Preset colors or a Custom color value.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <param name="style">Initial color style as Orchid enumeration type.</param>
            <param name="color">Preset initial color (if preset color style) as Revit enumeration type.</param>
            <param name="value">Temperature value (if custom color style).</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightIntensity(Revit.Elements.FamilyType,System.Object,System.Double,System.Double)">
            <summary>
            Set light initial intensity, using either Flux, Luminous, Illuminance or Wattage intensity.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <param name="style">Light initial intensity as Orchid enumeration type.</param>
            <param name="valueA">Depending on the style is this value either for
                flux, luminous, illuminance, or wattage.</param>
            <param name="valueB">Depending on the style is this value either for 
                distance, efficacy, or has no value.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightLossFactor(Revit.Elements.FamilyType,System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set light loss factor, using either basic or advanved loss factor.
            Note: To verify which values is needed for the style, please look inside Revit!
            </summary>
            <param name="familyType">Family type.</param>
            <param name="style">Loss factor as Orchid enumeration type.</param>
            <param name="value">Basic loss factor value (0.0 - 4.0).</param>
            <param name="temperature">Advanced loss factor, value for the temperature (-2.0 - 2.0).</param>
            <param name="voltage">Advanced loss factor, value for the voltage (-2.0 - 2.0).</param>
            <param name="ballast">Advanced loss factor, value for the ballast (0.0 - 1.0).</param>
            <param name="tilt">Advanced loss factor, value for the lamp tilt (0.0 - 1.0).</param>
            <param name="surface">Advanced loss factor, value for the 
                surface depreciation (0.0 - 1.0).</param>
            <param name="lumen">Advanced loss factor, value for the 
                lamp lumen depreciation (0.0 - 1.0).</param>
            <param name="luminaire">Advanced loss factor, value for the 
                luminaire dirt depreciation (0.0 - 1.0).</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightPresetColor(Revit.Elements.FamilyType,System.Enum)">
            <summary>
            Set light (Preset) initial color.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="color">Preset initial color as Revit enumeration type.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,preset,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightCustomColor(Revit.Elements.FamilyType,System.Double)">
            <summary>
            Set light (Custom) initial color.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="value">Value for the custom initial color.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,custom,color</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightFluxIntensity(Revit.Elements.FamilyType,System.Double)">
            <summary>
            Set light (Flux) initial intensity.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="value">Flux value for the initial intensity.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,flux,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightLuminousIntensity(Revit.Elements.FamilyType,System.Double)">
            <summary>
            Set light (Luminous) initial intensity.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="value">Value for the initial intensity.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,lLuminous,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightIlluminanceIntensity(Revit.Elements.FamilyType,System.Double,System.Double)">
            <summary>
            Set light (Illuminance) initial intensity.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="illuminance">Illuminance value for the initial intensity.</param>
            <param name="distance">Distance Value for the initial intensity.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,illuminance,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetLightWattageIntensity(Revit.Elements.FamilyType,System.Double,System.Double)">
            <summary>
            Set light (Wattage) initial intensity.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="wattage">Wattage value for the initial intensity.</param>
            <param name="efficacy">Efficacy Value for the initial intensity.</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,light,wattage,intensity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetBasicLossFactor(Revit.Elements.FamilyType,System.Double)">
            <summary>
            Set light (Basic) loss factor.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="value">Value for the loss factor (0.0 - 4.0).</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,basic,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.SetAdvancedLossFactor(Revit.Elements.FamilyType,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set light (Advanced) loss factor.
            </summary>
            <param name="familyType">Family type.</param>
            <param name="temperature">Temperature value for the loss factor (-2.0 - 2.0).</param>
            <param name="voltage">Voltage value for the loss factor (-2.0 - 2.0).</param>
            <param name="ballast">Ballast value for the loss factor (0.0 - 1.0).</param>
            <param name="tilt">Lamp tilt value for the loss factor (0.0 - 1.0).</param>
            <param name="surface">Surface depreciation value for the loss factor (0.0 - 1.0).</param>
            <param name="lumen">Lamp lumen depreciation value for the loss factor (0.0 - 1.0).</param>
            <param name="luminaire">Luminaire dirt depreciation value for the loss factor (0.0 - 1.0).</param>
            <returns name="FamilyType">Family type.</returns>
            <search>family,type,advanced,loss,factor</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByName(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String,System.String)">
            <summary>
            Filter elements by name.
            </summary>
            <param name="element">List of elements.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Name value to filter by.</param>
            <returns name="Element">Element.</returns>
            <search>filter,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByCategory(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Object)">
            <summary>
            Filter elements by category, as string or Dynamo type.
            </summary>
            <param name="element">List of elements.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Category to filter.</param>
            <returns name="Element">Element.</returns>
            <search>filter,parameter,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Filter.ByParameter(System.Collections.Generic.List{Revit.Elements.Element},System.String,System.String,System.Object)">
            <summary>
            Filter elements by parameter.
            </summary>
            <param name="element">List of elements.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="parameterName">Parameter name to filter.</param>
            <param name="value">Value to filter by.</param>
            <returns name="Element">Element.</returns>
            <search>filter,parameter,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FloorType.IsFoundationSlab(Revit.Elements.Element)">
            <summary>
            Verify if floor is foundation slab.
            </summary>
            <param name="FloorType">The floor type type.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>floor,type,foundation,slab</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FloorType.StructuralMaterial(Revit.Elements.Element)">
            <summary>
            Get the floor type structural material.
            </summary>
            <param name="FloorType">The floor type type.</param>
            <returns name="Material">The floor structural material.</returns>
            <search>floor,type,structural,material</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Create(System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Create group by name. 
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="name">Group name as string.</param>
            <param name="element">Element.</param>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group.</returns>
            <search>group,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.InDocument(System.Boolean,System.Boolean)">
            <summary>
            All group in current document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.InDocument(Revit.Application.Document,System.Boolean,System.Boolean)">
            <summary>
            All group in document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Model(System.Boolean)">
            <summary>
            Get all model group in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,model,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Detail(System.Boolean,System.Boolean)">
            <summary>
            Get all detail group in current document.
            Note: The boolean value "filter", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="filter">True value does NOT include elements placed on legend or drafting view!</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,detail,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.HasNestedGroup(Revit.Elements.Element)">
            <summary>
            Has nested group in group.
            </summary>
            <param name="group">Group.</param>
            <returns name="boolean">True if group has nested group.</returns>
            <search>group,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.NestedGroup(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get nested group in group.
            </summary>
            <param name="group">Group.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.HasNestedElement(Revit.Elements.Element)">
            <summary>
            Has nested element in group, detaling elements is excluded!
            </summary>
            <param name="group">Group.</param>
            <returns name="boolean">True if group has nested element.</returns>
            <search>group,element,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.NestedElement(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get nested Element in group, detaling elements is excluded!
            </summary>
            <param name="group">Group.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element type.</returns>
            <search>group,element,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.ByName(System.String,System.Boolean)">
            <summary>
            Get group by name.
            </summary>
            <param name="name">Group name as string.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.ByGroupType(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get group by group type.
            </summary>
            <param name="groupType">GroupType.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Element(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get placed element (group) by group.
            </summary>
            <param name="group">Group.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>group,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(System.String)">
            <summary>
            Ungroup by name.
            </summary>
            <param name="name">Group name as string.</param>
            <search>group</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(Revit.Elements.Element)">
            <summary>
            Ungroup group.
            </summary>
            <param name="group">Group.</param>
            <search>group</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(System.String)">
            <summary>
            Delete group by name.
            </summary>
            <param name="name">Group name as string.</param>
            <search>group,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(Revit.Elements.Element)">
            <summary>
            Delete group.
            </summary>
            <param name="group">Group.</param>
            <search>group,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.InDocument(System.Boolean)">
            <summary>
            All group type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="GroupType">GroupType.</returns>
            <search>group,type,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.InDocument(Revit.Application.Document,System.Boolean)">
            <summary>
            All group type in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="GroupType">GroupType.</returns>
            <search>group,type,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Model(System.Boolean)">
            <summary>
            Get all model group type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,type,model,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Detail(System.Boolean)">
            <summary>
            Get all detail group type in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Group">Group.</returns>
            <search>group,type,detail,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.HasNestedGroup(Revit.Elements.Element)">
            <summary>
            Has nested group in group type.
            </summary>
            <param name="groupType">Group type.</param>
            <returns name="boolean">True if group type has nested group.</returns>
            <search>group,type,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.NestedGroup(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get nested group in group type.
            </summary>
            <param name="groupType">Group type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="GroupType">Group type.</returns>
            <search>group,type,nested</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.HasNestedElement(Revit.Elements.Element)">
            <summary>
            Has nested element in group type, detaling elements is excluded!
            </summary>
            <param name="groupType">Group type.</param>
            <returns name="boolean">True if group type has nested element.</returns>
            <search>group,type,nested,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.NestedElement(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get nested element in group type, detaling elements is excluded!
            </summary>
            <param name="groupType">Group type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element type.</returns>
            <search>group,type,nested,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.ByName(System.String,System.Boolean)">
            <summary>
            Get group type by name.
            </summary>
            <param name="name">Group name as string.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="GroupType">GroupType.</returns>
            <search>group,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.ByGroup(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get group type by group.
            </summary>
            <param name="group">Group.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="GroupType">GroupType.</returns>
            <search>group,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Element(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get placed element (group) by group type.
            </summary>
            <param name="groupType">Group type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>group,type,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Place(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Place a group by group type. .
            </summary>
            <param name="groupType">Group type.</param>
            <param name="point">Point.</param>
            <returns name="Group">Group.</returns>
            <search>group,type,place</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(System.String)">
            <summary>
            Delete group type by name.
            </summary>
            <param name="name">GroupType name as string.</param>
            <search>group,type,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(Revit.Elements.Element)">
            <summary>
            Delete group type.
            </summary>
            <param name="groupType">GroupType.</param>
            <search>group,type,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Quantity(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material by element, return values in SI unit (m2/m3).
            </summary>
            <param name="element">Element.</param>
            <returns name="Material">List of material.</returns>
            <returns name="area">List of area.</returns>
            <returns name="volumne">List of volumne.</returns>
            <search>material,quantity</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.SumByElement(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Material by (summarized) element area and volumne.
            </summary>
            <param name="element">Element.</param>
            <returns name="Material">Material.</returns>
            <returns name="area">Area as double.</returns>
            <returns name="volumne">Volumne as double.</returns>
            <search>material,density,sum</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Sum(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Element by (summarized) material area and volumne.
            </summary>
            <param name="material">Material.</param>
            <returns name="Element">Element.</returns>
            <returns name="area">Area as double.</returns>
            <returns name="volumne">Volumne as double.</returns>
            <search>material,density,sum</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Density(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material asset as physical and thermal density.
            </summary>
            <param name="material">Material.</param>
            <returns name="physical">Physical density.</returns>
            <returns name="thermal">Thermal density.</returns>
            <search>material,density,asset,physical,thermal</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.InDocument(Revit.Application.Document)">
            <summary>
            Get all spatial element (space, room, area) in current document
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.InDocument(Revit.Application.Document,System.Enum)">
            <summary>
            Get all spatial element (space, room, area) in current document
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="spatialType">Spatial type as enumeration type.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CreateRoom(Revit.Application.Document,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.String,System.String)">
            <summary>
            Create a room (by phase).
            Note: Bounding elements according to the phase must exist.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="phase">Phase for the room.</param>
            <param name="level">Level the room is hosted on.</param>
            <param name="location">Location for the center of the room.</param>
            <param name="name">Room name.</param>
            <param name="number">Room number.</param>
            <returns name="Room">Room.</returns>
            <search>spatial,element,room,space,area,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CreateSpace(Revit.Application.Document,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.String,System.String)">
            <summary>
            Create a space (by phase).
            Note: Bounding elements according to the phase must exist
            and active view for space location must be set. 
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="phase">Phase for the space.</param>
            <param name="level">Level the space is hosted on.</param>
            <param name="location">Location for the center of the space.</param>
            <param name="name">Space name.</param>
            <param name="number">Space number.</param>
            <returns name="Space">Space.</returns>
            <search>spatial,element,room,space,area,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CenterLocation(Revit.Elements.Element)">
            <summary>
            Center the location of a spatial element (space, room, area) by its geometry.
            Note: Spatial element must not have status as "unplaced".
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,location,center</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetName(Revit.Elements.Element,System.String)">
            <summary>
            Set the name of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <param name="value">Name.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetNumber(Revit.Elements.Element,System.String)">
            <summary>
            Set the number of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <param name="value">Number.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,number</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetUpperLimit(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set the spatial element (space, room, area) level location.
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <param name="level">Level.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,limit,upper</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetBaseOffset(Revit.Elements.Element,System.Double)">
            <summary>
            Set the base offset of  the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <param name="value">Value as double.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,offset,base</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetLimitOffset(Revit.Elements.Element,System.Double)">
            <summary>
            Set the limit offset of  the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <param name="value">Value as double.</param>
            <returns name="SpatialElement">Spatial element.</returns>
            <search>spatial,element,room,space,area,limit,offset</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SetBoundaryConditions(Revit.Application.Document,System.Enum,System.Enum)">
            <summary>
            Compute volumes of spatial element (space, room, area) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="boundaryLocation">Boundary location as enumeration type.</param>
            <param name="spatialType">Spatial type as enumeration type.</param>
            <search>spatial,element,room,space,area,boundary,condition</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Name(Revit.Elements.Element)">
            <summary>
            Get the spatial element (space, room, area) name
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="string">Name.</returns>
            <search>spatial,element,room,space,area,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Number(Revit.Elements.Element)">
            <summary>
            Get the spatial element (space, room, area) number.
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="string">Number.</returns>
            <search>spatial,element,room,space,area,number</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Area(Revit.Elements.Element)">
            <summary>
            Get area of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="double">Area.</returns>
            <search>spatial,element,room,space,area</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Height(Revit.Elements.Element)">
            <summary>
            Get height of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="double">Height.</returns>
            <search>spatial,element,room,space,area,height</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Volume(Revit.Elements.Element)">
            <summary>
            Get the volume of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="double">Volume.</returns>
            <search>spatial,element,room,space,area,volumne</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Location(Revit.Elements.Element)">
            <summary>
            Get the Location of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="point">Point.</returns>
            <search>spatial,element,room,space,area,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Level(Revit.Elements.Element)">
            <summary>
            Get the spatial element (space, room, area) level location.
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Level">Level.</returns>
            <search>spatial,element,room,space,area,level</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Phase(Revit.Elements.Element)">
            <summary>
            Get the phase of the spatial element (space, room).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Phase">Phase.</returns>
            <search>spatial,element,room,space,phase</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Status(Revit.Elements.Element)">
            <summary>
            Get the status of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Status">Status as string.</returns>
            <search>spatial,element,room,space,area,status</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.UpperLimit(Revit.Elements.Element)">
            <summary>
            Get the spatial element (space, room, area) level location.
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Level">Level.</returns>
            <search>spatial,element,room,space,area,limit,upper</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.BaseOffset(Revit.Elements.Element)">
            <summary>
            Get the base offset of  the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="double">Value as double.</returns>
            <search>spatial,element,room,space,area,offset,base</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.LimitOffset(Revit.Elements.Element)">
            <summary>
            Get the limit offset of  the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="double">Value as double.</returns>
            <search>spatial,element,room,space,area,offset,limit</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SeparationLines">
            <summary>
            Get all separation line elements in the document (space, room, area).
            </summary>
            <returns name="Element">Element.</returns>
            <returns name="Category">Category.</returns>
            <search>spatial,element,room,space,area,separation,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.SeparationLine(Revit.Application.Document,Revit.Elements.Element)">
            <summary>
            Separation line elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,separation,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Boundary(Revit.Application.Document,Revit.Elements.Element,System.Enum)">
            <summary>
            Boundary elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="spatialElement">Spatial element.</param>
            <param name="boundaryLocation">Boundary location as enumeration type.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,boundary</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CenterBoundary(Revit.Elements.Element)">
            <summary>
            Centerline boundary elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,boundary,center</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CoreBoundary(Revit.Elements.Element)">
            <summary>
            Core boundary elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,boundary,core</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.FinishBoundary(Revit.Elements.Element)">
            <summary>
            Finish boundary elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,boundary,finish</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.CoreCenterBoundary(Revit.Elements.Element)">
            <summary>
            Core center boundary elements and curves of the spatial element (space, room, area).
            </summary>
            <param name="spatialElement">Spatial element.</param>
            <returns name="Element">Element.</returns>
            <returns name="Curve">Curve.</returns>
            <search>spatial,element,room,space,area,boundary,core,center</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.IsInsideRoom(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Verify if a point is inside of a room.
            </summary>
            <param name="room">Room.</param>
            <param name="point">Point.</param>
            <returns name="boolean">Boolean verification!</returns>
            <search>spatial,element,room,space,area,inside</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.IsInsideSpace(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Verify if a point is inside of a space.
            </summary>
            <param name="space">Space.</param>
            <param name="point">Point.</param>
            <returns name="boolean">Boolean verification!</returns>
            <search>spatial,element,room,space,area,inside</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.Occupiable(Revit.Elements.Element)">
            <summary>
            Verify if space is Occupiable.
            </summary>
            <param name="space">Space.</param>
            <returns name="boolean">Boolean verification!</returns>
            <search>spatial,element,room,space,area,occupi</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Sweep.InDocument">
            <summary>
            Get all sweep in current document.
            </summary>
            <returns name="Sweep">Sweep.</returns>
            <search>sweep,all</search>
        </member>
        <member name="F:Orchid.RevitProject.Elements.SystemFamily.Types">
            SystemFamily type elements
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.IsTypeOf(Revit.Elements.Element)">
            <summary>
            Get the system family hosting condition, output as boolean.
            </summary>
            <param name="element">The system family.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>system,family,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.Hosting(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the system family hosting condition, output as element.
            </summary>
            <param name="element">The system family .</param>
            <returns name="true">Hosting element.</returns>
            <returns name="false">Not hosting element.</returns>
            <search>system,family,host</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.Inserts(Revit.Elements.Element)">
            <summary>
            Get inserts in the system family.
            </summary>
            <param name="element">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>system,family,insert</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.Analytical(Revit.Elements.Element)">
            <summary>
            Get analytical (structure) element.
            </summary>
            <param name="element">Element.</param>
            <returns name="Element">Analytical Element.</returns>
            <search>system,family,analytical</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetAreaLoad(Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{System.Double},System.Boolean)">
            <summary>
            Set analytical (structure) area load.
            </summary>
            <param name="element">Element.</param>
            <param name="areaLoadType">AreaLoadType.</param>
            <param name="value">Load value as double.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element.</returns>
            <search>system,family,area,load</search>
        </member>
        <member name="F:Orchid.RevitProject.Elements.SystemFamilyType.types">
            Host type elements
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.CreateCompoundLayer(Revit.Elements.Element,System.Enum,System.Collections.Generic.List{Revit.Elements.Material},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="function">The function as enumeration type.</param>
            <param name="material">The material as Dynamo type.</param>
            <param name="thickness">Thickness of the layer.</param>
            <param name="wrapping">Wrapping of the layer.</param>
            <param name="variable">Set the layer variable.</param>
            <param name="structural">Set the layer structural.</param>
            <param name="placement">Placement of the layer (string).</param>
            <param name="index">The index of the layer.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.DeleteCompoundLayer(Revit.Elements.Element,System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="index">The index of the layer.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerMaterial(Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Material},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the material by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="material">The material as Dynamo type.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,material</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerWidth(Revit.Elements.Element,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the width by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="thickness">Thickness of the layer.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,width</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerWrapping(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Wrapping of the layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="wrapping">Wrapping of the layer.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,wrap</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerVariable(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer variable by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="variable">Set the layer variable.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,variable</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.SetCompoundLayerStructural(Revit.Elements.Element,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer structural by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <param name="structural">Set the layer structural.</param>
            <param name="index">The index to set.</param>
            <returns name="ElementType">The system family type.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,structural</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.ThermalProperties(Revit.Elements.Element)">
            <summary>
            Get the system family thermal properties.
            </summary>
            <param name="elementType">The system family type.</param>
            <returns name="HeatTransferCoefficient">The system family heat transfer coefficient (W/(m^2*K)).</returns>
            <returns name="ThermalResistance">The system family thermal resistance ((m^2*K)/Watt).</returns>
            <returns name="ThermalMass">The system family thermal mass (kg J/K or kg ft^2/(s^2 K)).</returns>
            <returns name="Absorptance">The system family absorptance (double).</returns>
            <returns name="Roughness">The system family roughness (integer).</returns>
            <search>system,family,type,wall,floor,roof,ceiling,thermal,property</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.CompoundLayerMaterial(Revit.Elements.Element)">
            <summary>
            Get the compound layer material in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <returns name="Material">Material.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,material</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamilyType.CompoundLayerWidth(Revit.Elements.Element)">
            <summary>
            Get the compound layer width in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type.</param>
            <returns name="double">Width.</returns>
            <search>system,family,type,wall,floor,roof,ceiling,compound,layer,width</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Types.ByName(System.String)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Types.Name(System.Type)">
            <summary>
            From Dynamo 2.13 (Revit 2023) and beyond is "Type" refactored to "Class". 
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.StackedWalls(System.Boolean)">
            <summary>
            All stacked wall in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Wall">Stacked wall.</returns>
            <search>wall,All,stacked</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.IsFlipped(Revit.Elements.Wall)">
            <summary>
            Get the wall flip condition, output as boolean.
            </summary>
            <param name="wall">Wall.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>wall,flip</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.Flipped(System.Collections.Generic.List{Revit.Elements.Wall})">
            <summary>
            Get the wall flip condition, output as element.
            </summary>
            <param name="wall">Wall.</param>
            <returns name="true">Flipped element.</returns>
            <returns name="false">Not flipped element.</returns>
            <search>wall,flip,condition</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.Orientation(Revit.Elements.Wall)">
            <summary>
            Get the wall orientation, output as vector.
            </summary>
            <param name="wall">Wall.</param>
            <returns name="Vector">Vector.</returns>
            <search>wall,orientation</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Function(Revit.Elements.Element)">
            <summary>
            Get the wall type function.
            </summary>
            <param name="wallType">The wall type.</param>
            <returns name="string">The wall type function.</returns>
            <search>wall,type,function</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Kind(Revit.Elements.Element)">
            <summary>
            Get the wall type kind.
            </summary>
            <param name="wallType">The wall type.</param>
            <returns name="string">The wall type kind.</returns>
            <search>wall,type,kind</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.WallType.Width(Revit.Elements.Element)">
            <summary>
            Get the wall type width.
            </summary>
            <param name="wallType">The wall type.</param>
            <returns name="double">The wall type width.</returns>
            <search>wall,type,width</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ElementFilter.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ElementFilter.Rule(Orchid.RevitProject.Filters.ElementFilter)">
            <summary>
            Get filter rule by element (logical and/or) filter.
            </summary>
            <param name="elementFilter">Element (logical) filter.</param>
            <returns name="FilterRule">FilterRule.</returns>
            <search>element,filter,rule</search>
        </member>
        <member name="T:Orchid.RevitProject.Filters.AlterFilterRule">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(System.String,System.String,System.Object)">
            <summary>
            Create a filter rule by parameter name.
            Note: This function handles only user-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">User-defined parameter name to filter.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule.</returns>
            <search>filter,rule,create,parameter,string,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Create a filter rule by Dynamo (Revit.Elements.Element) parameter.
            Note: This function handles only user-defined parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameter">User-defined parameter as Dynamo type to filter.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule.</returns>
            <search>filter,rule,create,parameter,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.FilterRule.Create(Revit.Elements.Parameter,System.String,System.Object)">
            <summary>
            Create a filter rule by Dynamo (Revit.Elements.Parameter) parameter.
            Note: This function handles only element parameters.
            </summary>
            <param name="parameter">Parameter as Dynamo type.</param>
            <param name="ruleType">Type of rule for the filter.</param>
            <param name="value">Value to check.</param>
            <returns name="FilterRule">FilterRule.</returns>
            <search>filter,rule,create,parameter</search>
        </member>
        <member name="T:Orchid.RevitProject.Filters.AlterParameterFilter">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.Create(System.String,System.Collections.Generic.IEnumerable{Revit.Filter.FilterRule},System.Collections.Generic.IEnumerable{Revit.Elements.Category},System.Boolean)">
            <summary>
            Create a parameter filter element by filter rule and logical filter.
            </summary>
            <param name="name">Name for the filter.</param>
            <param name="filterRule">Filter rule(s).</param>
            <param name="category">Category the filter apply to.</param>
            <param name="andOr">True set an AND filter, false set an OR filter!?</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,rule</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.AddRule(Revit.Filter.ParameterFilterElement,System.Collections.IList,System.Collections.IList,System.Collections.Generic.IEnumerable{Revit.Filter.FilterRule},System.Boolean)">
            <summary>
            Add filter rule(s) to the parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <param name="ruleTree">RuleTree as list.</param>
            <param name="atIndex">The index of the rule(s) to be added. 
            Default value (null) add the rule(s) to the end.</param>
            <param name="filterRule">Filter rule(s).</param>
            <param name="andOr">True set an AND filter, false set an OR filter!?</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,rule,set</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.ReplaceRule(Revit.Filter.ParameterFilterElement,System.Collections.IList,System.Collections.IList,System.Collections.Generic.IEnumerable{Revit.Filter.FilterRule},System.Boolean)">
            <summary>
            Replace filter rule(s) in the parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <param name="ruleTree">RuleTree as list.</param>
            <param name="atIndex">The index of the rule(s) to be replaced. 
            Default value (null) replace the rule(s) at the end.</param>
            <param name="filterRule">Filter rule(s).</param>
            <param name="andOr">True set an AND filter, false set an OR filter!?</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,rule,set</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.RemoveRule(Revit.Filter.ParameterFilterElement,System.Collections.IList,System.Collections.IList)">
            <summary>
            Remove filter rule(s) in the parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <param name="ruleTree">RuleTree as list.</param>
            <param name="atIndex">The index of the rule(s) to be removed. 
            Default value (null) remove the rule(s) at the end.</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,rule,set</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.ClearRules(Revit.Filter.ParameterFilterElement)">
            <summary>
            Clear all rules attached to the parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,rule,clear</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.Purge(Revit.Application.Document)">
            <summary>
            Purge parameter filter element(s) in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>parameter,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.RuleTree(Revit.Filter.ParameterFilterElement)">
            <summary>
            Get parameter filter element rule tree.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <returns name="RuleTree">RuleTree as list.</returns>
            <search>parameter,filter,rule,tree</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.InDocument(System.Boolean)">
            <summary>
            All parameter filter element(s) in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.Categories(Revit.Filter.ParameterFilterElement,System.Boolean)">
            <summary>
            Gets the categories admitted by the given parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Category">Gets the categories admitted by the given filter.</returns>
            <search>parameter,filter,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.ByName(System.String)">
            <summary>
            Get parameter filter element by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="ParameterFilter">Parameter filter element.</returns>
            <search>parameter,filter,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Filters.ParameterFilter.Rule(Revit.Filter.ParameterFilterElement)">
            <summary>
            Get filter rule by parameter filter element.
            </summary>
            <param name="parameterFilter">Parameter filter element.</param>
            <returns name="FilterRule">FilterRule.</returns>
            <search>parameter,filter,rule,result</search>
        </member>
        <member name="P:Orchid.RevitProject.Parameters.BuiltInParameter.WrappedType">
            <summary>
            WrappedType is returning the Autodesk.Revit.DB.BuiltInParameter
            integer value. Enums can't be used as public return values in
            Dynamo without the entire enums being shown as nodes!?
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Parameters.BuiltInParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
            <returns name="string">string.</returns>
            <search>parameter,builtin,name</search>
        </member>
        <member name="P:Orchid.RevitProject.Parameters.BuiltInParameter.Id">
            <summary>
            The id of the parameter.
            </summary>
            <returns name="int">integer.</returns>
            <search>parameter,builtin,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Label(Orchid.RevitProject.Parameters.BuiltInParameter)">
            <summary>
            Get the builtin parameter label.
            </summary>
            <param name="builtInParameter">Builtin parameter as Orchid Value.</param>
            <returns name="string">string.</returns>
            <search>parameter,builtin,label</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.InDocument">
            <summary>
            Get all builtin parameters.
            </summary>
            <returns name="BuiltInParameter">BuiltInParameter as Orchid type.</returns>
            <search>parameter,builtin,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.ByName(System.String)">
            <summary>
            Get builtin parameter by name.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="BuiltInParameter">BuiltInParameter as Orchid type.</returns>
            <search>parameter,builtin,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.ById(System.Int32)">
            <summary>
            Get builtin parameter by id (integer value).
            </summary>
            <param name="parameterId">Integer value for the builtin parameter.</param>
            <returns name="BuiltInParameter">BuiltInParameter as Orchid type.</returns>
            <search>parameter,builtin,id</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.ParameterByName(Revit.Elements.Element,System.String)">
            <summary>
            Get builtin parameter by name.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name as string value.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
            <search>parameter,builtin,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.ParameterById(Revit.Elements.Element,System.Int32)">
            <summary>
            Get the builtin parameter.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="parameterId">Integer value for the builtin parameter.</param>
            <returns name="Parameter">Parameter as Dynamo type.</returns>
            <search>parameter,builtin,id</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Value(Orchid.RevitProject.Parameters.BuiltInParameter,Revit.Elements.Element)">
            <summary>
            Get the value of the element parameter by name.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="builtInParameter">BuiltInParameter as Orchid type.</param>
            <param name="element">Element as dynamo type.</param>
            <returns name="value">Parameter value.</returns>
            <search>parameter,builtin,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.SetValue(Revit.Elements.Element,Orchid.RevitProject.Parameters.BuiltInParameter,System.Object)">
            <summary>
            Set the value of the element parameter by the builtin parameter.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="builtInParameter">BuiltInParameter as Orchid type.</param>
            <param name="value">Parameter value to set.</param>
            <returns name="Element">Element as dynamo type.</returns>
            <search>parameter,builtin,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.SetValue(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Set the value of the element parameter by name of the builtin parameter.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name as string value.</param>
            <param name="value">Parameter value to set.</param>
            <returns name="Parameter">Parameter as dynamo type.</returns>
            <search>parameter,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ToString">
            <summary>
            Wrapped string override.
            </summary>
            <returns></returns>
            <search>definition,</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ToOrchidType(Autodesk.Revit.DB.Definition,System.Boolean)">
            <summary>
            Convert Autodesk Revit definition to Orchid definition.
            </summary>
            <param name="definition">Definition as Revit type.</param>
            <param name="isExternalDefinition">Add boolean value, default is true!</param>
            <returns name="Workset">Definition as Orchid type.</returns>
            <search>definition,convert,revit,orchid</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ToRevitType(Orchid.RevitProject.Parameters.Definition)">
            <summary>
            Convert Orchid definition to Autodesk Revit definition.
            </summary>
            <param name="definition">Definition as Orchid type.</param>
            <returns name="Workset">Definition as Revit type.</returns>
            <search>definition,convert,revit,orchid</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ByName(System.String)">
            <summary>
            Get parameter definition by name.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
            <search>definition,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ByParameter(Revit.Elements.Element)">
            <summary>
            Get parameter definition by parameter in the currrent project document.
            </summary>
            <param name="parameter">Parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
            <search>definition,parameter</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Definition.ByParameter(Revit.Elements.Parameter)">
            <summary>
            Get parameter definition by parameter in the currrent project document.
            </summary>
            <param name="parameter">Parameter.</param>
            <returns name="Definition">The parameter definition.</returns>
            <search>definition,parameter</search>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Orchid.RevitProject.Parameters.Definition.Category(Orchid.RevitProject.Parameters.Definition,System.Boolean)" -->
        <member name="M:Orchid.RevitProject.Parameters.Definition.External(System.String)">
            <summary>
            Get shared parameter definition by name from the current shared parameter file.
            </summary>
            <param name="name">The name of the shared parameter.</param>
            <returns name="Definition">The shared parameter definition.</returns>
            <search>definition,external,shared,parameter</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.Associate(Revit.Elements.Element,System.String,Revit.Elements.Element)">
            <summary>
            Associate element parameter to global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="globalParameter">The global parameter.</param>
            <returns name="Element">Element.</returns>
            <search>parameter,global,associat</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.HasAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Verify if parameter has associated global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns name="boolean">Whether true or false value.</returns>
            <search>parameter,global,associat</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.GlobalParameter.Associated(Revit.Elements.Element,System.String)">
            <summary>
            Get associated global parameter.
            </summary>
            <param name="element">Element as string or Dynamo type.</param>
            <param name="parameterName">The name of the parameter.</param>
            <returns name="ParameterElement">Global parameter element.</returns>
            <search>parameter,global,associat</search>
        </member>
        <member name="T:Orchid.RevitProject.Parameters.AlterParameter">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ByName(Revit.Elements.Element,System.String)">
            <summary>
            Get element parameter by name.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name of the parameter.</param>
            <returns name="Parameter">Parameter.</returns>
            <search>parameter,element,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Value(Revit.Elements.Element,System.String)">
            <summary>
            Get the value of the element parameter by name.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name of the parameter.</param>
            <returns name="value">Parameter value.</returns>
            <search>parameter,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Value(Revit.Elements.Parameter)">
            <summary>
            Get the value of the element parameter by name.
            Note: This function covers also elements in linked documents!
            </summary>
            <param name="parameter">Parameter as dynamo type.</param>
            <returns name="value">Parameter value.</returns>
            <search>parameter,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.SetValue(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Set the value of the element parameter by name.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name of the parameter.</param>
            <param name="value">Parameter value to set.</param>
            <returns name="Element">Element as dynamo type.</returns>
            <search>parameter,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.SetValue(Revit.Elements.Parameter,System.Object)">
            <summary>
            Set the value of the parameter.
            </summary>
            <param name="parameter">Parameter as dynamo type.</param>
            <param name="value">Parameter value to set.</param>
            <returns name="Parameter">Parameter as dynamo type.</returns>
            <search>parameter,element,value,linked,xref</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Exists(Revit.Elements.Element,System.String)">
            <summary>
            Verify if parameter exists in element.
            </summary>
            <param name="element">Element as dynamo type.</param>
            <param name="name">Name of the parameter.</param>
            <returns name="boolean">Whether the parameter exists or not.</returns>
            <search>parameter,element,exist</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.FilterableCategory(Revit.Elements.Parameter)">
            <summary>
            Get the parameter filterable categories.
            </summary>
            <param name="parameter">Parameter as dynamo type.</param>
            <returns name="Category">Category.</returns>
            <search>parameter,project,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Purge(Revit.Application.Document)">
            <summary>
            Purge parameter(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>parameter,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.VerifyIsProject(Autodesk.Revit.DB.Document)">
            verify that it is a project document
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.GetParameterByName(Revit.Elements.Element,System.String)">
            Not in use at the moment, should be used to get parameter
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.PresetParameterFile(Autodesk.Revit.DB.Document,System.Boolean,System.String)">
            <summary>
            Store current shared parameter file and/or set a temporary file.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="embedded">Use an embedded file?</param>
            <param name="file">Provided shared parameter file or null.</param>
            <returns name = "PresetFile">Preset parameter file to be restorred.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.ResetParameterFile(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            reset to point of departure, apply old shared parameter file if changed.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="presetFile">Preset parameter file to be restorred.</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.ExternalParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="parameterName">Parameter name.</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Categories</param>
            <param name="embedded">Use embedded resource file?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.EditableParameterFile(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.String,System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="parameterName">Parameter name.</param>
            <param name="groupName">Parameter group name.</param>
            <param name="type">BuiltIn Parameter Type.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Categories</param>
            <param name="create">Create value in shared parameter?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ParameterServices.FixedParameterFile(Autodesk.Revit.DB.Document,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{Revit.Elements.Category},System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="file">Parameter file.</param>
            <param name="parameterName">Parameter name.</param>
            <param name="groupName">Parameter group name.</param>
            <param name="group">BuiltIn Parameter Group.</param>
            <param name="instance">Is instance parameter?</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Categories</param>
            <param name="embedded">Use embedded resource file?</param>
            <param name="transactionName">Transaction name.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Create(System.Collections.Generic.List{System.String},Revit.Elements.SpecType,Revit.Elements.GroupType,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Create project parameter by name. 
            Note: Due to the Revit API does not allow adding internal parameters, parameters
            are added as external parameters in the same way as shared parameters. Therefore,
            parameters cannot be associated with other &lt;Family Type&gt; and will appear
            as shared parameters that are not stored in your regular parameter file.
            This includes if the parameter exists is the category binding being updated!
            </summary>
            <param name="parameterName">The name of the parameter to add (create).</param>
            <param name="specType">Spectype as Dynamo type.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, 
            all possible categories are selected.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterElement">Project parameter element.</returns>
            <search>parameter,project,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.ByName(System.String)">
            <summary>
            Get parameter by name. 
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">Name of the Project parameter.</param>
            <returns name="ParameterElement">Project parameter element.</returns>
            <search>parameter,project,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.ById(System.Int32)">
            <summary>
            Get parameter by id. 
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="id">Id as integer value of the Project parameter.</param>
            <returns name="ParameterElement">Project parameter element.</returns>
            <search>parameter,project,id,integet,elementid</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Exists(System.String)">
            <summary>
            Get parameter by name. 
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">Name of the Project parameter.</param>
            <returns name="boolean">Whether the parameter exists or not.</returns>
            <search>parameter,project,exist,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Binding(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Sort the list of parameters into instance and type bound parameters.
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameter">Project parameters.</param>
            <returns name="Instance">Instance bound parameters.</returns>
            <returns name="Type">Type bound parameters.</returns>
            <search>parameter,project,binding,type,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.IsInstanceBound(Revit.Elements.Element)">
            <summary>
            Verify if parameter is instance bound (true) or type bound (false).
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameter">Project parameter.</param>
            <returns name="boolean">Whether the parameter is instance or not.</returns>
            <search>parameter,project,binding,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Delete(System.String)">
            <summary>
            Delete parameter by name in the project.
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameterName">The name of the Project parameter to delete.</param>
            <returns name="boolean">Whether the parameter exists or not.</returns>
            <search>parameter,project,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Delete(Revit.Elements.Element)">
            <summary>
            Delete parameter by name in the project.
            Note: This function handles only Project parameters,
            such as project, shared, and global parameters.
            </summary>
            <param name="parameter">Project parameter to delete.</param>
            <returns name="boolean">Whether the parameter exists or not.</returns>
            <search>parameter,project,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Purge(Revit.Application.Document)">
            <summary>
            Purge project parameter(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>parameter,shared,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.ChangeCategory(System.String,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Change category binding for parameter by name in the project.
            Note: If the project parameter is created inside Revit, then
            is it impossible to update/change any category!
            </summary>
            <param name="parameterName">The name of the Project parameter to change.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="category">Category(ies) to change the parameter binding to.</param>
            <returns name="ParameterElement">Project parameter element.</returns>
            <search>parameter,project,category,change</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.ChangeCategory(Revit.Elements.Element,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Change category binding for parameter in the project.
            Note: If the project parameter is created inside Revit, then
            is it impossible to update/change any category!
            </summary>
            <param name="parameter">Project parameter to change.</param>
            <param name="instance">Is instance parameter?, otherwise it's a type parameter!</param>
            <param name="category">Category(ies) to change the parameter binding to.</param>
            <returns name="ParameterElement">Project parameter element.</returns>
            <search>parameter,project,category,change</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Category(System.String,System.Boolean)">
            <summary>
            Get the category(ies) bound to the parameter in the project.
            </summary>
            <param name="parameterName">The name of the Project parameter.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Category">Category.</returns>
            <search>parameter,project,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.Category(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get the category(ies) bound to the parameter in the project.
            </summary>
            <param name="parameter">Project parameter.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Category">Category.</returns>
            <search>parameter,project,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.ProjectParameter.FilterableCategory(Revit.Elements.Element)">
            <summary>
            Get the parameter filterable categories.
            </summary>
            <param name="parameter">Project parameter.</param>
            <returns name="Category">Category.</returns>
            <search>parameter,project,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.Create(System.Collections.Generic.List{System.String},System.String,Revit.Elements.SpecType,Revit.Elements.GroupType,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Create shared parameter by name in the project. 
            If the parameter not exists in the shared parameter file is it being created.
            Note: If the parameter exists is the category binding and tooltip being added!
            </summary>
            <param name="parameterName">The name of the parameter to create.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="specType">Spectype as Dynamo type.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="tooltip">Tooltip for the parameter.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterElement">Shared parameter element.</returns>
            <search>parameter,shared,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.Add(System.Collections.Generic.List{System.String},System.String,Revit.Elements.GroupType,System.Boolean,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Add shared parameter by name, from current loaded shared parameter file.
            No new parameters will be created!
            Note: If the parameter exists is the category binding and tooltip being added!
            </summary>
            <param name="parameterName">The name of the parameter to add.</param>
            <param name="groupName">The name of the group where the parameter belong to.</param>
            <param name="groupType">Grouptype as Dynamo type.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter!</param>
            <param name="vary">Vary parameter between groups?</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterElement">Shared parameter element.</returns>
            <search>parameter,shared,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddByGroup(System.Collections.Generic.List{Revit.Application.Document},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.GroupType},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Add shared parameters by groupName, from current loaded shared parameter file. 
            Parameters are set with the same settings pr. provided group and attached the 
            same provided category(ies). Note: If the parameter exists is the category 
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="groupName">Group of the parameter to add from the file, If no 
            group is supplied, all possible groups are selected.</param>
            <param name="groupType">Grouptype as Dynamo type to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="vary">Vary parameter between groups? 
            Boolean value must be set pr. provided group.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterElement">Shared parameter element.</returns>
            <returns name="GroupName">List of group names.</returns>
            <search>parameter,shared,add,group,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.AddByFile(System.Collections.Generic.List{Revit.Application.Document},System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.GroupType},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{Revit.Elements.Category},System.Boolean)">
            <summary>
            Add parameters by groupName, by the provided shared parameter file. 
            Parameters are set with the same settings pr. provided group and attached the 
            same provided category(ies). Note: If the parameter exists is the category
            binding being updated, and tooltip is being added if exsist!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="file">Shared Parameter file incl. file extension.</param>
            <param name="groupName">Group of the parameter to add from the file.
            If no group is supplied, all possible groups are selected.</param>
            <param name="groupType">Grouptype as Dynamo type to add pr. provided group.</param>
            <param name="instance">Is instance parameter? Otherwise it's a type parameter! 
            Boolean value must be set pr. provided group.</param>
            <param name="vary">Vary parameter between groups? 
            Boolean value must be set pr. provided group.</param>
            <param name="category">Category(ies) the parameter applies to.
            If no category is supplied, all possible categories are selected.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="ParameterElement">Shared parameter element.</returns>
            <returns name="GroupName">List of group names.</returns>
            <search>parameter,shared,add,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.Purge(Revit.Application.Document)">
            <summary>
            Purge shared parameter(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>parameter,shared,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.File">
            <summary>
            Get the shared parameter file as string.
            </summary>
            <returns name="file">The shared parameter file.</returns>
            <search>parameter,shared,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.ByFile(System.String)">
            <summary>
            Get all shared parameter by file.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="ParameterType">List of types.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
            <search>parameter,shared,file</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.SetFile(System.String)">
            <summary>
            Set the shared parameter file.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="file">The shared parameter file.</returns>
            <search>parameter,shared,file,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByTypeAndGroupName(System.String)">
            <summary>
            Get shared parameter by file, grouped by parameter type and group name.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="ParameterType">List of types.</returns>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
            <search>parameter,shared,group,name,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByGroupNameAndType(System.String)">
            <summary>
            Get shared parameter by file, grouped by group name and parameter type.
            </summary>
            <param name="file">The shared parameter file, incl. path.</param>
            <returns name="GroupName">List of group names.</returns>
            <returns name="ParameterType">List of types.</returns>
            <returns name="ParameterName">List of parameters.</returns>
            <returns name="Definition">List of definitions.</returns>
            <returns name="Guid">List of guids.</returns>
            <search>parameter,shared,group,name,type</search>
        </member>
        <member name="M:Orchid.RevitProject.ProjectServices.VerifyIsNotArea(Autodesk.Revit.DB.SpatialElement)">
            <summary>
            Verify that the spatial element is a not an area!
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:Orchid.RevitProject.Schedules.Schedule.InDocument">
            <summary>
            Get all schedules.
            </summary>
            <returns name="View">All schedule views.</returns>
            <search>schedule,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.OnSheet(Revit.Elements.Element)">
            <summary>
            Verify if schedule is on a sheet.
            </summary>
            <param name="schedule">Schedule instance on sheet.</param>
            <returns name="boolean">Whether schedule is on a sheet.</returns>
            <search>schedule,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.RotateOnSheet(Revit.Elements.Element,System.String)">
            <summary>
            Rotate schedule on sheet (Clockwise/Counterclockwise).
            </summary>
            <param name="schedule">Schedule instance on sheet.</param>
            <param name="rotation">Rotation as string value.</param>
            <returns name="Schedule">Schedule instance on sheet.</returns>
            <search>schedule,sheet,rotate</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.LocationOnSheet(Revit.Elements.Element)">
            <summary>
            Location of schedule on sheet as xyz point.
            </summary>
            <param name="schedule">Schedule instance on sheet.</param>
            <returns name="Location">XYZ as Dynamo point.</returns>
            <search>schedule,sheet,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.Data(Revit.Elements.Views.ScheduleView,Orchid.Common.Global.Culture)">
            <summary>
            Get schedule view, data is being returned as set in the schedule.
            Return value as integer, double, and/or string according to the culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            </summary>
            <param name="scheduleView">Schedule.</param>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <returns name="Data">All Date in the schedule as a list.</returns>
            <search>schedule,data,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.Data(Revit.Elements.Views.ScheduleView,Orchid.Common.Global.Culture,System.Double)">
            <summary>
            Get schedule view, data is being returned without unit symbols.
            Return value as integer, double and/or string according to the culture.
            Note: Default culture (none provided) is the Revit culture if Dynamo is used
            with Revit, and Windows system default culture if Dynamo sandbox is used!
            </summary>
            <param name="scheduleView">Schedule.</param>
            <param name="culture">Culture as Orchid type. Default value, see summary note!</param>
            <param name="accuracy">Accuracy for numeric values.</param>
            <returns name="Data">All data in the schedule as a list.</returns>
            <search>schedule,data,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.Schedule.SortingGrouping(Revit.Elements.Views.ScheduleView,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Enum},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Boolean},System.Object,System.String,System.Boolean)">
            <summary>
            Add Sorting/Grouping to the schedule table by name.
            </summary>
            <param name="scheduleView">Schedule.</param>
            <param name="name">Name of the ScheduleField to use for sorting/grouping.</param>
            <param name="sortOrder">Schedule sort order as Revit enumeration type.</param>
            <param name="header">Add header to the table?</param>
            <param name="footer">Schedule footer as Orchid enumeration type.</param>
            <param name="blankLine">Add blank line to the section?</param>
            <param name="grandTotals">GrandTotals (schedule footer) as Orchid enumeration type.</param>
            <param name="customTitle">Custom title for grand totals.</param>
            <param name="itemize">Add itemize every instance?</param>
            <returns name="ScheduleView">Schedule.</returns>
            <search>schedule,sort,group</search>
        </member>
        <member name="T:Orchid.RevitProject.Schedules.AlterSchedulableField">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.SchedulableField.ByName(System.Collections.Generic.List{Revit.Schedules.SchedulableField},System.String)">
            <summary>
            Get SchedulableField by name (parameter name).
            </summary>
            <param name="schedulableField">List of SchedulableField.</param>
            <param name="name">Name of the parameter to use as the SchedulableField.</param>
            <returns name="SchedulableField">SchedulableField.</returns>
            <search>schedule,field,name</search>
        </member>
        <member name="T:Orchid.RevitProject.Schedules.AlterScheduleField">
            <summary>
            Alternate between Revit API and Dynamo API type
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.ScheduleField.GetSetField(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ScheduleField,System.Double)">
            <summary>
            Check if ScheduleField is undefined using UnitType (to Revit 2020) or ForgeTypeId (after Revit 2020).
            </summary>
            <param name="document"></param>
            <param name="field">ScheduleField.</param>
            <param name="accuracy"></param>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.ScheduleField.ByName(System.Collections.Generic.List{Revit.Schedules.ScheduleField},System.String)">
            Appearance
            FieldFormat
            ConditionalFormat
            CalculatedParameter
            CombineParameter
            <summary>
            Get ScheduleField by name.
            </summary>
            <param name="scheduleField">List of ScheduleField.</param>
            <param name="name">Name of the ScheduleField.</param>
            <returns name="ScheduleField">ScheduleField.</returns>
            <search>schedule,field,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.ScheduleField.Field(Revit.Elements.Views.ScheduleView,Revit.Schedules.SchedulableField)">
            <summary>
            Get ScheduleField.
            </summary>
            <param name="scheduleView">Schedule.</param>
            <param name="schedulableField">SchedulableField.</param>
            <returns name="ScheduleField">ScheduleField.</returns>
            <search>schedule,field</search>
        </member>
        <member name="M:Orchid.RevitProject.Schedules.ScheduleField.Format(Revit.Schedules.ScheduleField,System.String,System.Enum,System.Enum,System.Boolean,System.Enum,System.Double)">
            <summary>
            Set field Formatting.
            </summary>
            <param name="scheduleField">ScheduleField to format.</param>
            <param name="columnHeading">Column title for the field.</param>
            <param name="headingOrientation">Heading orientation as Revit enumeration type.</param>
            <param name="horizontalAlignment">Horizontal alignment as Revit enumeration type.</param>
            <param name="hidden">Hide field?</param>
            <param name="calculate">Calculate field values (if calculable) as Revit enumeration type.</param>
            <param name="columnWidth">Set the column width for the field.</param>
            <returns name="ScheduleField">ScheduleField.</returns>
            <search>schedule,format</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.ToString">
            <summary>
            Wrapped string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.MEPSystem(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get MEP System by connector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="System">The system.</returns>
            <returns name="Type">The type of the system type as string value.</returns>
            <search>system,connect,mep,system</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.MEPSystemType(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get MEP system type by connector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="SystemType">The system type.</returns>
            <search>system,connect,mep,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.ByMEPSystem(System.Collections.Generic.List{Orchid.RevitProject.Systems.Connector},Revit.Elements.Element)">
            <summary>
            Get connector by MEP system.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <param name="system">MEP system.</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <search>system,connect,mep,system</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Host(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get connector vector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Element">Element.</returns>
            <search>system,connect,host</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.IsPrimary(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Verify if the connector is primary.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="boolean">Boolean value, true if primary.</returns>
            <search>system,connect,primary</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Direction(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get connector direction as string.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Direction">Connector direction.</returns>
            <search>system,connect,direction</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Location(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get connector location point.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Point">Point (location).</returns>
            <search>system,connect,location</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Vector(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get connector vector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Vector">Vector.</returns>
            <search>system,connect,vector</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Shape(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get connector shape and its dimension.
            If Shape is rectangular or oval, is height the first 
            dimension and width the latter. 
            If shape is circular is it the radius dimension.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Shape">Shape as string.</returns>
            <returns name="Dimension">Shape dimension.</returns>
            <search>system,connect,shape</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.IsConnected(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Verify if the connector has any connection.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="boolean">Boolean value if connector has any connection.</returns>
            <search>system,connect</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Connector.Connection(Orchid.RevitProject.Systems.Connector)">
            <summary>
            Get the connector connected to a given connector.
            </summary>
            <param name="connector">Connector as Orchid type.</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <search>system,connect</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.InDocument">
            <summary>
            Get all electrical system(s) in document.
            </summary>
            <returns name="ElectricalSystem">The electrical system(s).</returns>
            <search>electrical,system,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.ByPanel(Revit.Elements.Element)">
            <summary>
            Get the electrical system(s) by panel.
            </summary>
            <param name="familyInstance">Panel.</param>
            <returns name="ElectricalSystem">The electrical system(s).</returns>
            <search>electrical,system,panel</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.PanelByView(Revit.Elements.Views.View)">
            <summary>
            Get panel from panel schedule View
            </summary>
            <param name="view">View.</param>
            <returns name="Panel">Panel.</returns>
            <search>electrical,system,panel,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.ByType(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String)">
            <summary>
            Filter electrical system(s) by system type.
            </summary>
            <param name="electricalSystem">Electrical system(s).</param>
            <param name="type">ElectricalSystemType for the electrical system.</param>
            <returns name="ElectricalSystem">The electrical system(s).</returns>
            <search>electrical,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Create(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Create electrical system by components.
            </summary>
            <param name="components">Components in the electrical system.</param>
            <param name="type">ElectricalSystemType for the electrical system.</param>
            <returns name="ElectricalSystem">The electrical system.</returns>
            <search>electrical,system,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.AddPanel(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Add panel to the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="panel">Electrical panel for the electrical system.</param>
            <returns name="ElectricalSystem">The electrical system.</returns>
            <search>electrical,system,panel</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Component(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get components (FamilyInstance) in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>electrical,system,family,instance,component</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Accessory(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get accessory components (FamilyInstance) in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Terminal.</returns>
            <search>electrical,system,family,instance,accessory</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Equipment(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get equipment components (FamilyInstance) in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Equipment.</returns>
            <search>electrical,system,family,instance,equipment</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.LightingDevice(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get lighting devices (FamilyInstance) in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Equipment.</returns>
            <search>electrical,system,family,instance,lighting,device</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.LightingFixture(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get lighting fixtures (FamilyInstance) in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Equipment.</returns>
            <search>electrical,system,family,instance,lighting,fixture</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.Panel(Revit.Elements.Element)">
            <summary>
            Get the panel of the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <returns name="FamilyInstance">Panel.</returns>
            <search>electrical,system,family,instance,panel</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Electrical.ByPartType(Revit.Elements.Element,System.String)">
            <summary>
            Get component (FamilyInstance) by part type in the electrical system.
            </summary>
            <param name="electricalSystem">Electrical system.</param>
            <param name="partType">MEP part type as string.</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>electrical,system,family,instance,part,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.Connector(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get connector by element.
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <search>system,element,connect</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.MEPSystem(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get MEP system and the type of the system by element.
            </summary>
            <param name="element">Element.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="System">MEP system.</returns>
            <returns name="Classification">The classification of the System as string value.</returns>
            <search>system,element,mep,system</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Element.MEPSystemType(Revit.Elements.Element)">
            <summary>
            Get MEP system type by element.
            </summary>
            <param name="element">Element.</param>
            <returns name="SystemType">MEP system type.</returns>
            <search>system,element,mep,system</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.Connector(Revit.Elements.FamilyInstance,System.Boolean)">
            <summary>
            Get connector by family instance.
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Connector">Connector as Orchid type.</returns>
            <search>family,instance,connect</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.MEPSystem(Revit.Elements.FamilyInstance,System.Boolean)">
            <summary>
            Get MEP System and the type of the System by family instance.
            Note: Does not take electrical elements!
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="System">MEP system.</returns>
            <returns name="Classification">The classification of the System as string value.</returns>
            <search>family,instance,mep,system</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.MEPSystemType(Revit.Elements.FamilyInstance,System.Boolean)">
            <summary>
            Get MEP SystemType by family instance.
            Note: Does not take electrical elements!
            </summary>
            <param name="familyInstance">Family instance.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="SystemType">MEP SystemType.</returns>
            <search>family,instance,mep,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.FamilyInstance.ByPartType(System.String)">
            <summary>
            Get component (FamilyInstance) by part type in current document.
            </summary>
            <param name="partType">MEP part type as string.</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>family,instance,part,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.InDocument">
            <summary>
            Get all piping system(s) in document.
            </summary>
            <returns name="PipingSystem">The piping system(s).</returns>
            <search>mechanical,system,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.ByType(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String)">
            <summary>
            Filter mechanical system(s) by system type.
            </summary>
            <param name="mechanicalSystem">Mechanical system(s).</param>
            <param name="type">DuctSystemType for the mechanical system.</param>
            <returns name="MechanicalSystem">The mechanical system(s).</returns>
            <search>mechanical,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Create(Orchid.RevitProject.Systems.Connector,System.Collections.Generic.List{Orchid.RevitProject.Systems.Connector},System.String)">
            <summary>
            Create mechanical system by connectors.
            </summary>
            <param name="baseConnector">Base connector for the mechanical system.</param>
            <param name="connectors">Remaining connectors in the mechanical system.</param>
            <param name="type">DuctSystemType for the mechanical system.</param>
            <returns name="MechanicalSystem">The mechanical system.</returns>
            <search>mechanical,system,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate a mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="systemName">Optional system name as string value.</param>
            <returns name="MechanicalSystem">The mechanical system.</returns>
            <search>mechanical,system,duplicate,copy</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Component(Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Get components (FamilyInstance) in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="include">Include handling unit in list?</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>mechanical,system,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Fitting(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get fittings (FamilyInstance) in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Fitting.</returns>
            <search>mechanical,system,family,instance,fitting</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Accessory(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get accessory components (FamilyInstance) in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Terminal.</returns>
            <search>mechanical,system,family,instance,accessory</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Terminal(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get terminal components (FamilyInstance) in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Terminal.</returns>
            <search>mechanical,system,family,instance,terminal</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Equipment(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get equipment components (FamilyInstance) in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Equipment.</returns>
            <search>mechanical,system,family,instance,equipment</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.HandlingUnit(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get handling unit (FamilyInstance) in the mechanical system.
            Characteristics of a mechanical handling unit are, that it has more
            than one direction and at least two connectors in the unit.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Handling unit.</returns>
            <search>mechanical,system,family,instance,handling,unit</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.ByPartType(Revit.Elements.Element,System.String)">
            <summary>
            Get component (FamilyInstance) by part type in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="partType">MEP part type as string.</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>mechanical,system,family,instance,part,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Network(Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Get network elements in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="insulation">Include insulation elements?</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element(s).</returns>
            <search>mechanical,system,network</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.Duct(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get ducts in the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Component(s).</returns>
            <search>mechanical,system,duct</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.SystemTree(Revit.Elements.Element,Revit.Elements.Element,System.Boolean)">
            <summary>
            Create system tree, by traversing the mechanical system.
            </summary>
            <param name="mechanicalSystem">Mechanical system.</param>
            <param name="handlingUnit">Handling unit.</param>
            <param name="export">Export system tree to xml file?</param>
            <returns name="SystemTree">System tree as Orchid type.</returns>
            <search>mechanical,system,tree</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.ToList(Orchid.RevitProject.Systems.SystemTree)">
            <summary>
            Convert system tree to dynamo type (list of elements).
            </summary>
            <param name="systemTree">System tree as Orchid type.</param>
            <returns name="Element">Element(s).</returns>
            <search>mechanical,system,list</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.SystemBranch(Orchid.RevitProject.Systems.SystemTree,Revit.Elements.Element)">
            <summary>
            Get branch with all its components from the system tree,
            retrieved from the given end node to the root of the tree.
            </summary>
            <param name="systemTree">System tree as Orchid type.</param>
            <param name="endNode">Element handling unit.</param>
            <returns name="Element">Branch element from the system tree.</returns>
            <search>mechanical,system,branch</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Mechanical.BranchElement(Orchid.RevitProject.Systems.SystemTree,Revit.Elements.Element)">
            <summary>
            Get branch elements (excl. ducts and fittings) from the system tree,
            retrieved from the given end node to the root of the tree.
            </summary>
            <param name="systemTree">System tree as Orchid type.</param>
            <param name="endNode">Element handling unit.</param>
            <returns name="Element">Branch element from the system tree.</returns>
            <search>mechanical,system,branch</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.InDocument">
            <summary>
            Get all MEP system(s) in document.
            </summary>
            <returns name="System">MEP system.</returns>
            <search>mep,system,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.ByName(System.String)">
            <summary>
            Get MEP system by name in document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="System">MEP system.</returns>
            <search>mep,system,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.ByDiscipline(System.String)">
            <summary>
            Get MEP system(s) by discipline in document
            (Mechanical, Piping, and/or Electrical).
            </summary>
            <param name="discipline">Discipline as string value.</param>
            <returns name="System">MEP system.</returns>
            <search>mep,system,discipline</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.Class(Revit.Elements.Element)">
            <summary>
            Get the classification of the MEP system.
            </summary>
            <param name="system">MEP system.</param>
            <returns name="Class">The classification of the system as string value.</returns>
            <search>mep,system,class</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.IsWellConnected(Revit.Elements.Element)">
            <summary>
            Verify the status of the network in the MEP system.
            </summary>
            <param name="system">MEP system.</param>
            <returns name="boolean">Return value for status of the network in the MEP system.</returns>
            <search>mep,system,connect,network</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.Mechanical(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter MEP system(s) returning mechanical system(s).
            </summary>
            <param name="system">MEP system(s).</param>
            <returns name="MechanicalSystem">Mechanical system(s).</returns>
            <search>mep,system,mechanical</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.Piping(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter MEP system(s) returning piping system(s).
            </summary>
            <param name="system">MEP system(s).</param>
            <returns name="PipingSystem">Piping system(s).</returns>
            <search>mep,system,pipe</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystem.Electrical(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter MEP system(s) returning electrical system(s).
            </summary>
            <param name="system">MEP system(s).</param>
            <returns name="ElectricalSystem">Electrical system(s).</returns>
            <search>mep,system,electrical</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystemType.InDocument">
            <summary>
            Get all SystemType in document.
            </summary>
            <returns name="SystemType">MEP System type.</returns>
            <search>mep,system,type,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.MEPSystemType.ByName(System.String)">
            <summary>
            Get SystemType by name in document.
            </summary>
            <param name="name">Name as string value.</param>
            <returns name="SystemType">MEP System type.</returns>
            <search>mep,system,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.CableTray.ByLine(Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create CableTray by line.
            </summary>
            <param name="cableTrayType">CableTray type as Dynamo type.</param>
            <param name="level">Level as Dynamo type.</param>
            <param name="line">Line as Dynamo type.</param>
            <returns name="CableTray">CableTray as Dynamo type.</returns>
            <search>cable,tray,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.CableTray.Dimension(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set CableTray dimension.
            </summary>
            <param name="cableTray">CableTray as Dynamo type.</param>
            <param name="height">Height as a double value.</param>
            <param name="width">Witdh as a double value.</param>
            <returns name="CableTray">CableTray as Dynamo type.</returns>
            <search>cable,tray,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Conduit.ByLine(Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create Conduit by line.
            </summary>
            <param name="conduitType">Conduit type as Dynamo type.</param>
            <param name="level">Level as Dynamo type.</param>
            <param name="line">Line as Dynamo type.</param>
            <returns name="Conduit">Conduit as Dynamo type.</returns>
            <search>conduit,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Conduit.Dimension(Revit.Elements.Element,System.Double)">
            <summary>
            Set Conduit dimension.
            </summary>
            <param name="conduit">Conduit as Dynamo type.</param>
            <param name="diameter">Diameter as a double value</param>
            <returns name="Conduit">Conduit as Dynamo type.</returns>
            <search>conduit,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Duct.ByLine(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create Duct by line.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <param name="ductType">Duct type as Dynamo type.</param>
            <param name="level">Level as Dynamo type.</param>
            <param name="line">Line as Dynamo type.</param>
            <returns name="Duct">Duct as Dynamo type.</returns>
            <search>duct,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Duct.SetSystemType(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
            Set element system type.
            </summary>
            <param name="element">Element.</param>
            <param name="systemType">MEP System type.</param>
            <returns name="Element">Element.</returns>
            <search>duct,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Duct.DuctType(Revit.Elements.Element)">
            <summary>
            Get the duct type of the duct.
            </summary>
            <param name="duct">Duct as Dynamo type.</param>
            <returns name="DuctType">Duct type as Dynamo type.</returns>
            <search>duct,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Duct.Dimension(Revit.Elements.Element,System.Double)">
            <summary>
            Set Duct dimension, applies to round a duct.
            </summary>
            <param name="duct">Duct as Dynamo type.</param>
            <param name="diameter">Diameter as a double value.</param>
            <returns name="Duct">Duct as Dynamo type.</returns>
            <search>duct,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Duct.Dimension(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set Duct dimension, applies to rectangular and oval ducts.
            </summary>
            <param name="duct">Duct as Dynamo type.</param>
            <param name="height">Height as a double value.</param>
            <param name="width">Witdh as a double value.</param>
            <returns name="Duct">Duct as Dynamo type.</returns>
            <search>duct,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Pipe.ByLine(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create Pipe by line.
            </summary>
            <param name="mechanicalSystem">MechanicalSystem as Dynamo type.</param>
            <param name="ductType">CableTray type as Dynamo type.</param>
            <param name="level">Level as Dynamo type.</param>
            <param name="line">Line as Dynamo type.</param>
            <returns name="Pipe">Pipe as Dynamo type.</returns>
            <search>pipe,line</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Pipe.SetSystemType(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
            Set pipe element system type.
            </summary>
            <param name="element">Element.</param>
            <param name="systemType">Piping System type.</param>
            <returns name="Element">Element.</returns>
            <search>pipe,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Pipe.Dimension(Revit.Elements.Element,System.Double)">
            <summary>
            Set Pipe dimension, applies to round a pipe.
            </summary>
            <param name="pipe">Pipe as Dynamo type.</param>
            <param name="diameter">Diameter as a double value.</param>
            <returns name="Pipe">Pipe as Dynamo type.</returns>
            <search>pipe,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Networks.Pipe.Dimension(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set Pipe dimension, applies to rectangular and oval ducts.
            </summary>
            <param name="pipe">Pipe as Dynamo type.</param>
            <param name="height">Height as a double value.</param>
            <param name="width">Witdh as a double value.</param>
            <returns name="Pipe">Pipe as Dynamo type.</returns>
            <search>pipe,dimension</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.InDocument">
            <summary>
            Get all piping system(s) in document.
            </summary>
            <returns name="PipingSystem">The piping system(s).</returns>
            <search>pipe,system,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.ByType(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String)">
            <summary>
            Filter piping system(s) by system type.
            </summary>
            <param name="pipingSystem">Piping system(s).</param>
            <param name="type">PipingSystemType for the piping system.</param>
            <returns name="PipingSystem">The piping system(s).</returns>
            <search>pipe,system,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Create(Orchid.RevitProject.Systems.Connector,System.Collections.Generic.List{Orchid.RevitProject.Systems.Connector},System.String)">
            <summary>
            Create piping system by connectors.
            </summary>
            <param name="baseConnector">Base connector for the piping system.</param>
            <param name="connectors">Remaining connectors in the piping system.</param>
            <param name="type">PipingSystemType for the piping system.</param>
            <returns name="PipingSystem">The piping System.</returns>
            <search>pipe,system,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate a piping system.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="systemName">Optional system name as string value.</param>
            <returns name="PipingSystem">The piping system.</returns>
            <search>pipe,duplicate,copy</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Component(Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Get components (FamilyInstance) in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="include">Include handling unit in list?</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>pipe,component,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Fitting(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get fittings (FamilyInstance) in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Fitting.</returns>
            <search>pipe,component,fitting,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Accessory(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get accessory components (FamilyInstance) in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Terminal.</returns>
            <search>pipe,component,accessory,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Equipment(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get equipment components (FamilyInstance) in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Equipment.</returns>
            <search>pipe,component,equipment,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.HandlingUnit(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get handling unit (FamilyInstance) in the PipingSystem.
            Characteristics of a piping handling unit are, that it has more
            than one direction and at least four connectors in the unit.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="FamilyInstance">Handling unit.</returns>
            <search>pipe,handling,unit,family,instance</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.ByPartType(Revit.Elements.Element,System.String)">
            <summary>
            Get component (FamilyInstance) by part type in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="partType">MEP part type as string.</param>
            <returns name="FamilyInstance">Component.</returns>
            <search>pipe,part,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Network(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get network elements in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element(s).</returns>
            <search>pipe,network</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.Piping.Pipe(Revit.Elements.Element,System.Boolean)">
            <summary>
            Get pipes in the PipingSystem.
            </summary>
            <param name="pipingSystem">Piping system.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Element">Element(s).</returns>
            <search>pipe,</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.PipingType.Fluid(Revit.Elements.Element)">
            <summary>
            Get fluid for the system type.
            </summary>
            <param name="systemType">Piping system type.</param>
            <returns name="Fluid">Fluid.</returns>
            <search>pipe,type,fluid</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.PipingType.SetFluid(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set fluid for the system type.
            </summary>
            <param name="systemType">Piping system type.</param>
            <param name="fluid">Fluid.</param>
            <returns name ="SystemType">Piping system.</returns>
            <search>pipe,type,fluid</search>
        </member>
        <member name="T:Orchid.RevitProject.Systems.TreeNode">
            <summary>
            A TreeNode object represents an element in the system
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_Id">
            <summary>
            Id of the element
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_direction">
            <summary>
            Flow direction of the node
            For the starting element of the traversal, the direction will be the same as the connector
            connected to its following element; Otherwise it will be the direction of the connector connected to
            its previous element
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_parent">
            <summary>
            The parent node of the current node.
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_inputConnector">
            <summary>
            The connector of the previous element to which current element is connected
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_childNodes">
            <summary>
            The first-level child nodes of the current node
            </summary>
        </member>
        <member name="F:Orchid.RevitProject.Systems.TreeNode.m_document">
            <summary>
            Active document of Revit
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Systems.TreeNode.Id">
            <summary>
            Id of the element
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Systems.TreeNode.Direction">
            <summary>
            Flow direction of the node
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Systems.TreeNode.Parent">
            <summary>
            Gets and sets the parent node of the current node.
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Systems.TreeNode.ChildNodes">
            <summary>
            Gets and sets the first-level child nodes of the current node
            </summary>
        </member>
        <member name="P:Orchid.RevitProject.Systems.TreeNode.InputConnector">
            <summary>
            The connector of the previous element to which current element is connected
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.TreeNode.#ctor(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
            Constructor
            </summary>
            <param name="doc">Revit document</param>
            <param name="id">Element's Id</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.TreeNode.FindNode(Orchid.RevitProject.Systems.TreeNode,Autodesk.Revit.DB.ElementId)">
            <summary>
            
            </summary>
            <param name="elementNode"></param>
            <param name="id"></param>
            <returns></returns>
            <search>system,tree,find,node</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.TreeNode.Ancestors">
            <summary>
            
            </summary>
            <returns></returns>
            <search>system,tree,ancestor</search>
        </member>
        <member name="M:Orchid.RevitProject.Systems.TreeNode.GetElementById(Autodesk.Revit.DB.ElementId)">
            <summary>
            Get Element by its Id
            </summary>
            <param name="eid">Element's Id</param>
            <returns>Element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.TreeNode.DumpIntoXML(System.Xml.XmlWriter)">
            <summary>
            Dump the node into XML file
            </summary>
            <param name="writer">XmlWriter object</param>
        </member>
        <member name="T:Orchid.RevitProject.Systems.SystemTree">
            <summary>
            Data structure of the traversal
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.ToString">
            <summary>
            FilterRule string override.
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.#ctor(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.MEPSystem,Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Constructor
            </summary>
            <param name="activeDocument">Revit document</param>
            <param name="system">The MEP system to traverse</param>
            <param name="handlingUnit"></param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.Traverse">
            <summary>
            Traverse the system
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.Traverse(Orchid.RevitProject.Systems.TreeNode)">
            <summary>
            Traverse the system recursively by analyzing each element
            </summary>
            <param name="elementNode">The element to be analyzed</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetAllNodes(Orchid.RevitProject.Systems.TreeNode)">
            <summary>
            Traverse the system recursively to get all nodes
            </summary>
            <param name="elementNode">The element to be analyzed</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetAllComponents(Orchid.RevitProject.Systems.TreeNode)">
            <summary>
            Traverse the system recursively to get all nodes
            </summary>
            <param name="elementNode">The element to be analyzed</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetAllNodes">
            <summary>
            Get all nodes in TreeNode
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetAllComponents">
            <summary>
            Get all nodes in TreeNode
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetStartingElementNode">
            <summary>
            Get the starting element node.
            If the system has base equipment then get it;
            Otherwise get the owner of the open connector in the system
            </summary>
            <returns>The starting element node</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.AppendChildren(Orchid.RevitProject.Systems.TreeNode)">
            <summary>
            Find all child nodes of the specified element node
            </summary>
            <param name="elementNode">The specified element node to be analyzed</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetConnectedConnector(Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Element)">
            <summary>
            Get the connected connector of one connector
            </summary>
            <param name="connector">The connector to be analyzed</param>
            <returns>The connected connector</returns>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.GetElementById(Autodesk.Revit.DB.ElementId)">
            <summary>
            Get element by its id
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.DumpIntoXML(System.String)">
            <summary>
            Dump the traversal into an XML file
            </summary>
            <param name="fileName">Name of the XML file</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.WriteBasicInfo(System.Xml.XmlWriter)">
            <summary>
            Write basic information of the MEP system into the XML file
            </summary>
            <param name="writer">XMLWriter object</param>
        </member>
        <member name="M:Orchid.RevitProject.Systems.SystemTree.WritePaths(System.Xml.XmlWriter)">
            <summary>
            Write paths of the traversal into the XML file
            </summary>
            <param name="writer">XMLWriter object</param>
        </member>
        <member name="M:Orchid.RevitProject.Views.Legend.InDocument(System.Boolean)">
            <summary>
            All model view in current document. Ordered by type and name.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>legend,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Legend.InDocument(Revit.Application.Document,System.Boolean)">
            <summary>
            All model view in document. Ordered by type and name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>legend,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Legend.OnSheet(Revit.Elements.Views.View)">
            <summary>
            Get view(s) by sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <returns name="View">View.</returns>
            <search>legend,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.Create(Revit.Application.Document,Revit.Elements.Views.View)">
            <summary>
            Create a sheet by sheet type.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="sheetType">Sheet Type.</param>
            <returns name="Sheet">Sheet view.</returns>
            <search>sheet,placeholder,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.CreatePlaceholder(Revit.Application.Document)">
            <summary>
            Create a placeholder sheet.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="Sheet">Sheet view.</returns>
            <search>sheet,placeholder,create</search>
        </member>
        <member name="P:Orchid.RevitProject.Views.Sheet.InDocument">
            <summary>
            Get all views on sheets.
            </summary>
            <returns name="Sheet">All sheet views.</returns>
            <search>sheet,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.IsPlaceholder(Revit.Elements.Views.View)">
            <summary>
            Verify if sheet is a placeholder sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <returns name="boolean">Whether the sheet is a placeholder sheet or not!</returns>
            <search>sheet,placeholder</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.Content(Revit.Elements.Views.View)">
            <summary>
            Get content (view/schedule) on sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <returns name="View">View.</returns>
            <search>sheet,content</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.ByNameAndNumber(System.String,System.String)">
            <summary>
            Get sheet by name and number.
            </summary>
            <param name="number">Number as string value.</param>
            <param name="name">Name as string value.</param>
            <returns name="Sheet">Sheet.</returns>
            <search>sheet,name,number</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.Associated(Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get associated view and viewport for the view.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <returns name="Viewport">Viewport.</returns>
            <search>sheet,place,view,associat,viewport</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.RemoveViewPort(Revit.Elements.Views.View,Revit.Elements.Element)">
            <summary>
            Get associated view and viewport for the view.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name = "viewport">Viewport.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>sheet,viewport,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.Purge(Revit.Application.Document,System.Boolean)">
            <summary>
            Purge unused sheet(s) in document. 
            Note. Starting view will not be purged, even if it is unused!
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="placeholder">Purge should include placeholder sheet(s)!</param>
            <returns name="watch">Add a watch node!</returns>
            <search>sheet,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.View(Revit.Elements.Views.View)">
            <summary>
            Get view(s) on sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <returns name="View">View.</returns>
            <search>view,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.Schedule(Revit.Elements.Views.View)">
            <summary>
            Get schedule(s) by sheet.
            </summary>
            <param name="sheet">Sheet.</param>
            <returns name="Schedule">Schedule.</returns>
            <search>schedule,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.AddView(Revit.Elements.Views.View,Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Add view on sheet by location.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name="view">View.</param>
            <param name="location">XYZ as Dynamo point.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>sheet,add,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Sheet.AddSchedule(Revit.Elements.Views.View,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Add schedule on sheet by location.
            </summary>
            <param name="sheet">Sheet.</param>
            <param name="schedule">Schedule.</param>
            <param name="location">XYZ as Dynamo point.</param>
            <returns name="watch">Add a watch node to verify the output.</returns>
            <search>sheet,add</search>
        </member>
        <member name="P:Orchid.RevitProject.Views.SheetSet.InDocument">
            <summary>
            All sheet set in current document.
            </summary>
            <returns name="ViewSheetSet">View sheet set.</returns>
            <search>sheet,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Create(System.Collections.Generic.List{Revit.Elements.Views.View},System.String)">
            <summary>
            Create sheet set.
            </summary>
            <param name="view">View.</param>
            <param name="name">Name for the view sheet set.</param>
            <returns name="ViewSheetSet">View sheet set.</returns>
            <search>sheet,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Change(System.Collections.Generic.List{Revit.Elements.Views.View},System.Object)">
            <summary>
            Change sheet set.
            </summary>
            <param name="view">View.</param>
            <param name="viewSheetSet">View sheet set as string or Dynamo type.</param>
            <returns name="ViewSheetSet">View sheet set.</returns>
            <search>sheet,change</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Delete(System.Object)">
            <summary>
            Delete sheet set.
            </summary>
            <param name="viewSheetSet">View sheet set as string or Dynamo type.</param>
            <search>sheet,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.View(System.Object,System.Boolean)">
            <summary>
            Get View from sheet set.
            </summary>
            <param name="viewSheetSet">View sheet set as string or Dynamo type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>sheet,view</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Duplicate(Revit.Elements.Views.View,System.String,System.Enum)">
            <summary>
            Duplicate view.
            </summary>
            <param name="view">View.</param>
            <param name="name">Name for the duplicated view.</param>
            <param name="option">View duplicate option as string.</param>
            <returns name="View">View.</returns>
            <search>view,duplicate,copy</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.InDocument(System.Boolean)">
            <summary>
            All view in current document. Ordered by type and name.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.InDocument(Revit.Application.Document,System.Boolean)">
            <summary>
            All view in document. Ordered by type and name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Model(System.Boolean)">
            <summary>
            All model view in current document. Ordered by type and name.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,model,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Model(Revit.Application.Document,System.Boolean)">
            <summary>
            All model view in document. Ordered by type and name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,model,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Plan(System.Boolean)">
            <summary>
            All plan view in current document. Ordered by type and name.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,plan</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Plan(Revit.Application.Document,System.Boolean)">
            <summary>
            All plan view in document. Ordered by type and name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,plan</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ThreeD(System.Boolean)">
            <summary>
            All threeD (3D) view in current document. Ordered by type and name.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,threeD,3D</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ThreeD(Revit.Application.Document,System.Boolean)">
            <summary>
            All threeD (3D) view in document. Ordered by type and name.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,threeD,3D</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByName(System.String,System.Boolean)">
            <summary>
            View by name in current document.
            </summary>
            <param name="name">Name of the View.</param>
            <param name="isSheet">Include view that are sheet view?</param>
            <returns name="View">View.</returns>
            <search>view,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByName(Revit.Application.Document,System.String,System.Boolean)">
            <summary>
            View by name in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="name">Name of the View.</param>
            <param name="isSheet">Include view that are sheet view?</param>
            <returns name="View">View.</returns>
            <search>view,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByViewFamilyType(Revit.Elements.Element,System.Boolean)">
            <summary>
            All view by ViewFamilyType.
            </summary>
            <param name="viewFamilyType">ViewFamilyType.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,family,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByViewType(System.Enum,System.Boolean)">
            <summary>
            All view by ViewType in current document.
            </summary>
            <param name="viewType">ViewType as enumeration type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByViewType(Revit.Application.Document,System.Enum,System.Boolean)">
            <summary>
            All view by ViewType in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="viewType">ViewType as enumeration type.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="View">View.</returns>
            <search>view,type</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ViewType(Revit.Elements.Views.View)">
            <summary>
            Get view type for the view.
            </summary>
            <param name="view">View.</param>
            <returns name="ViewType">ViewType as enumeration value.</returns>
            <search>view,associat,level</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.AssociatedLevel(Revit.Elements.Views.View)">
            <summary>
            Get associated level for the plan view.
            </summary>
            <param name="view">Plan view.</param>
            <returns name="Level">Level.</returns>
            <search>view,associat,level</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Associated(Revit.Elements.Views.View)">
            <summary>
            Get associated viewport and sheet for the view.
            </summary>
            <param name="view">View.</param>
            <returns name="Viewport">Viewport.</returns>
            <returns name="Sheet">Sheet.</returns>
            <search>view,associat,viewport,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.IsPrimary(Revit.Elements.Views.View)">
            <summary>
            Verify if view is a primary view.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether all items are true.</returns>
            <search>view,primary</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Primary(Revit.Elements.Views.View)">
            <summary>
            Get the primary view of the view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View.</returns>
            <search>view,primary</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HasDependent(Revit.Elements.Views.View)">
            <summary>
            Verify if view has any dependent view.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether all items are true.</returns>
            <search>view,dependent</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Dependent(Revit.Elements.Views.View)">
            <summary>
            Get dependent view(s) of the view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View(s).</returns>
            <search>view,dependent</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.CalloutParent(Revit.Elements.Views.View)">
            <summary>
            Get the parent view of the callout (view).
            </summary>
            <param name="view">Callout view.</param>
            <returns name="View">View.</returns>
            <search>view,callout,parent</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveCalloutParent(Revit.Elements.Views.View)">
            <summary>
            Remove the parent view of the callout (view).
            </summary>
            <param name="view">Callout view.</param>
            <search>view,remove,callout,parent</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RestoreCalloutParent(Revit.Elements.Views.View)">
            <summary>
            Restore the parent view of the callout (view).
            </summary>
            <param name="view">Callout view.</param>
            <returns name="View">View.</returns>
            <search>view,restore,callout,parent</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HasViewTemplate(Revit.Elements.Views.View)">
            <summary>
            Verify if View is attached to a view template.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether all items are true.</returns>
            <search>view,template,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.OnSheet(Revit.Elements.Views.View)">
            <summary>
            Verify if View is on a sheet.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether view is on a sheet.</returns>
            <search>view,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.IsSheet(Revit.Elements.Views.View)">
            <summary>
            Verify if View is a sheet.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether view is a sheet.</returns>
            <search>view,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.IsShedule(Revit.Elements.Views.View)">
            <summary>
            Verify if View is a schedule.
            </summary>
            <param name="view">View.</param>
            <returns name="boolean">Whether view is a schedule.</returns>
            <search>view,schedule</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.AddFilter(Revit.Elements.Views.View,Revit.Filter.ParameterFilterElement,System.Boolean)">
            <summary>
            Add a filter to a View.
            </summary>
            <param name="view">View.</param>
            <param name="parameterFilter">Parameter filter.</param>
            <param name="visibility">Set visibility for the filter?</param>
            <returns name="View">View.</returns>
            <search>view,filter,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Phase(Revit.Elements.Views.View)">
            <summary>
            Get view phase.
            </summary>
            <param name="view">View.</param>
            <returns name="Phase">Phase.</returns>
            <search>view,phase</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetPhase(Revit.Elements.Views.View,Revit.Elements.Element)">
            <summary>
            Set view phase.
            </summary>
            <param name="view">View.</param>
            <param name="phase">Phase.</param>
            <returns name="View">View.</returns>
            <search>view,phase</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.CropBox(Revit.Elements.Views.View)">
            <summary>
            Get crop box.
            </summary>
            <param name="view">View.</param>
            <returns name="BoundingBox">BoundingBox.</returns>
            <returns name="Curve">Curve.</returns>
            <search>view,crop,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Set crop box by bounding box.
            </summary>
            <param name="view">View.</param>
            <param name="boundingBox">BoundingBox.</param>
            <returns name="View">View.</returns>
            <search>view,crop,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Views.View,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Set crop box by curve.
            </summary>
            <param name="view">View.</param>
            <param name="curve">Curves forming a cropbox shape.</param>
            <returns name="View">View.</returns>
            <search>view,crop,box,curve</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Move(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move view by point (translation).
            </summary>
            <param name="view">View.</param>
            <param name="point">Translation point.</param>
            <returns name="View">View.</returns>
            <search>view,move</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveCropBox(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move crop box (2D) by point (translation).
            </summary>
            <param name="view">View.</param>
            <param name="point">Translation point.</param>
            <returns name="View">View.</returns>
            <search>view,move,crop,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveSectionBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move section box (3D) by point (translation).
            </summary>
            <param name="view3D">View3D.</param>
            <param name="point">Translation point.</param>
            <returns name="View3D">View3D.</returns>
            <search>view,move,section,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Rotate(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Rotate view around point by Angle.
            </summary>
            <param name="view">View.</param>
            <param name="point">Rotate point.</param>
            <param name="angle">Angle.</param>
            <returns name="View">View.</returns>
            <search>view,rotate</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RotateCropBox(Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Rotate crop box (2D) around point by Angle.
            </summary>
            <param name="view">View.</param>
            <param name="point">Rotate point.</param>
            <param name="angle">Angle.</param>
            <returns name="View">View.</returns>
            <search>view,rotate,crop,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RotateSectionBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Rotate section box (3D) around point by Angle.
            </summary>
            <param name="view3D">View3D.</param>
            <param name="point">Rotate point.</param>
            <param name="angle">Angle.</param>
            <returns name="View3D">View3D.</returns>
            <search>view,rotate,section,box</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveCategoryOverrides(Revit.Application.Document)">
            <summary>
            Remove all category overrides in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>view,override,category,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveCategoryOverrides(Revit.Elements.Views.View)">
            <summary>
            Remove all category overrides in view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View.</returns>
            <search>view,override,category,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveCategoryOverrides(Revit.Elements.Views.View,Revit.Elements.Category)">
            <summary>
            Remove category override in view.
            </summary>
            <param name="view">View.</param>
            <param name="category">Category.</param>
            <returns name="View">View.</returns>
            <search>view,override,category,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HiddenCategory(Revit.Elements.Views.View)">
            <summary>
            Hide category in view.
            </summary>
            <param name="view">View.</param>
            <returns name="Category">Category.</returns>
            <search>view,hidden,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HideCategory(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Hide category in view.
            </summary>
            <param name="view">View.</param>
            <param name="category">Category.</param>
            <returns name="Category">Category.</returns>
            <search>view,hide,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.UnhideCategory(Revit.Elements.Views.View)">
            <summary>
            Unhide all category in view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View.</returns>
            <search>view,unhide,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.UnhideCategory(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Unhide category in view.
            </summary>
            <param name="view">View.</param>
            <param name="category">Category.</param>
            <returns name="Category">Category.</returns>
            <search>view,unhide,category</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveElementOverrides(Revit.Application.Document)">
            <summary>
            Remove all element overrides in document.
            </summary>
            <param name="document">Document (project or family).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>view,override,element,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveElementOverrides(Revit.Elements.Views.View)">
            <summary>
            Remove all element overrides in view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View.</returns>
            <search>view,override,element,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.RemoveElementOverrides(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Remove element override in view.
            </summary>
            <param name="view">View.</param>
            <param name="element">Element.</param>
            <returns name="View">View.</returns>
            <search>view,override,element,remove</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HiddenElement(Revit.Elements.Views.View)">
            <summary>
            Get hidden element in view.
            </summary>
            <param name="view">View.</param>
            <returns name="Element">Element.</returns>
            <search>view,hidden,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.HideElement(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Hide element in view.
            </summary>
            <param name="view">View.</param>
            <param name="element">Element.</param>
            <returns name="Element">Element.</returns>
            <search>view,hide,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.UnhideElement(Revit.Elements.Views.View)">
            <summary>
            Unhide all element in view.
            </summary>
            <param name="view">View.</param>
            <returns name="View">View.</returns>
            <search>view,unhide,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.UnhideElement(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Unhide element in view.
            </summary>
            <param name="view">View.</param>
            <param name="element">Element.</param>
            <returns name="Element">Element.</returns>
            <search>view,unhide,element</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.LinkVisibility(Revit.Elements.Views.View)">
            <summary>
            Get revit link visibility in view.
            </summary>
            <param name="view">View.</param>
            <returns name="Link">External link.</returns>
            <returns name="boolean">Whether link is visible.</returns>
            <search>view,link,visibility,visible</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.LinkVisibility(Revit.Elements.Views.View,Revit.Elements.Element)">
            <summary>
            Set link visibility in view.
            </summary>
            <param name="view">View.</param>
            <param name="link">External link.</param>
            <returns name="boolean">Whether link is visible.</returns>
            <search>view,link,visibility,visible</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetLinkVisibility(Revit.Elements.Views.View,Revit.Elements.Element,System.Boolean)">
            <summary>
            Set revit link visibility in view.
            </summary>
            <param name="view">View.</param>
            <param name="link">External link.</param>
            <param name="visible">Link visibility as boolean value.</param>
            <returns name="View">View.</returns>
            <search>view,link,visibility,visible</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.WorksetVisibility(Revit.Elements.Views.View)">
            <summary>
            Get all workset visibility in view.
            </summary>
            <param name="view">View.</param>
            <returns name="Workset">Workset as Orchid type.</returns>
            <returns name="Enum">Revit enumeration type.</returns>
            <search>view,workset,visibility</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.WorksetVisibility(Revit.Elements.Views.View,Orchid.RevitProject.Common.Workset)">
            <summary>
            Get workset visibility in view.
            </summary>
            <param name="view">View.</param>
            <param name="workset">Workset as Orchid type.</param>
            <returns name="Enum">Revit enumeration type.</returns>
            <search>view,workset,visibility</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetWorksetVisibility(Revit.Elements.Views.View,Orchid.RevitProject.Common.Workset,System.Enum)">
            <summary>
            Set workset visibility in view.
            </summary>
            <param name="view">View.</param>
            <param name="workset">Workset as Orchid type.</param>
            <param name="visibility">Visibility as enumeration type.</param>
            <returns name="View">View.</returns>
            <search>view,workset,visibility</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.CreateViewTemplate(Revit.Elements.Views.View,System.String)">
            <summary>
            Create view template from view.
            </summary>
            <param name="view">View.</param>
            <param name="name">Name for the new view template.</param>
            <returns name="ViewTemplate">View template.</returns>
            <search>view,template,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamily.InDocument">
            <summary>
            Get all ViewFamily (Autodesk.Revit) enumeration values.
            </summary>
            <returns name="Enum">ViewFamily as Revit enumeration type.</returns>
            <search>parameter,builtin,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamily.ByName(System.String)">
            <summary>
            Get ViewFamily (Autodesk.Revit) enumeration value by name.
            </summary>
            <param name="name">View name as string.</param>
            <returns name="Enum">ViewFamily as Revit enumeration type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamilyType.InDocument">
            <summary>
            Get view family type in current document.
            </summary>
            <returns name="ViewFamilyType">View family type.</returns>
            <returns name="Enum">ViewFamily as enumeration type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamilyType.InDocument(Revit.Application.Document)">
            <summary>
            Get view family type in current document.
            </summary>
            <returns name="ViewFamilyType">View family type.</returns>
            <returns name="Enum">ViewFamily as enumeration type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamilyType.ByType(System.Enum)">
            <summary>
            Get view family type by ViewFamily (Autodesk.Revit) enumeration value.
            </summary>
            <param name="viewFamily">ViewFamily as Revit enumeration type.</param>
            <returns name="ViewFamilyType">View family type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamilyType.ByName(System.String)">
            <summary>
            Get view family type by name.
            </summary>
            <param name="name">View name as string.</param>
            <returns name="ViewFamilyType">View family type.</returns>
            <returns name="Enum">ViewFamily as enumeration type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewFamilyType.ByName(System.String,System.Enum)">
            <summary>
            Get view family type by name and ViewFamily (Autodesk.Revit) enumeration value.
            </summary>
            <param name="name">View name as string.</param>
            <param name="viewFamily">ViewFamily as Revit enumeration type.</param>
            <returns name="ViewFamilyType">View family type.</returns>
            <search>view,family,type,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.InDocument(System.Boolean)">
            <summary>
            All viewport in current document.
            </summary>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Viewport">Viewport.</returns>
            <search>viewport,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.InDocument(Revit.Application.Document,System.Boolean)">
            <summary>
            All viewport in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="Viewport">Viewport.</returns>
            <search>viewport,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Associated(Revit.Elements.Element)">
            <summary>
            Get associated view and sheet for the viewport.
            </summary>
            <param name="viewport">Viewport.</param>
            <returns name="View">View.</returns>
            <returns name="Sheet">Sheet.</returns>
            <search>viewport,place,view,associat,sheet</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move viewport on sheet.
            Important! Set point values in true length unit values not scaled according to the viewport!
            </summary>
            <param name="viewport">Viewport.</param>
            <param name="point">Translation point.</param>
            <returns name="Viewport">Viewport.</returns>
            <search>viewport,move</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Rotate(Revit.Elements.Element,System.String)">
            <summary>
            Rotate viewport on sheet (Clockwise/Counterclockwise).
            </summary>
            <param name = "viewport">Viewport.</param>
            <param name="rotation">Rotation as string value.</param>
            <returns name="Viewport">Viewport.</returns>
            <search>viewport,rotate</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Labels">
            <summary>
            Get all viewport labels in current document.
            </summary>
            <returns name="Label">Label.</returns>
            <search>viewport,label</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.LabelByName(System.String)">
            <summary>
            Get viewport label by name.
            </summary>
            <param name="name">Name as string.</param>
            <returns name="Label">Label.</returns>
            <search>viewport,label,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.SetLabel(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set the label for the viewport.
            </summary>
            <param name="viewport">Viewport.</param>
            <param name="label">Label.</param>
            <returns name="Viewport">Viewport.</returns>
            <search>viewport,label</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Label(Revit.Elements.Element)">
            <summary>
            Get the label for the viewport.
            </summary>
            <param name="viewport">Viewport.</param>
            <returns name="Label">Label.</returns>
            <search>viewport,label</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.BoxCenter(Revit.Elements.Element)">
            <summary>
            Returns the center point of the outline of the viewport on the sheet, excluding the viewport label. 
            </summary>
            <param name="viewport">Viewport.</param>
            <returns name="Point">Point.</returns>
            <search>viewport,bounding,box,center</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.BoxOutline(Revit.Elements.Element)">
            <summary>
            Returns the outline as a bounding box of the viewport on the sheet, excluding the viewport label.
            </summary>
            <param name="viewport">Viewport.</param>
            <returns name="BoundingBox">BoundingBox.</returns>
            <search>viewport,bounding,box,outline</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Collector(Autodesk.Revit.DB.Document)">
            <summary>
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Create(Revit.Elements.Views.View,System.String)">
            <summary>
            Create view template from view.
            </summary>
            <param name="view">View.</param>
            <param name="name">Name for the new view template.</param>
            <returns name="ViewTemplate">View template.</returns>
            <search>view,template,create</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.InDocument">
            <summary>
            All view template in current document
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
            <returns name="ViewTemplate">View template.</returns>
            <returns name="Enum">ViewType as Revit enumeration type.</returns>
            <search>view,template,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.InDocument(Revit.Application.Document)">
            <summary>
            All view template in document
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="ViewTemplate">View template ordered by type.</returns>
            <returns name="Enum">ViewType as Revit enumeration type.</returns>
            <search>view,template,all</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.ByName(System.String)">
            <summary>
            Get view template by name in current document
            Note: Due to limitations in dynamo will 3D templates fail!
            </summary>
            <param name="name">Name of the view template.</param>
            <returns name="ViewTemplate">View template.</returns>
            <search>view,template,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Duplicate(Revit.Elements.Views.View,System.String)">
            <summary>
            Duplicate view template.
            </summary>
            <param name="viewTemplate">View template.</param>
            <param name="name">Name for the duplicated view.</param>
            <returns name="ViewTemplate">View template.</returns>
            <search>view,template,duplicate,copy</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Delete(Revit.Elements.Views.View)">
            <summary>
            Delete view template.
            </summary>
            <param name="viewTemplate">View template.</param>
            <returns name="watch">Add a watch node!</returns>
            <search>view,template,delete</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Purge(Revit.Application.Document)">
            <summary>
            Purge view template(s) in document.
            </summary>
            <param name="document">Project document (rvt).</param>
            <returns name="watch">Add a watch node!</returns>
            <search>view,template,purge</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.ByView(Revit.Elements.Views.View)">
            <summary>
            Get view template by view.
            </summary>
            <param name="view">View.</param>
            <returns name="ViewTemplate">View template.</returns>
            <search>view,template,result</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.ParameterIds(Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get all parameter ids in view template.
            </summary>
            <param name="viewTemplate">View template.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="integer">Parameter ids.</returns>
            <search>view,template,parameter,id</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.ParameterNames(Revit.Elements.Views.View,System.Boolean)">
            <summary>
            Get all parameter names in view template.
            </summary>
            <param name="viewTemplate">View template.</param>
            <param name="condense">Condense to shortest feasible output?</param>
            <returns name="string">Parameter names.</returns>
            <search>view,template,parameter,name</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.TemplateParameter(Revit.Elements.Views.View)">
            <summary>
            Get template parameter that may be controlled or
            not, when this view is assigned as a template.
            </summary>
            <param name="viewTemplate">View template.</param>
            <returns name="Controlled">Controlled parameter(s).</returns>
            <returns name="NonControlled">NonControlled parameter(s).</returns>
            <search>view,template,parameter</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Set(Revit.Elements.Views.View,Revit.Elements.Views.View)">
            <summary>
            Set view template by view.
            </summary>
            <param name="view">View.</param>
            <param name="viewTemplate">View template.</param>
            <returns name="View">View.</returns>
            <search>view,template,add</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Apply(Revit.Elements.Views.View,Revit.Elements.Views.View)">
            <summary>
            Apply view template by view.
            </summary>
            <param name="view">View.</param>
            <param name="viewTemplate">View template.</param>
            <returns name="View">View.</returns>
            <search>view,template,apply</search>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.SetNone(Revit.Elements.Views.View)">
            <summary>
            Set view template to none (remove view template).
            </summary>
            <param name="view">View.</param>
            <returns name="view">View.</returns>
            <search>view,template,none</search>
        </member>
        <member name="F:Orchid.About._webVer">
            <summary>
            Get the online Orchid version (revision) number.
            </summary>
        </member>
        <member name="M:Orchid.About.Info">
            <summary>
            About the package.
            </summary>
            <returns name="watch">Add a watch node!</returns>
            <search>about,orchid</search>
        </member>
        <member name="M:Orchid.About.Update">
            <summary>
            Verify this version of Orchid to see if an update is available.
            </summary>
            <returns name="watch">Add a watch node!</returns>
            <search>update,orchid</search>
        </member>
    </members>
</doc>
