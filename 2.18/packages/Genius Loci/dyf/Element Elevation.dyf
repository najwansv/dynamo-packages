{
  "Uuid": "2ca258e0-6038-4c80-8848-4e2ace39332e",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Element",
  "Description": "Return the elevation (Z value) of the given element.",
  "Name": "Element Elevation",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 202\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#https://github.com/albandechasteigner/GeniusLociForDynamo\n\nimport clr\n# Import RevitAPI Classes\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.GeometryConversion)\n\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nelements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\nresult=[]\n\nfor element in elements :\n\tif hasattr(element, \"Location\"):\n\t\tloc = element.Location\n\t\tif loc:\t\n\t\t\t# point-based elements (e.g. most loadable families)\n\t\t\tif isinstance(loc,LocationPoint):\n\t\t\t\tloca=loc.Point\n\t\t\t# line-based elements (e.g. walls)\n\t\t\telif isinstance(loc,LocationCurve):\n\t\t\t\ttry:loca=loc.Curve.Evaluate(0.5,True)\n\t\t\t\texcept:loca=loc.Curve.Evaluate(0.5, False)\n\t\t\telif isinstance(element,Instance):\n\t\t\t\tloca = element.GetTotalTransform().Origin\n\t\t\telif hasattr(element, \"Origin\"):\n\t\t\t\tloca = element.Origin\n\t\t\t##Section Marker and ReferenceElevationMarker(Doesn't work for ReferenceElevationMarker)\n\t\t\telif ElementId(BuiltInCategory.OST_Viewers) == element.Category.Id :\n\t\t\t\tviewSection = doc.GetElement(ElementId(element.Id.IntegerValue + 1))\n\t\t\t\tloca = viewSection.Origin\n\t\t\t#Elevation Marker\n\t\t\telif isinstance(element,Autodesk.Revit.DB.ElevationMarker) :\n\t\t\t\tmarker = doc.GetElement(ElementId(element.Id.IntegerValue + 1))\n\t\t\t\tbox=marker.BoundingBox[doc.ActiveView]\n\t\t\t\tloca = (box.Min+box.Max)/2\n\t\t\t# Grid\t\n\t\t\telif isinstance(element,Autodesk.Revit.DB.Grid):\n\t\t\t\tloca=element.Curve.Evaluate(0.5,True)\n\t\t\t# view specific elements (e.g. filled regions)\n\t\t\telif hasattr(element, \"OwnerViewId\") and element.OwnerViewId != ElementId.InvalidElementId :\n\t\t\t\tview=element.Document.GetElement(element.OwnerViewId)\n\t\t\t\tbox = element.BoundingBox[view]\n\t\t\t\tloca = (box.Min+box.Max)/2\n\t\t\t# sketch-based elements (e.g. floors)\n\t\t\telse :\n\t\t\t\tbox = element.get_BoundingBox(None)\n\t\t\t\tloca = (box.Min+box.Max)/2\n\t\t\tresult.append(loca.ToPoint().Z)\n\telif hasattr(element, \"OwnerViewId\"):\n\t\tview=element.Document.GetElement(element.OwnerViewId)\n\t\tbox = element.BoundingBox[view]\n\t\tloca = (box.Min+box.Max)/2\n\t\tresult.append(loca.ToPoint().Z)\n\nif isinstance(IN[0], list): OUT = result\nelse: OUT = result[0]",
      "VariableInputPorts": true,
      "Id": "6600ecaf97694de6bb5b8cee9be46601",
      "Inputs": [
        {
          "Id": "78916eaae2d843a387d573384a99afa5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "15dde3c25d9141b188404042b8ef01c6",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script IronPython intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "d132916067fa42dfa1e7a14bcd0d2bc6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1310476ac8f747f49c589228aa8b9611",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "double",
      "Id": "4f48588be44c4a058b74829bb078a124",
      "Inputs": [
        {
          "Id": "45b9bac31502477aa27099e9b89d31b1",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    }
  ],
  "Connectors": [
    {
      "Start": "15dde3c25d9141b188404042b8ef01c6",
      "End": "45b9bac31502477aa27099e9b89d31b1",
      "Id": "c2ded15757ab4e2ebb207f33650ad928"
    },
    {
      "Start": "1310476ac8f747f49c589228aa8b9611",
      "End": "78916eaae2d843a387d573384a99afa5",
      "Id": "b6b1bc1f820649249b77648ce57a25d9"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6600ecaf97694de6bb5b8cee9be46601",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 311.6,
        "Y": 330.8
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "d132916067fa42dfa1e7a14bcd0d2bc6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 194.619023106433,
        "Y": 329.313340371867
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "4f48588be44c4a058b74829bb078a124",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 471.606281587082,
        "Y": 331.233120454391
      }
    ],
    "Annotations": [],
    "X": 59.9644086009735,
    "Y": -17.0606403803868,
    "Zoom": 0.931811528498331
  }
}