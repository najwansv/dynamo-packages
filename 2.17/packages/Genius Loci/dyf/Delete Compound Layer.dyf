{
  "Uuid": "4e69b1ed-965c-4c01-ba1d-27ebe5b39d7e",
  "IsCustomNode": true,
  "Category": "GeniusLoci.CompoundStructure",
  "Description": "Removes a layer at the given index in the compound system family (wall, floor, roof or ceiling).",
  "Name": "Delete Compound Layer",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "ElementOrFamilyType",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "93850ee456ad46448603e96e76072123",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e5c1510e11eb4847bc32ac6a5a781484",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "index",
        "TypeName": "int",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "The index of the layer (The first index is 0)\nCounts from the exterior of the wall and from \nthe top of roof, floor and ceiling. "
      },
      "Id": "005d310b9d8a41a7a7052b24d94065d3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b815c76a028340ca88358f67060edbb8",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2020\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n\nimport clr\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nimport System\nfrom System.Collections.Generic import List\n\ndef tolist(obj1):\n    if hasattr(obj1,\"__iter__\"): return obj1\n    else: return [obj1]\n\nelements = tolist(UnwrapElement(IN[0]))\nindex = tolist(IN[1])\n\noutList,boolList = [], []\nlayersToKeep = List[CompoundStructureLayer]()\n\nfor elem in elements :\n\tif isinstance(elem, ElementType):\n\t\tfamType=elem\n\telif isinstance(elem, Wall):\n\t\tfamType = elem.WallType\n\telif isinstance(elem, Floor):\n\t\tfamType = elem.FloorType\n\telif isinstance(elem, FootPrintRoof) or isinstance(elem, ExtrusionRoof) or isinstance(elem, RoofBase) :\n\t\tfamType = elem.RoofType\n\telif isinstance(elem, Ceiling) or isinstance(elem, FaceWall) :\n\t\tfamType = doc.GetElement(elem.GetTypeId())\n\telse:\n\t\tpass\n\tcompStr = famType.GetCompoundStructure()\n\tlayers=list(compStr.GetLayers())\n\tstructural=compStr.StructuralMaterialIndex\n\tvariable=compStr.VariableLayerIndex\n\t#index before the structural layer\n\tcount = sum(i < structural for i in index)\n\tcount2 = sum(i < variable for i in index)\n\tidx = 0\n\twhile idx < compStr.LayerCount:\n\t\tboolList.Add(compStr.ParticipatesInWrapping(idx))\n\t\tidx = idx+1\n\tfirstCoreLayerIndex = compStr.GetFirstCoreLayerIndex()\n\tlastCoreLayerIndex = compStr.GetLastCoreLayerIndex()\n\tnumberOfShellLayExt = compStr.GetNumberOfShellLayers(ShellLayerType.Exterior)\n\tnumberOfShellLayInt = compStr.GetNumberOfShellLayers(ShellLayerType.Interior)\n\t\n\tfor idx in sorted(index, reverse=True):\n\t\tdel boolList[idx]\n\t\tif idx < firstCoreLayerIndex :\n\t\t\tnumberOfShellLayExt -= 1\n\t\tif idx > lastCoreLayerIndex:\n\t\t\tnumberOfShellLayInt -= 1\n\tlayersToKeep=[l for l in layers if l.LayerId not in index]\n\t\n\tcompStr.SetLayers(layersToKeep)\n\tcompStr.SetNumberOfShellLayers(ShellLayerType.Exterior, numberOfShellLayExt)\n\tcompStr.SetNumberOfShellLayers(ShellLayerType.Interior, numberOfShellLayInt)\n\tif structural not in index :\n\t\tcompStr.StructuralMaterialIndex=structural-count\n\tif variable not in index:\n\t\tcompStr.VariableLayerIndex=variable-count2\n\tidx = 0\n\twhile idx < compStr.LayerCount:\n\t\tif idx < compStr.GetFirstCoreLayerIndex() or idx > compStr.GetLastCoreLayerIndex() :\n\t\t\tcompStr.SetParticipatesInWrapping(idx, boolList[idx])\n\t\tidx = idx+1\n\ttry:\t\n\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\tfamType.SetCompoundStructure(compStr)\n\t\toutList.append(famType)\n\t\tTransactionManager.Instance.TransactionTaskDone()\n\texcept Exception, e:\n\t\toutList.append(\"Failed:-\\n\" + e.message)\n\nif isinstance(IN[0], list): OUT = outList\nelse: OUT = outList[0]",
      "VariableInputPorts": true,
      "Id": "1288386c10814a59841afe8300b520eb",
      "Inputs": [
        {
          "Id": "3e5f0fd7f7864bc887950997be5dcd8a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41e6bc0b44c54109ac665d30a1e023e9",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b3ba8475864740479d6623228d929968",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script IronPython intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "FamilyType",
      "Id": "b735771c562843ecb291795e17595ee1",
      "Inputs": [
        {
          "Id": "10f0d2778bbb417aa7917d230e9e52bf",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    }
  ],
  "Connectors": [
    {
      "Start": "e5c1510e11eb4847bc32ac6a5a781484",
      "End": "3e5f0fd7f7864bc887950997be5dcd8a",
      "Id": "5ac89d521a114ed793bd395d3e15daf9"
    },
    {
      "Start": "b815c76a028340ca88358f67060edbb8",
      "End": "41e6bc0b44c54109ac665d30a1e023e9",
      "Id": "77b4654bb4ad4de0b19beb1e878271dd"
    },
    {
      "Start": "b3ba8475864740479d6623228d929968",
      "End": "10f0d2778bbb417aa7917d230e9e52bf",
      "Id": "fc08c5cd7550437887be65587bd6c0b4"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "93850ee456ad46448603e96e76072123",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 221.836111086598,
        "Y": 165.906666666667
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "005d310b9d8a41a7a7052b24d94065d3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14.704474491675,
        "Y": 249.328086676178
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1288386c10814a59841afe8300b520eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 550.236111086598,
        "Y": 194.906666666667
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "b735771c562843ecb291795e17595ee1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 781.153446726456,
        "Y": 197.073154091981
      }
    ],
    "Annotations": [],
    "X": 37.8383620786404,
    "Y": 194.061268711314,
    "Zoom": 0.551520311464878
  }
}