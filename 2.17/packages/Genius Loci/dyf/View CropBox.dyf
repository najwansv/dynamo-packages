{
  "Uuid": "4fd99786-0e28-4128-b35e-2d08165f2c48",
  "IsCustomNode": true,
  "Category": "GeniusLoci.View",
  "Description": "Obtain the CropBox, the SectionBox, the SectionMarker or the ElevationMarker element of the given view. \r\nRetrieve also the CropBox curves and the BoundingBox.",
  "Name": "View CropBox",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2021\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#https://github.com/albandechasteigner/GeniusLociForDynamo\n\nimport clr\nimport math\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Transactions import TransactionManager\nclr.AddReference('RevitNodes')\nimport Revit\nclr.ImportExtensions(Revit.GeometryConversion)\n\nviews = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\n\ndef GetCropBox(view):\n\tprovider= ParameterValueProvider(ElementId(BuiltInParameter.ID_PARAM))\n\trule = FilterElementIdRule(provider, FilterNumericEquals(), view.Id )\n\tfilter= ElementParameterFilter(rule)\n\treturn doc.GetElement(FilteredElementCollector(doc).WherePasses(filter).ToElementIds().Find(lambda x: x.IntegerValue != view.Id.IntegerValue))\n\nelem,lines,box=[],[],[]\n\nfor view in views:\n\tdoc=view.Document\n\t# CropBox\n\tif view.ViewType == ViewType.FloorPlan or view.ViewType == ViewType.CeilingPlan or view.ViewType == ViewType.EngineeringPlan :\n\t\telem.append(GetCropBox(view))\n\t\tshape=view.GetCropRegionShapeManager().GetCropShape()\n\t\tif len(shape) > 0:\n\t\t\tlines.append([s.ToProtoType() for s in shape[0]])\n\t\telse:lines.append(None)\n\t\t# Transform required for the scopeboxes \n\t\tbb = view.CropBox\n\t\ttransform = bb.Transform\n\t\tmin = transform.OfPoint(bb.Min)\n\t\tmax = transform.OfPoint(bb.Max)\n\t\tviewRange = view.GetViewRange()\r\n\r\n\t\ttopLevel = doc.GetElement(viewRange.GetLevelId(PlanViewPlane.TopClipPlane))\r\n\t\ttopOffset = viewRange.GetOffset(PlanViewPlane.TopClipPlane)\r\n\t\tbttmLevel = doc.GetElement(viewRange.GetLevelId(PlanViewPlane.BottomClipPlane))\r\n\t\tbttmOffset = viewRange.GetOffset(PlanViewPlane.BottomClipPlane)\r\n\t\tcutLevel = doc.GetElement(viewRange.GetLevelId(PlanViewPlane.CutPlane))\r\n\t\tcutOffset = viewRange.GetOffset(PlanViewPlane.CutPlane)\r\n\t\tif bttmLevel : newmin = XYZ(min.X, min.Y, bttmLevel.ProjectElevation + bttmOffset)\r\n\t\telse: newmin = XYZ(min.X, min.Y, cutLevel.ProjectElevation + bttmOffset)\r\n\t\tif topLevel : newmax = XYZ(max.X, max.Y, topLevel.ProjectElevation + topOffset)\r\n\t\telse: newmax = XYZ(max.X, max.Y, cutLevel.ProjectElevation + cutOffset)\r\n\t\tbb.Min = newmin\r\n\t\tbb.Max = newmax\n\t\tbox.append(bb.ToProtoType())\n\t# viewSection Marker\n\telif view.ViewType == ViewType.Section or view.ViewType == ViewType.Elevation :\n\t\telem.append(GetCropBox(view))\n\t\tshape=view.GetCropRegionShapeManager().GetCropShape()\n\t\tif len(shape) > 0:\n\t\t\tlines.append([s.ToProtoType() for s in shape[0]])\n\t\telse:lines.append(None)\t\n\t\tbb = view.CropBox\n\t\ttransform = bb.Transform\n\t\tmin = transform.OfPoint(bb.Min)\n\t\tmax = transform.OfPoint(bb.Max)\n\t\tbb.Min = min\n\t\tbb.Max = max\n\t\tbox.append(bb.ToProtoType())\n\t# SectionBox\n\telif view.ViewType == ViewType.ThreeD:\n\t\telem.append(doc.GetElement(ElementId(view.Id.IntegerValue - 1)))\n\t\tlines.append(None)\n\t\tbb = view.GetSectionBox()\n\t\ttransform = bb.Transform\n\t\tmin = transform.OfPoint(bb.Min)\n\t\tmax = transform.OfPoint(bb.Max)\n\t\tbb.Min = min\n\t\tbb.Max = max\n\t\tbox.append(bb.ToProtoType())\n\nif isinstance(IN[0], list): OUT = elem, lines, box\nelse: OUT = elem[0], lines[0], box[0]",
      "VariableInputPorts": true,
      "Id": "833c2a8fc40e41bf81d6a837df279e97",
      "Inputs": [
        {
          "Id": "8c07003e743f40718cecb5d14ba48a19",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ed770b414e248d38e7b6aecc36471e9",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script IronPython intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "view",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "ca6da3102e2d40958f00c36791a8b448",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "24c43ed13fef434d9991474e75f2563e",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];\nx[2];",
      "Id": "10cc4f42db71450eb3d18e27126b220e",
      "Inputs": [
        {
          "Id": "963857b8a860405aa4b7148e28fd6f18",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a513991f9332434eb3e896869a9555b0",
          "Name": "",
          "Description": "Valeur de l'expression à la ligne 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4ba47da37884475d9a6cd063a5064a17",
          "Name": "",
          "Description": "Valeur de l'expression à la ligne 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "abffb957ba39444fab0e205a897f12b7",
          "Name": "",
          "Description": "Valeur de l'expression à la ligne 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Permet de créer le code DesignScript directement"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "//CropBox, SectionBox or ElevationMarker\r\nElement",
      "Id": "0f5d0a79ffea42849ee1d3a79e4d5ab3",
      "Inputs": [
        {
          "Id": "8ebe6a9048b64aa49cb43e6909c4c31d",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "//CropBox curves\r\nCurves",
      "Id": "e703fb68d7b3485097ea9d8a9a146579",
      "Inputs": [
        {
          "Id": "b7933b59fe1643abbccaaefca46cd0e6",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "//CropBox or SectionBox BoundingBox\r\nBoundingBox",
      "Id": "d14abd378ba74779a2d7231c98281484",
      "Inputs": [
        {
          "Id": "d1fbb5fc36414bb4ab880e5d1f501e41",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    }
  ],
  "Connectors": [
    {
      "Start": "8ed770b414e248d38e7b6aecc36471e9",
      "End": "963857b8a860405aa4b7148e28fd6f18",
      "Id": "d467eb8d8bcd45b59b1f6dc1b7b2d8aa"
    },
    {
      "Start": "24c43ed13fef434d9991474e75f2563e",
      "End": "8c07003e743f40718cecb5d14ba48a19",
      "Id": "7df5b3eca63645a1aab0699850505730"
    },
    {
      "Start": "a513991f9332434eb3e896869a9555b0",
      "End": "8ebe6a9048b64aa49cb43e6909c4c31d",
      "Id": "0955ed01eb674967a0ca9163dff377a5"
    },
    {
      "Start": "4ba47da37884475d9a6cd063a5064a17",
      "End": "b7933b59fe1643abbccaaefca46cd0e6",
      "Id": "32f5e1bf66f44ee2b133a2c3a22de2d1"
    },
    {
      "Start": "abffb957ba39444fab0e205a897f12b7",
      "End": "d1fbb5fc36414bb4ab880e5d1f501e41",
      "Id": "e7ec6455644b48f499cc5fdb26b761a9"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "Id": "833c2a8fc40e41bf81d6a837df279e97",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 524.60000000000014,
        "Y": 407.22666666666703
      },
      {
        "Id": "ca6da3102e2d40958f00c36791a8b448",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 315.4,
        "Y": 406.426666666667
      },
      {
        "Id": "10cc4f42db71450eb3d18e27126b220e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 703.4,
        "Y": 410.64
      },
      {
        "Id": "0f5d0a79ffea42849ee1d3a79e4d5ab3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 894.6,
        "Y": 331.0
      },
      {
        "Id": "e703fb68d7b3485097ea9d8a9a146579",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 894.6,
        "Y": 424.0
      },
      {
        "Id": "d14abd378ba74779a2d7231c98281484",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 894.6,
        "Y": 517.0
      }
    ],
    "Annotations": [],
    "X": -184.0,
    "Y": -30.8,
    "Zoom": 1.0
  }
}