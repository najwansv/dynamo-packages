{
  "Uuid": "ee3e4c3a-599a-4dba-af1f-57f58b08ce3d",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Tag",
  "Description": "Works only in Revit 2018 and later.\r\nCreates a tag at a given location, of given type and in a supplied view. \r\nThe node also works with Linked Elements (except space and area), Multi Category tag and Material Tag.\r\nBased on an archilab node",
  "Name": "Create Tag",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Application.Document.Current": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      },
      "Revit.Application.Document": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2015, Konrad K Sobon\n# @arch_laboratory, http://archi-lab.net\n#This node is an update to Create Annotation Tag node that can be found in archi-lab package. Thanks to Konrad K Sobon for making the original one.\n# Ability to tag Linked elements by Alban de Chasteigner\n\nimport clr\n# Import RevitAPI\nclr.AddReference(\"RevitAPI\")\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n# Import Element wrapper extension methods\nclr.AddReference(\"RevitNodes\")\nimport Revit\n# Import geometry conversion extension methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\nimport sys\nsys.path.append(r\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\n\n# Import DocumentManager and TransactionManager\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\nversion=int(app.VersionNumber)\n\nviews = UnwrapElement(IN[0])\nelements = UnwrapElement(IN[1]) if isinstance(IN[1],list) else [UnwrapElement(IN[1])]\nlocationPts = UnwrapElement(IN[2]) if isinstance(IN[2],list) else [UnwrapElement(IN[2])]\ntagType = UnwrapElement(IN[3])\n\ntagOrientation = IN[4]\nif tagOrientation == True :\n\ttagOrientation = TagOrientation.Horizontal\n\tspTagOrientation = SpatialElementTagOrientation.Horizontal\nelif tagOrientation == False :\n\ttagOrientation = TagOrientation.Vertical\n\tspTagOrientation = SpatialElementTagOrientation.Vertical\n\nleader = IN[5]\n\nif IN[6] != None:\n\tlink = UnwrapElement(IN[6])\nelse:\n\tlink = None\n\t\nRunIt = IN[7]\n\n#ueWrapper from Dimitar Venkov\nueWrapper = None\nwrappers = clr.GetClrType(Revit.Elements.ElementWrapper).GetMethods()\nfor w in wrappers:\n\tif w.ToString().startswith(\"Revit.Elements.UnknownElement\"):\n\t\tueWrapper = w\n\t\tbreak\n\t\t\t\t\ndef toRvtPoint(point):\n\treturn point.ToXyz()\n\ndef toRvtId(_id):\n\tif isinstance(_id, int) or isinstance(_id, str):\n\t\tid = ElementId(int(_id))\n\t\treturn id\n\telif isinstance(_id, ElementId):\n\t\treturn _id\n\ntagTypeId = toRvtId(tagType.Id)\nchk = []\ntry:\n\terrorReport = None\n\tif RunIt:\n\t\tif tagType.Category.Id == ElementId(BuiltInCategory.OST_RoomTags):\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\t\t\t\t#added the if statement to get roomId from the linked element.\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\troomId = LinkElementId(link.Id, i.Id)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\troomId = LinkElementId(i.Id)\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\troomTag = doc.Create.NewRoomTag(roomId, location, j.Id)\n\t\t\t\t\t\troomTag.RoomTagType = tagType\n\t\t\t\t\t\troomTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\troomTag.HasLeader = leader\n\t\t\t\t\t\tchk.append(roomId)\n\t\t\t\t\t\troomTags.append(roomTag)\n\t\t\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\telse:\n\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\troomId = LinkElementId(link.Id, i.Id)\n\t\t\t\t\telse:\n\t\t\t\t\t\troomId = LinkElementId(i.Id)\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\troomTag = doc.Create.NewRoomTag(roomId, location, views.Id)\n\t\t\t\t\troomTag.RoomTagType = tagType\n\t\t\t\t\troomTag.TagOrientation = spTagOrientation\n\t\t\t\t\troomTag.HasLeader = leader\n\t\t\t\t\troomTags.append(roomTag)\n\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MEPSpaceTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\tspaceTag = doc.Create.NewSpaceTag(i, location, j)\n\t\t\t\t\t\tspaceTag.SpaceTagType = tagType\n\t\t\t\t\t\tspaceTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\tspaceTag.HasLeader = leader\n\t\t\t\t\t\troomTags.append(spaceTag)\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\tspaceTag = doc.Create.NewSpaceTag(i,location, views)\n\t\t\t\t\tspaceTag.SpaceTagType = tagType\n\t\t\t\t\tspaceTag.TagOrientation = spTagOrientation\n\t\t\t\t\tspaceTag.HasLeader = leader\n\t\t\t\t\troomTags.append(spaceTag)\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_AreaTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\tareaTag = doc.Create.NewAreaTag(j,i, location)\n\t\t\t\t\t\tareaTag.AreaTagType = tagType\n\t\t\t\t\t\tareaTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\tareaTag.HasLeader = leader\n\t\t\t\t\t\troomTags.append(areaTag)\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\tareaTag = doc.Create.NewAreaTag(views,i,location)\n\t\t\t\t\tareaTag.AreaTagType = tagType\n\t\t\t\t\tareaTag.TagOrientation = spTagOrientation\n\t\t\t\t\tareaTag.HasLeader = leader\n\t\t\t\t\troomTags.append(areaTag)\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MultiCategoryTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\tmultitags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc,j.Id, reference, \tleader, TagMode.TM_ADDBY_MULTICATEGORY, \ttagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\tmultitags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tmultitags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_MULTICATEGORY, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\tmultitags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\tmultitags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = multitags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MaterialTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\tMattags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc, j.Id, reference, leader, TagMode.TM_ADDBY_MATERIAL, tagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\tMattags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tMattags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_MATERIAL, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\tMattags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\tMattags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = Mattags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_RebarTags) and version >= 2023:\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\ttags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tsubelement = i.GetSubelements()[0]\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = subelement.GetReference().CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = subelement.GetReference()\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc, j.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\t\tresult = tags\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tsubelement = i.GetSubelements()[0]\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = subelement.GetReference().CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = subelement.GetReference()\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = tags\n\t\telse:\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\ttags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc, j.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = tags\n\telse:\n\t\tresult = \"RunIt is set to False.\"\nexcept:\n\t# if error accurs anywhere in the process catch it\n\timport traceback\n\terrorReport = traceback.format_exc()\n\n#Assign your output to the OUT variable\nif errorReport == None:\n\tOUT = result\nelse:\n\tOUT = errorReport",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "70e4b9db16ca409aa82e5e420fcbec2b",
      "Inputs": [
        {
          "Id": "4f2b8313c7f7492a8210954dfbcd5d28",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c94b485edc645d5831125619c171481",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e74bdf4672154c0689a7289f7a9455d1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e3c9e96a0dbe40d3a7550497b781052c",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "63ef1ab8b6b2478d982357a9648a912b",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a1d9c998d3f44acdb9cb2222887aad8a",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "533e74b4164047acbe1ecedc22bd09bc",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "314b2e133b134f72b7a3f502f2debb97",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b1c80cbb696445aa53fae9480f8da9e",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Tag",
      "Id": "5b3b7735048c455aa61b66739a43594f",
      "Inputs": [
        {
          "Id": "ef19f295130744d1a28cca5c0709188e",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "view",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": "Revit.Application.Document.Current.ActiveView",
        "Description": "View to tag in."
      },
      "Id": "4acb11bf629f47e18a849e5be63f6afe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b1f4098733a04c97bceff49e6672f7c8",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Element to tag"
      },
      "Id": "7e0dfe11fc124ce583e6a665b5725bde",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c35d6971014b418a9e98052eb3cce868",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "TagLocation",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Point"
      },
      "Id": "5f4706a4075e4d759f8b3eabc6b2e34b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9e412e973de440d684539a626d2357b3",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "TagType",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Family Type to use"
      },
      "Id": "b31b94408b194360a5ea1ca4fa6ace14",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ab470050ead453f9cb3fc0bb60f3fbc",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "horizontal",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "true",
        "Description": "Optional : Place tag horizontal, defaults to true"
      },
      "Id": "3b7ff1e2c1fd4aa09eca1be98d70bee3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "43fe5b23e09f4ed581b6cdba6a2e271d",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "addLeader",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": "Optional : Add a leader, defaults to false"
      },
      "Id": "aed348c3980f4057a4a0b828a2eb454e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "19839e2f7db540dc9bdc024ef5528566",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "LinkInstance",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "9178078f07434413a8d7af3fbb45699c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "220020dbea1543f18d10d45e1ba1a93b",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "RunIt",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "b7b05d33498245e7a34e24bd7769cb66",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cfa6d1e81f7048c6a0a12aac203e949b",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "7b1c80cbb696445aa53fae9480f8da9e",
      "End": "ef19f295130744d1a28cca5c0709188e",
      "Id": "5f1fba7060a74fc4b5b5598d0f811c13",
      "IsHidden": "False"
    },
    {
      "Start": "b1f4098733a04c97bceff49e6672f7c8",
      "End": "4f2b8313c7f7492a8210954dfbcd5d28",
      "Id": "1f2d1a6cd8c248829a151f3ca2b719ab",
      "IsHidden": "False"
    },
    {
      "Start": "c35d6971014b418a9e98052eb3cce868",
      "End": "4c94b485edc645d5831125619c171481",
      "Id": "904482ae15284e0b894a1ada69737f46",
      "IsHidden": "False"
    },
    {
      "Start": "9e412e973de440d684539a626d2357b3",
      "End": "e74bdf4672154c0689a7289f7a9455d1",
      "Id": "9dc144e1402c403a9daf1998e87c8127",
      "IsHidden": "False"
    },
    {
      "Start": "6ab470050ead453f9cb3fc0bb60f3fbc",
      "End": "e3c9e96a0dbe40d3a7550497b781052c",
      "Id": "64e4ea22d50e440baf0fd15f9ad82fc9",
      "IsHidden": "False"
    },
    {
      "Start": "43fe5b23e09f4ed581b6cdba6a2e271d",
      "End": "63ef1ab8b6b2478d982357a9648a912b",
      "Id": "0ec2c8a6ec5f4e40a5fe74cc1326f866",
      "IsHidden": "False"
    },
    {
      "Start": "19839e2f7db540dc9bdc024ef5528566",
      "End": "a1d9c998d3f44acdb9cb2222887aad8a",
      "Id": "92a749af0a304c538aeccf8984efd2d1",
      "IsHidden": "False"
    },
    {
      "Start": "220020dbea1543f18d10d45e1ba1a93b",
      "End": "533e74b4164047acbe1ecedc22bd09bc",
      "Id": "9dc2238eeae2400893ef4deeb6d316d5",
      "IsHidden": "False"
    },
    {
      "Start": "cfa6d1e81f7048c6a0a12aac203e949b",
      "End": "314b2e133b134f72b7a3f502f2debb97",
      "Id": "6d630eb03cb94320967a96bd2ed44423",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": []
}