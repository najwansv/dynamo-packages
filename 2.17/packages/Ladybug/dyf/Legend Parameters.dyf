<Workspace Category="Ladybug.03 :: Extra" Description="Use this component to change the colors, numerical range, and/or number of divisions
of any Ladybug legend along with the corresponding colored mesh that the legend refers to.
Any Ladybug component that outputs a colored mesh and a legend will have an input
that can accept Legend Parameters from this component.
This component particularly helpful in making the colors of Ladybug graphics consistent
for a presentation or for synchonizing the numerical range and colors between Ladybug graphics.
-" ID="4307a7a2-88a4-490a-b5bc-1f115ae3772c" Name="Legend Parameters" Version="1.2.0.2690" X="400" Y="-100" zoom="0.5">
  <NamespaceResolutionMap/>
  <Elements>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="&quot;Ladybug&quot;;&#xA;&quot;legendpar_node.py&quot;;" ShouldFocus="false" guid="fcdf53c3-9249-4bbc-bc5d-64d7a0914a3c" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="input python script" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="-750" y="390"/>
    <PythonNodeModels.PythonNode guid="bb003755-c107-40f0-9eec-d3db8dd0e7a2" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="import and prepare py code" type="PythonNodeModels.PythonNode" x="-355" y="385">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Find packages from Dynamo folder and prepare the code.&quot;&quot;&quot;
import clr
from System import AppDomain, Environment, IO

def tryGetPluginPath(plugin):
    &quot;&quot;&quot;Try to get path to plugin folder.&quot;&quot;&quot;
    clr.AddReference('ProtoGeometry')
    _loc = tuple(a.Location
                 for a in AppDomain.CurrentDomain.GetAssemblies()
                 if 'ProtoGeometry' in a.FullName)

    try:
        _ver = float(_loc[0].split('\\')[-2])
    except:
        _ver = float(_loc[0].split('\\')[-2].split(' ')[-1])

    assert _ver &gt;= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'

    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    _dynamoPath = '%s\\%.1f' % (('\\').join(_loc[0].split('\\')[-4:-2]), float(_loc[0].split('\\')[-2]))
    # if the assembly is cached put Revit folder first, and then try to load it from core
    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),
                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))
    _settingsFilename = 'DynamoSettings.xml'

    pkf = []
    for path in _dynamoPaths:
        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)
        if IO.File.Exists(settingsFile):
            with open(settingsFile, 'rb') as outf:
                for line in outf:
                    if line.strip().startswith('&lt;CustomPackageFolders&gt;'):
                        for l in outf:
                            if l.strip().startswith('&lt;/CustomPackageFolders&gt;'):
                                break
                            else:
                                pkf.append(l.replace('&lt;/string&gt;', '').replace('&lt;string&gt;', '').strip())

    for p in pkf:
        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')
        # In case of custom folders user may put honeybee under the root folder
        ppp = IO.Path.Combine(p, plugin, 'extra')
        if IO.Directory.Exists(pp):
            return pp
        elif IO.Directory.Exists(ppp):
            return ppp


try:
    plugin, filename = IN

    p = tryGetPluginPath(plugin)

    if not p:
        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))

	# import the file and wrap it into sys.append
    f = IO.Path.Combine(p, 'nodesrc', filename)
    with open(f, 'rb') as inf:
        source = '    '.join(inf.readlines())

    header = 'try:\n    import sys\n' + \
        '    sys.path.append(r\'{}\')\n\n'.format(p) + \
        '    sys.path.append(r\'C:\Program Files (x86)\IronPython 2.7\Lib\')\n\n' + \
        '    '

    footer = '\nexcept Exception, e:\n' + \
        '    import traceback\n' + \
        '    OUT = &quot;ERROR:\\n\\t{}&quot;.format(str(e)) + \\\n' + \
        '    &quot;\\n\\nIf you think this is a bug submit an issue on github.\\n&quot; + \\\n' + \
        '    &quot;https://github.com/ladybug-tools/ladybug-dynamo/issues\\n&quot; +  \\\n' + \
        '    &quot;and include below error message:\\n\\n&quot; + \\\n' + \
        '    &quot;{}&quot;.format(traceback.format_exc())\n'

    OUT = header + source + footer

except Exception, e:
    import sys
    sys.path.append(r'C:\Program Files (x86)\IronPython 2.7\Lib')
    import traceback
    OUT = &quot;ERROR:\n\t{}&quot;.format(str(e)) + \
        &quot;\n\nIf you think this is a bug submit an issue on github.\n&quot; + \
        &quot;https://github.com/ladybug-tools/ladybug-dynamo/issues\n&quot; +  \
        &quot;and include below error message:\n\n&quot; + \
        &quot;{}&quot;.format(traceback.format_exc())

      </Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonStringNode guid="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" inputcount="4" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="core" type="PythonNodeModels.PythonStringNode" x="-75" y="460">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <PortInfo default="false" index="2"/>
      <PortInfo default="false" index="3"/>
    </PythonNodeModels.PythonStringNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="bd204404-be42-41fd-99eb-dde12fccee98" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_domain_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="475">
      <Symbol value="// A number representing the higher boundary of the legend's numerical range. The default is set to the highest value of the data stream that the legend refers to.&#xD;&#xA;_domain_: int[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="6a14f299-a5a3-4a8e-931f-67e2ed8195cd" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_cType_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="570">
      <Symbol value="_cType_: int = 0;"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="481a2b82-c6c6-4e99-827e-cea00f750ccd" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="_colors_" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" x="-750" y="665">
      <Symbol value="// A list of colors that will be used to re-color the legend and the corresponding colored mesh(es).  The number of colors input here should match the numSegments_ value input above.  An easy way to generate a list of colors to input here is with the Dynamo &quot;Gradient&quot; component and a Dynamo &quot;Series&quot; component connected to the Gradient component's &quot;t&quot; input.  A bunch of Dynamo &quot;Swatch&quot; components is another way to generate a list of custom colors.  The default colors are a gradient spectrum from blue to yellow to red.&#xD;&#xA;_colors_: DSCore.Color[] = {};"/>
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel CodeText="out[0];" ShouldFocus="false" guid="eafea9ae-84bc-4b58-87a7-167490f72727" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="decompose outputs" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" x="150" y="515"/>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="cd97a95d-3cba-4fdd-8896-8388c1eca63a" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="legendPar" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="475">
      <Symbol value="// A legend parameters to be plugged into any of the Ladybug components with a legend.&#xD;&#xA;legendPar;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="6f783a1b-4f33-4afd-91a4-4ca5cfe4ed66" inputcount="2" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="Error report" type="PythonNodeModels.PythonNode" x="150" y="380">
      <PortInfo default="false" index="0"/>
      <PortInfo default="false" index="1"/>
      <Script>
        
&quot;&quot;&quot;Report errors&quot;&quot;&quot;
importErr, runErr = IN
errors = []

if importErr and str(importErr).startswith(&quot;ERROR:&quot;):
    errors.append(importErr)

if runErr and str(runErr).startswith(&quot;ERROR:&quot;):
    errors.append(runErr)

if len(errors)==0:
    OUT = &quot;All good! Vvizzzz.&quot;
else:
    OUT = &quot;\n&quot;.join(errors)

      </Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="b6e8846b-4932-4e9e-8be3-03690906e12b" isFrozen="false" isPinned="false" isSelectedInput="true" isUpstreamVisible="true" isVisible="true" lacing="Disabled" nickname="ERRReport" type="Dynamo.Graph.Nodes.CustomNodes.Output" x="380" y="380">
      <Symbol value="// Report&#xD;&#xA;ERRReport;"/>
      <PortInfo default="false" index="0"/>
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel end="bb003755-c107-40f0-9eec-d3db8dd0e7a2" end_index="0" portType="0" start="fcdf53c3-9249-4bbc-bc5d-64d7a0914a3c" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="bb003755-c107-40f0-9eec-d3db8dd0e7a2" end_index="1" portType="0" start="fcdf53c3-9249-4bbc-bc5d-64d7a0914a3c" start_index="1"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" end_index="0" portType="0" start="bb003755-c107-40f0-9eec-d3db8dd0e7a2" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" end_index="1" portType="0" start="bd204404-be42-41fd-99eb-dde12fccee98" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" end_index="2" portType="0" start="6a14f299-a5a3-4a8e-931f-67e2ed8195cd" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" end_index="3" portType="0" start="481a2b82-c6c6-4e99-827e-cea00f750ccd" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="eafea9ae-84bc-4b58-87a7-167490f72727" end_index="0" portType="0" start="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="cd97a95d-3cba-4fdd-8896-8388c1eca63a" end_index="0" portType="0" start="eafea9ae-84bc-4b58-87a7-167490f72727" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="6f783a1b-4f33-4afd-91a4-4ca5cfe4ed66" end_index="0" portType="0" start="bb003755-c107-40f0-9eec-d3db8dd0e7a2" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="6f783a1b-4f33-4afd-91a4-4ca5cfe4ed66" end_index="1" portType="0" start="7c9fbab7-d6b0-4d98-8b1d-75a6a24de9b9" start_index="0"/>
    <Dynamo.Graph.Connectors.ConnectorModel end="b6e8846b-4932-4e9e-8be3-03690906e12b" end_index="0" portType="0" start="6f783a1b-4f33-4afd-91a4-4ca5cfe4ed66" start_index="0"/>
  </Connectors>
  <Notes/>
  <Annotations/>
  <Presets/>
  <Cameras>
    <Camera Name="Background Preview" eyeX="-34.00" eyeY="-34.00" eyeZ="21.19" lookX="-14.19" lookY="-43.06" lookZ="-41.65" upX="-0.17" upY="0.85" upZ="-0.50"/>
  </Cameras>
</Workspace>
