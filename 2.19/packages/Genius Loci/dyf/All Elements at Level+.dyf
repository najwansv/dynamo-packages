{
  "Uuid": "bd4c2866-688c-460a-afef-597f80b6301f",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Level",
  "Description": "Get all the elements at the specified Level from the model. Unlike the OOTB node it works with MEP Curves and Structural Framings.",
  "Name": "All Elements at Level+",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Level": {
        "Key": "Revit.Elements.Level",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2020\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n\nimport clr\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\n#Import Collections\nfrom System.Collections.Generic import *\nimport System\n\nlevelInput = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\nlevList = []\n\nsysId = ElementId(BuiltInParameter.RBS_START_LEVEL_PARAM)\nschedId = ElementId(BuiltInParameter.INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM)\nstairsId = ElementId(BuiltInParameter.STAIRS_BASE_LEVEL_PARAM)\nframingId = ElementId(BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM)\ntrussId = ElementId(BuiltInParameter.TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM)\nroofId = ElementId(BuiltInParameter.ROOF_CONSTRAINT_LEVEL_PARAM)\nwkId = ElementId(BuiltInParameter.SKETCH_PLANE_PARAM)\n\nfor levelIn in levelInput :\n\tdoc=levelIn.Document\n\tfilters = List[ElementFilter]()\n\tfilters.Add(ElementLevelFilter(levelIn.Id))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(schedId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(sysId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(stairsId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(framingId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(trussId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEqualsRule(roofId, levelIn.Id)))\n\tfilters.Add(ElementParameterFilter(ParameterFilterRuleFactory.CreateEndsWithRule(wkId, levelIn.Name, False)))\n\torFilter = LogicalOrFilter(filters)\n\tcat_list = [BuiltInCategory.OST_ConduitCenterLine, BuiltInCategory.OST_PipeCurvesCenterLine, BuiltInCategory.OST_DuctCurvesCenterLine, \r\nBuiltInCategory.OST_FlexPipeCurvesCenterLine, BuiltInCategory.OST_FlexDuctCurvesCenterLine,  BuiltInCategory.OST_ConduitFittingCenterLine, BuiltInCategory.OST_PipeFittingCenterLine, BuiltInCategory.OST_DuctFittingCenterLine,  BuiltInCategory.OST_CurtainWallMullions,BuiltInCategory.OST_CurtainWallPanels]\n\tcatFilter = ElementMulticategoryFilter(List[BuiltInCategory](cat_list),True)\n\tandFilter = LogicalAndFilter(orFilter,catFilter)\t\n\tlevList.append(FilteredElementCollector(doc).WherePasses(andFilter).WhereElementIsNotElementType().ToElements())\n\t\nif isinstance(IN[0], list): OUT = levList\nelse: OUT = levList[0]\norFilter.Dispose()\nandFilter.Dispose()",
      "VariableInputPorts": true,
      "Id": "737d59a75236413abf94e6c67c567f78",
      "Inputs": [
        {
          "Id": "2497f2ed6b1c4ae2a38d220e5d7d25ea",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fbc206f54ac54dadaffc0795b731b30d",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script IronPython intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "level",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "0e74d93a517f4d95a606f0cfbcb4c21d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7dde5fa16efa43c6a016dd6f893cbec1",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Elements",
      "Id": "56671a68ab654ff0bec1b70655e08e02",
      "Inputs": [
        {
          "Id": "352a7875c6fe4e05b9b00985bb3dd0d0",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    }
  ],
  "Connectors": [
    {
      "Start": "fbc206f54ac54dadaffc0795b731b30d",
      "End": "352a7875c6fe4e05b9b00985bb3dd0d0",
      "Id": "31a13ac82a9e4ee896591e2822bdb0c9"
    },
    {
      "Start": "7dde5fa16efa43c6a016dd6f893cbec1",
      "End": "2497f2ed6b1c4ae2a38d220e5d7d25ea",
      "Id": "735924489707457682e6566b31d85a8e"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "737d59a75236413abf94e6c67c567f78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 504.0,
        "Y": 288.8
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "0e74d93a517f4d95a606f0cfbcb4c21d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 332.0,
        "Y": 288.8
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "56671a68ab654ff0bec1b70655e08e02",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 728.4,
        "Y": 288.8
      }
    ],
    "Annotations": [],
    "X": 0.0,
    "Y": 0.0,
    "Zoom": 1.0
  }
}