{
  "Uuid": "112c4aec-7e86-4278-b3cf-275124e60b27",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Select",
  "Description": "Get the instances of the given class. Works with Element Class, FamilyType, ViewFamilyType, Wall/Floor/Roof/CeilingType, GroupType, FilledRegionType and TextNoteType.",
  "Name": "All Elements of Class+",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2020\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#https://github.com/albandechasteigner/GeniusLociForDynamo\n\nimport clr\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nimport System\n\ndef tolist(x):\n    if hasattr(x,'__iter__'): return x\n    else : return [x]\n\ncats = tolist(UnwrapElement(IN[0]))\ninputdocs = tolist(UnwrapElement(IN[1]))\n\n#Inspired by Clockwork\nfor inputdoc in inputdocs :\n\tif inputdoc == None:\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\n\telif isinstance (inputdoc, Document):\n\t\tdoc = inputdoc\n\telif isinstance (inputdoc, RevitLinkInstance):\n\t\tdoc = inputdoc.GetLinkDocument()\n\telse: doc = DocumentManager.Instance.CurrentDBDocument\n\nprovider = ParameterValueProvider(ElementId(BuiltInParameter.ELEM_FAMILY_PARAM))\nprovider2 = ParameterValueProvider(ElementId(BuiltInParameter.ELEM_TYPE_PARAM))\nevaluator = FilterNumericEquals()\nelements = []\n\nfor cat in cats:\n\tif isinstance(cat, Category) :\n\t\tcollector = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType().ToElements()\n\telif isinstance(cat, System.Type) : \n\t\tcollector = FilteredElementCollector(doc).OfClass(cat).ToElements()\n\telif isinstance(cat, FamilySymbol) or isinstance(cat,Autodesk.Revit.DB.FilledRegionType) :\n\t\tfilter = ElementParameterFilter(FilterElementIdRule(provider, evaluator, cat.Id))\t\n\t\tcollector = FilteredElementCollector(doc).OfCategoryId(cat.Category.Id).WherePasses(filter).ToElements()\n\telif isinstance(cat,TextNoteType):\n\t\tcollector = FilteredElementCollector(doc).OfClass(TextNote).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)\n\telif isinstance(cat,ModelTextType):\n\t\tcollector = FilteredElementCollector(doc).OfClass(ModelText).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)\n\telif isinstance(cat, HostObjAttributes):\n\t\tfilter = ElementParameterFilter(FilterElementIdRule(provider2, evaluator, cat.Id))\t\n\t\tcollector = FilteredElementCollector(doc).OfCategoryId(cat.Category.Id).WherePasses(filter).ToElements()\n\telif isinstance(cat, ViewFamilyType) :\n\t\tcollector = FilteredElementCollector(doc).OfClass(View).WhereElementIsNotElementType().ToElements().FindAll(lambda x : x.GetTypeId() == cat.Id)\n\telif isinstance(cat, GroupType):\n\t\tcollector = [c for c in cat.Groups]\n\tcol = collector if len(collector)>1 else collector[0]\n\telements.append(col)\n\nif isinstance(IN[0], list) : OUT = elements\nelse: OUT = elements[0]",
      "VariableInputPorts": true,
      "Id": "1cea2b9271e248fb860b73bc1a7aca73",
      "Inputs": [
        {
          "Id": "c66605914db94d8eaee5263811c54c0a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f9016ec7f3d4fa2b5a37ea1af9e8974",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "470769060bb34851bba14e760dbbcd98",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script IronPython intégré."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "elementClass",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Element Class, FamilyType, ViewFamilyType, Compound Type"
      },
      "Id": "d8b61266f41b4005b585c4a16befc70c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "23f25288a6884b52804c8b2be6e33ec1",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "elements",
      "Id": "d331487c6f9c46d1aba3587503b88bcf",
      "Inputs": [
        {
          "Id": "7372044575354bd99717331a079d80df",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "docOrRevitLinkInstance",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": "null",
        "Description": "Use only if you want to query a linked model"
      },
      "Id": "ff2cee78ad7749ac988a2e7901845214",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "932f84a046d546ce88e7c58359e6c857",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "470769060bb34851bba14e760dbbcd98",
      "End": "7372044575354bd99717331a079d80df",
      "Id": "c990893760b449a9afe99edddf6b3068"
    },
    {
      "Start": "23f25288a6884b52804c8b2be6e33ec1",
      "End": "c66605914db94d8eaee5263811c54c0a",
      "Id": "7cfd68b81b42480fb343f42d6936e777"
    },
    {
      "Start": "932f84a046d546ce88e7c58359e6c857",
      "End": "7f9016ec7f3d4fa2b5a37ea1af9e8974",
      "Id": "b3d81477e2b8446688417b3f7b7abd10"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.2.15705",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1cea2b9271e248fb860b73bc1a7aca73",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 240.8,
        "Y": 287.2
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "d8b61266f41b4005b585c4a16befc70c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -354.40000000000009,
        "Y": 275.6
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "d331487c6f9c46d1aba3587503b88bcf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 414.4,
        "Y": 286.8
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "ff2cee78ad7749ac988a2e7901845214",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -279.20000000000005,
        "Y": 368.8
      }
    ],
    "Annotations": [],
    "X": 422.0,
    "Y": 10.0,
    "Zoom": 1.0
  }
}