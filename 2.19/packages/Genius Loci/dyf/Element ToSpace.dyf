{
  "Uuid": "a3f4d0c0-12d1-4652-9dbf-eb3eed670dea",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Room",
  "Description": "Reports the space of the current or linked model in which the element of the current document is located.\r\nPlease note : The custom node maps the element phase to the space phase using the phase name. ",
  "Name": "Element ToSpace",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Element of current document"
      },
      "Id": "e5f089624a054b9eaa33f08a1cf9d4ab",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4c53b5638b8647348086fc9b24312e7d",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "//Space of current document or linked model\r\nSpace",
      "Id": "7aa22013b65442c1b16f0f763b1fba0b",
      "Inputs": [
        {
          "Id": "43d821c14c984949909ff50b9277516b",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "Sortie de fonction, utiliser avec les noeuds personnalisés"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "RevitLinksInstance",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": "null",
        "Description": "Optional input to retrieve linked spaces"
      },
      "Id": "2d09c8adbcf949ff9690e6e22b90829a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "95e238f391e44a608c16aa5e3f8c99ea",
          "Name": "",
          "Description": "Symbole",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Un paramètre de fonction, utiliser avec des noeuds personnalisés.\r\n\r\nVous pouvez spécifier le type et la valeur par défaut du paramètre. Par exemple,\r\n\r\nentrée: var[]..[]\r\nvaleur: bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Alban de Chasteigner 2021\n#twitter : @geniusloci_bim\n#geniusloci.bim@gmail.com\n#https://github.com/albandechasteigner/GeniusLociForDynamo\n \nimport clr\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\n\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.Elements)\nfrom Revit.Elements import *\n\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nElements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\ninputdocs = UnwrapElement(IN[1]) if isinstance(IN[1],list) else [UnwrapElement(IN[1])]\n\ndef GetSpace(elements, inputdoc):\n\tspaces=[]\n\tfor e in Elements:\n\t\tphase = doc.GetElement(e.CreatedPhaseId)\n\t\tloc = e.Location\n\t\tif type(loc) == LocationPoint:\n\t\t\tpt=loc.Point\n\t\telif type(loc) == LocationCurve:\n\t\t\tpt=loc.Curve.Evaluate(0.5, True)\n\t\t# sketch-based elements (ceiling, floor and roof)\n\t\telif isinstance(e, CeilingAndFloor) or isinstance(e,RoofBase) :\n\t\t\ttry:\n\t\t\t\tfor ref in HostObjectUtils.GetTopFaces(e):\n\t\t\t\t\tgeomFace=e.GetGeometryObjectFromReference(ref)\n\t\t\t\t\t#Get UV BoundingBox\n\t\t\t\t\tbbox = geomFace.GetBoundingBox()\n\t\t\t# Multi-faceted floor/ceiling/roof\n\t\t\texcept:\n\t\t\t\tbbox = e.get_BoundingBox(none)\n\t\t\tuv = (bbox.Min+bbox.Max) / 2\n\t\t\tpt = geomFace.Evaluate(uv)\n\t\tif not isinstance(inputdoc, RevitLinkInstance):\n\t\t\ttry:\n\t\t\t\tif isinstance(e, FamilyInstance):\n\t\t\t\t\tspaces.append(e.Space[phase].ToDSType(True))\n\t\t\t\telse: \n\t\t\t\t\tspaces.append(doc.GetSpaceAtPoint(pt, phase).ToDSType(True))\n\t\t\texcept:spaces.append(None)\n\t\telif isinstance (inputdoc, RevitLinkInstance):\n\t\t\ttry:\n\t\t\t\tlinkDoc = inputdoc.GetLinkDocument()\n\t\t\t\tphaseName = phase.Name\n\t\t\t\tlinkPhase = FilteredElementCollector(linkDoc).OfClass(Phase).ToElements().Find(lambda x : x.Name == phaseName)\n\t\t\t\ttransform = inputdoc.GetTotalTransform()\n\t\t\t\tlocationPoint = transform.Inverse.OfPoint(pt)\n\t\t\t\tspaces.append(linkDoc.GetSpaceAtPoint(locationPoint, linkPhase).ToDSType(True))\n\t\t\texcept:spaces.append(None)\n\t\telse:spaces.append(None)\n\treturn spaces\n\nif isinstance(IN[1], list): OUT = [GetSpace(Elements, inputdoc) for inputdoc in inputdocs]\nelse: OUT = [GetSpace(Elements, inputdoc) for inputdoc in inputdocs][0]",
      "Engine": "IronPython2",
      "EngineName": "IronPython2",
      "VariableInputPorts": true,
      "Id": "825cbdb945d44d608cc9fe379376b8d4",
      "Inputs": [
        {
          "Id": "9b96adebaab6438d9b2ee66907abaf72",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ce2e259493a4482e8959f5ffe946743a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "817f4c15b6854e14b76a4c10083309c0",
          "Name": "OUT",
          "Description": "Résultat du script Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Exécute un script Python intégré."
    }
  ],
  "Connectors": [
    {
      "Start": "4c53b5638b8647348086fc9b24312e7d",
      "End": "9b96adebaab6438d9b2ee66907abaf72",
      "Id": "bfe63d4fc4184e36bf82cfac012e6493",
      "IsHidden": "False"
    },
    {
      "Start": "95e238f391e44a608c16aa5e3f8c99ea",
      "End": "ce2e259493a4482e8959f5ffe946743a",
      "Id": "e55f8f40d1c94eddb42acc6b11ac3f33",
      "IsHidden": "False"
    },
    {
      "Start": "817f4c15b6854e14b76a4c10083309c0",
      "End": "43d821c14c984949909ff50b9277516b",
      "Id": "a538eb6e3432421aa6545b89b98a5669",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Aperçu en arrière-plan",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "e5f089624a054b9eaa33f08a1cf9d4ab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 170.11179258187232,
        "Y": 226.55094998985192
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "7aa22013b65442c1b16f0f763b1fba0b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 887.69399911828145,
        "Y": 336.611051402016
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "2d09c8adbcf949ff9690e6e22b90829a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 50.177653838347339,
        "Y": 423.4154275174954
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "825cbdb945d44d608cc9fe379376b8d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 553.0569075909973,
        "Y": 337.01144349115521
      }
    ],
    "Annotations": [],
    "X": -88.908765,
    "Y": 83.2020625,
    "Zoom": 0.70823125
  }
}