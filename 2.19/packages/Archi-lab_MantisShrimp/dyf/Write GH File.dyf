<Workspace Version="1.2.0.2654" X="246.93195337102" Y="119.024755997115" zoom="1.33823125" Name="Write GH File" Description="This node exports Dynamo (Design Script) geometry/data to Grasshopper." ID="cb9934f8-6394-45c9-a0f4-b944426af146" Category="Archi-lab_MantisShrimp.Grasshopper.WriteGH">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="42b47784-2441-4d34-b214-8500e426c11b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Geometry" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="e919cec2-1b03-458f-a33c-1e0739baf487" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-7.47255005440951" y="73.0327344395821" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="File Path" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="0ce4c357-c4d3-4bcb-a7a9-172a24678ca6" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="14.1978451033781" y="141.581938846518" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Export" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="94ed5f87-31e5-480e-87c3-6c6f52a9feb2" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="449" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="OUT" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="702de468-d0df-48cd-8ffe-dbbc887fa226" type="PythonNodeModels.PythonNode" nickname="Python Script" x="158.007339261417" y="19.6958160279737" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script># Copyright(c) 2016, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)

import System
from os import path
assemblies = System.AppDomain.CurrentDomain.GetAssemblies()
msUIpath = [a.Location for a in assemblies if 'MantisShrimp,' in a.FullName][0]
msPath = System.IO.Path.GetDirectoryName(msUIpath).rsplit('\\',1)[0]
msPathExtra = '%s\\extra\\' %msPath
txtFilePath = '%s\\extra\\rhPath.txt' %msPath
sys.path.append(msPathExtra)
if not path.isfile(txtFilePath):
	message = "Provide valid RhinoCommon.dll path."
else:
	file = open(txtFilePath, 'r+')
	rhDllPath = file.readline()
	clr.AddReferenceToFileAndPath(rhDllPath)
	file.close()

from System import Array
from System.Collections.Generic import *
import Rhino as rc
import pickle
from mantisshrimp import *

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

dsObjects = IN[0]
_filePath = str(IN[1])
_export = IN[2]

class SerializeObjects(object):
    
    def __init__(self, filePath, data = None):
        folder, fileName = os.path.split(filePath)
        if not os.path.isdir(folder):
            os.mkdir(folder)
        self.filePath = filePath
        self.data = data     
    def saveToFile(self):
    	with open(self.filePath, 'wb') as outf:
			pickle.dump(self.data, outf)         
    def readFromFile(self):
        with open(self.filePath, 'rb') as inf:
            self.data = pickle.load(inf)

def process_list(_func, _list):
    return map( lambda x: process_list(_func, x) if type(x)==list else _func(x), _list )

def toMSPoint(_point):
	return MSPoint(_point.X, _point.Y, _point.Z)

def toMSLine(item):
	msStartPt = MSPoint(item.StartPoint.X, item.StartPoint.Y, item.StartPoint.Z)
	msEndPt = MSPoint(item.EndPoint.X, item.EndPoint.Y, item.EndPoint.Z)
	return MSLine(msStartPt, msEndPt)

def toMSPoint(item):
	return MSPoint(item.X, item.Y, item.Z)

def toMSArc(item):
	msStartPt = toMSPoint(item.StartPoint)
	msEndPt = toMSPoint(item.EndPoint)
	msMidPoint = toMSPoint(item.PointAtParameter(0.5))
	return MSArc(msStartPt, msMidPoint, msEndPt)

def toMSEllipse(item):
	origin = toMSPoint(item.CenterPoint)
	ptX = toMSPoint(Point.Add(item.CenterPoint, item.MinorAxis))
	ptY = toMSPoint(Point.Add(item.CenterPoint, item.MajorAxis))
	return MSEllipse(origin, ptX, ptY, None, None, None)

def toMSCircle(item):
	msOrigin = toMSPoint(item.CenterPoint)
	msVector = MSVector(item.Normal.X, item.Normal.Y, item.Normal.Z)
	msPlane = MSPlane(msOrigin, msVector)
	return MSCircle(msPlane, item.Radius)

def toMSNurbsCurve(item):
	msPoints4d = []
	for pt, w in zip(item.ControlPoints(), item.Weights()):
		msPoints4d.append(MSPoint4d(pt.X, pt.Y, pt.Z, w))
	return MSNurbsCurve(msPoints4d, item.Weights(), item.Knots(), item.Degree)

def toMSNurbsCurve2(item):
	msPoints4d = []
	for pt in item.ControlPoints():
		msPoints4d.append(MSPoint4d(pt.X, pt.Y, pt.Z, 1))
	weights = []
	for i in range(0, len(item.ControlPoints()),1):
		weights.append(1)
	return MSNurbsCurve(msPoints4d, weights, item.Knots(), item.Degree)

def tryGetArc(item):
	startPoint = item.StartPoint
	endPoint = item.EndPoint
	tangent = item.TangentAtParameter(0)
	dsArc = Arc.ByStartPointEndPointStartTangent(startPoint, endPoint, tangent)
	if round(dsArc.Length, 4) == round(item.Length, 4):
		return dsArc
	else:
		return None

def tryGetLine(item):
	startPoint = item.StartPoint
	endPoint = item.EndPoint
	distance = startPoint.DistanceTo(endPoint)
	if round(item.Length, 4) == round(distance, 4):
		return Line.ByStartPointEndPoint(startPoint, endPoint)
	else:
		return None

def toMSPolyLine(item):
	segments, msSegments = [], []
	for crv in item.Curves():
		segments.append(tryGetLine(crv))
	if all(type(x) == Line for x in segments):
		for i in segments:
			msSegments.append(toMSLine(i))
		return MSPolyLine(msSegments)
	else:
		return None

def toMSPolyCurve(item):
	segments = []
	for crv in item.Curves():
		if tryGetLine(crv) != None:
			segments.append(toMSLine(tryGetLine(crv)))
		elif tryGetArc(crv) != None:
			segments.append(toMSArc(tryGetArc(crv)))
		else:
			segments.append(toMSNurbsCurve2(crv.ToNurbsCurve()))
	return MSPolyCurve(segments)

def toMSMesh(item):
	msPoints = []
	for pt in item.VertexPositions:
		msPoints.append(MSPoint(pt.X, pt.Y, pt.Z))
	faceTopology = []
	for i in item.FaceIndices:
		if i.Count == 3:
			faceTopology.append([i.A, i.B, i.C])
		else:
			faceTopology.append([i.A, i.B, i.C, i.D])
	return MSMesh(msPoints, faceTopology)

def toMSNurbsSurface(item):
	rational = item.IsRational
	weights = item.Weights()
	controlPoints = list(item.ControlPoints())
	msControlPoints = [[] for i in range(len(controlPoints))]
	for index, (ptList, wtList) in enumerate(zip(controlPoints, weights)):
		for pt, wt in zip(ptList, wtList):
			msControlPoints[index].append(MSPoint4d(pt.X, pt.Y, pt.Z, wt))
	return MSNurbsSurface(msControlPoints, weights, item.UKnots(), item.VKnots(), item.DegreeU, item.DegreeV, item.NumControlPointsU, item.NumControlPointsV, rational)

def toMSBrep(item):
	faces = []
	subSurf = item.Surfaces()
	for i in subSurf:
		faces.append(toMSNurbsSurface(i.ToNurbsSurface()))
	return MSBrep(faces, None)

def toMSObject(item):
	if type(item) == Point:
		return MSPoint(item.X, item.Y, item.Z)
	elif type(item) == Line:
		return toMSLine(item)
	elif type(item) == PolyCurve:
		if toMSPolyLine(item) != None:
			return toMSPolyLine(item)
		else:
			return toMSPolyCurve(item)
	elif type(item) == Circle:
		return toMSCircle(item)
	elif type(item) == Ellipse:
		return toMSEllipse(item)
	elif type(item) == Arc:
		return toMSArc(item)
	elif type(item) == NurbsCurve:
		return toMSNurbsCurve(item)
	elif type(item) == Mesh:
		return toMSMesh(item)
	elif type(item) == NurbsSurface:
		return toMSNurbsSurface(item)
	elif type(item) == PolySurface:
		return toMSBrep(item)
	else:
		return MSData(item)

if _export:
	if isinstance(dsObjects, list):
		outGeometry = process_list(toMSObject, dsObjects)
	else:
		outGeometry = process_list(toMSObject, [dsObjects])
	try:
		serializer = SerializeObjects(_filePath, outGeometry)
		serializer.saveToFile()
		message = "File is exported to \n" + _filePath + ".\n" + \
			"Now you can use Grasshopper to import the file."
	except:
		message = "Export failed. Try again."
		pass
else:
	message = "Export set to false."

#Assign your output to the OUT variable
OUT = '\n'.join('{:^35}'.format(s) for s in message.split('\n'))</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="42b47784-2441-4d34-b214-8500e426c11b" start_index="0" end="702de468-d0df-48cd-8ffe-dbbc887fa226" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e919cec2-1b03-458f-a33c-1e0739baf487" start_index="0" end="702de468-d0df-48cd-8ffe-dbbc887fa226" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="0ce4c357-c4d3-4bcb-a7a9-172a24678ca6" start_index="0" end="702de468-d0df-48cd-8ffe-dbbc887fa226" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="702de468-d0df-48cd-8ffe-dbbc887fa226" start_index="0" end="94ed5f87-31e5-480e-87c3-6c6f52a9feb2" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="81.5533981323242" eyeY="80.8788909912109" eyeZ="10.3963918685913" lookX="-65.0647888183594" lookY="-64.5634002685547" lookZ="-44.2003402709961" upX="-0.375534057617188" upY="0.891006529331207" upZ="-0.255110830068588" />
  </Cameras>
</Workspace>